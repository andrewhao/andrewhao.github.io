<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

	<title><![CDATA[The Sweet Spot]]></title>
	<link href="http://www.g9labs.com/atom.xml" rel="self"/>
	<link href="http://www.g9labs.com/"/>
	<updated>2018-03-21T20:47:56-07:00</updated>
	<id>http://www.g9labs.com/</id>
	<author>
		<name><![CDATA[Andrew Hao]]></name>
		
	</author>
	<generator uri="http://octopress.org/">Octopress</generator>

	
	<entry>
		
			<title type="html"><![CDATA[Tensorflow For Tears: Part 1]]></title>
		
		<link href="http://www.g9labs.com/2018/03/21/tensorflow-for-tears-part-1/"/>
		<updated>2018-03-21T18:56:34-07:00</updated>
		<id>http://www.g9labs.com/2018/03/21/tensorflow-for-tears-part-1</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<h3 id="an-introduction-to-every-parents-trial-and-travails">An introduction to every parent’s trial and travails</h3>

<p>When our son was born early last year, I admit I wasn’t ready for it. Fatherhood was not the kind of thing I was ready for (and who really can ever be ready for parenthood, anyways?).</p>

<p>It so turns out that the vast majority of the first year of parenting is simply enduring the gut-wrenching cries of your little one. And cry they do - crying when they are too tired, screaming when they are too energetic, crying when they are gassy, screaming when they are bored, and crying when they just pooped.</p>

<p>The trials that Annie and I went through with our little guy was particularly difficult on us (you can ask me in person if we ever get to chat). The little guy was a prolific screamer and absolutely. hated. sleep.</p>

<p>What’s a geeky dad to do? Quantify household suffering by leveraging machine learning, of course.</p>

<p>I set out to build a system that would in the end determine how well our little guy slept through (or didn’t sleep through) the night. I started by building a system that naively parsed audio samples from his nursery, and then trained a TensorFlow model to do more accurate detection of his cries. Here’s how it worked:</p>

<h3 id="act-1-the-misery-meter">Act 1: The Misery Meter</h3>

<p>In version 1 of the system, I bought <a href="https://www.amazon.com/Kinobo-Microphone-Desktop-Recognition-Software/dp/B00IR8R7WQ">a cheap USB microphone</a> and hooked it up to a Raspberry Pi 3.</p>

<p>In it, I loaded up a script to record a 30-second audio sample, using the <code>arecord</code> UNIX command line tool:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/usr/bin/env bash</span>
</span><span class="line">
</span><span class="line"><span class="nb">set</span> -euxo pipefail
</span><span class="line">
</span><span class="line"><span class="nv">DIR</span><span class="o">=</span><span class="s2">&quot;$( cd &quot;</span><span class="k">$(</span> dirname <span class="s2">&quot;${BASH_SOURCE[0]}&quot;</span> <span class="k">)</span><span class="s2">&quot; &amp;&amp; pwd )&quot;</span>
</span><span class="line"><span class="nv">RECORDING_FILE</span><span class="o">=</span><span class="s2">&quot;${DIR}/recordings/sample.wav&quot;</span>
</span><span class="line"><span class="nv">DATE</span><span class="o">=</span><span class="k">$(</span>date <span class="s2">&quot;+%Y-%m-%d %H:%M:%S&quot;</span><span class="k">)</span>
</span><span class="line"><span class="nv">UPLOAD_RECORDING_FILENAME</span><span class="o">=</span><span class="k">$(</span><span class="nb">printf</span> %q <span class="s2">&quot;${DATE}.wav&quot;</span><span class="k">)</span>
</span><span class="line">arecord --device<span class="o">=</span>hw:1,0 --format S16_LE --rate <span class="m">48000</span> -c1 -d <span class="m">30</span> --quiet <span class="s2">&quot;${RECORDING_FILE}&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>…then I ran the <code>sox</code> command-line tool to grab some simple loudness statistics out from it:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sox -V3 <span class="k">${</span><span class="nv">RECORDING_FILE</span><span class="k">}</span> -n stats 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">|</span> grep dB
</span></code></pre></td></tr></table></div></figure>

<p>In case you’re curious, here’s the full output from <code>sox -V3 FILE -n stats</code>. Pretty nifty:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">➜ sox -V3 sample.wav -n stats
</span><span class="line"><span class="c"># ... Truncated for brevity ...</span>
</span><span class="line">
</span><span class="line">sox INFO sox: effects chain: input        48000Hz  <span class="m">1</span> channels
</span><span class="line">sox INFO sox: effects chain: stats        48000Hz  <span class="m">1</span> channels
</span><span class="line">sox INFO sox: effects chain: output       48000Hz  <span class="m">1</span> channels
</span><span class="line">DC offset   0.000017
</span><span class="line">Min level  -0.141083
</span><span class="line">Max level   0.135651
</span><span class="line">Pk lev dB     -17.01
</span><span class="line">RMS lev dB    -29.32
</span><span class="line">RMS Pk dB     -27.37
</span><span class="line">RMS Tr dB     -30.83
</span><span class="line">Crest factor    4.12
</span><span class="line">Flat factor     0.00
</span><span class="line">Pk count           2
</span><span class="line">Bit-depth      14/16
</span><span class="line">Num samples     480k
</span><span class="line">Length s      10.000
</span><span class="line">Scale max   1.000000
</span><span class="line">Window s       0.050
</span></code></pre></td></tr></table></div></figure>

<p>Here, we’re really only interested in <code>RMS dB</code>, which is the relative loudness levels within this 30-second sample. I chose to push these three stats up to a web service which I use to aggregate and graph these metrics. <code>RMS lev</code> is the average, <code>RMS Pk</code> is the peak, and <code>RMS Tr</code> is the trough (the floor).</p>

<p>I’m not showing the entirety of the script, but the last thing it does is parse and push the results of the analysis of this audio sample to a Web-based metrics aggregation service! In case you were wondering, I have an API service sitting between the Raspberry Pi and a time-series API supplied by <a href="https://www.keen.io">Keen.io</a>. But the main point is that now I can load up a cute JS widget that graphs these data points!</p>

<p><img src="http://www.g9labs.com/images/tensorflow-for-tears/audio-graph.png" alt="Audio crying graph" /></p>

<p>Now, how does one read this graph?</p>

<ul>
  <li>We can follow the peaks of the audio signal and assume that any noise over a certain dB threshold is the little dude’s screaming.</li>
  <li>We can follow the troughs of the graph and assume that if the trough jumps, then man there is some serious crying going on, since the audio floor of the soundscape has been bumped up!</li>
  <li>Or we can follow the average RMS reading and assume some combination of the two?</li>
</ul>

<p>The truth of the matter, none of the readings from the Misery Meter (so I called it) were particularly reliable indicators of “the little buddy is crying his little head off”. Sometimes, his crying was at the same volume level as other ambient noises in the house (say, when he’s playing in the other room and someone shuts a door). So it turns out that using volume as a proxy for crying is insufficient to give us reliable results.</p>

<h3 id="act-2-enter-tensorflow-next">Act 2: Enter TensorFlow… next!</h3>

<p>In my next post, I’ll discuss how I modified this script to use TensorFlow to train a model that could then be used to enhance the accuracy of little dude’s crying. Stick around, it’ll be fun!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Elixir and Elm things I've written about elsewhere]]></title>
		
		<link href="http://www.g9labs.com/2018/03/13/elixir-and-elm-things-ive-written-elsewhere/"/>
		<updated>2018-03-13T20:52:23-07:00</updated>
		<id>http://www.g9labs.com/2018/03/13/elixir-and-elm-things-ive-written-elsewhere</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>While it’s been pretty quiet around these parts, I’ve kept the technical blogging up over on <a href="https://blog.carbonfive.com">my employer’s blog</a>. I’ve got quite a few posts around Elixir:</p>

<p><a href="https://blog.carbonfive.com/2018/03/19/lightweight-dependency-injection-in-elixir-without-the-tears/">Lightweight dependency injection in Elixir (without the tears)</a>: What are some ways we can use the language features of Elixir to apply small-scale dependency injection patterns, without a ton of ceremony?</p>

<p><a href="https://blog.carbonfive.com/2018/01/16/functional-mocks-with-mox-in-elixir/">Functional Mocks with Mox in Elixir</a>: This post discusses a mocking library in Elixir called <a href="https://github.com/plataformatec/mox">mox</a> that adheres to the Elixir Way(tm) of mocking (that is, the usage of fakes or doubles).</p>

<p><a href="https://blog.carbonfive.com/2018/01/30/comparing-dynamic-supervision-strategies-in-elixir-1-5-and-1-6/">Comparing Dynamic Supervision Strategies in Elixir 1.5 and 1.6</a>: In this blog post, I discuss the benefits of the new <code>DynamicSupervisor</code> module in Elixir 1.6 and how it makes the supervision of a dynamically-scaled supervision tree easier to set up.</p>

<p>Finally, I wrote <a href="https://blog.carbonfive.com/2017/10/25/taking-elm-for-a-test-drive/">“Taking Elm for a Test Drive”</a> about playing around with Elm, giving my take on the trajectory of the language.</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Pitfalls to avoid when moving to async systems]]></title>
		
		<link href="http://www.g9labs.com/2017/07/19/pitfalls-to-avoid-when-moving-to-async-systems/"/>
		<updated>2017-07-19T19:57:18-07:00</updated>
		<id>http://www.g9labs.com/2017/07/19/pitfalls-to-avoid-when-moving-to-async-systems</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>I recently published a post on the <a href="http://blog.carbonfive.com">Carbon Five blog</a> titled <a href="http://blog.carbonfive.com/2017/07/18/evented-rails-decoupling-complex-domains-in-rails-with-domain-events/">“Evented Rails: Decoupling complex domains in Rails with Domain Events”</a> that takes some of my thoughts about moving a Rails app to use Domain Events - leveraging the power of Sidekiq (or your job runner of choice) to send async messages between different domains of your app.</p>

<p>This approach always seems nice from the outset, but can hide some painful complexities if you go too far down the rabbit hole. Here is a repost of the latter half of that article, which is worth repeating:</p>

<h2 id="big-wins-of-the-async-model-speed--scalability">Big win[s of the async model]: speed &amp; scalability</h2>

<p>By splitting out domain logic into cohesive units, we’ve just designed our systems to farm out their workloads to a greater scalable number of workers. Imagine if you had a web request thread that would take 500ms to return, but 150ms of that time was spent doing a round trip to a different service. By decoupling that work from the main request thread and moving it to a background job – we’ve just sped up the responsiveness of our system for our end user, and we know that studies have shown that page speed performance equals money.</p>

<p>Additionally, making our application calls asynchronous allows us to scale the number of processing power we allocate to our system. We now have the ability to horizontally scale workers according to the type of job, or the domain they are working from. This may result in cost and efficiency savings as we match processing power to the workload at hand.</p>

<h2 id="big-challenge-dealing-with-asynchronous-data-flows">Big challenge: dealing with asynchronous data flows</h2>

<p>Once things go async, we now have a fundamentally different data design. For example, say you implemented an HTTP API endpoint that performed some action in the system synchronously. However, now you’ve farmed out the effects of the action to background processes through domain events. While this is great for response times, you’ve now no longer got the guarantees to the caller that the desired side effect has been performed once the server responds back.</p>

<h3 id="asynchronous-polling">Asynchronous polling</h3>

<p>An option is to implement the Polling pattern. The API can return a request identifier back to the caller on first call, with which which the caller can now query the API for the result status. If the result is not ready, the API service will return with a Nack message, or negative Ack, implying that the result data has not arrived yet. As soon as the results in the HTTP API are ready, the API will correctly return the result.</p>

<h3 id="pubsub-all-the-way-down">Pub/Sub all the way down</h3>

<p>Another option is to embrace the asynchronous nature of the system wholly and transition the APIs to event-driven, message-based systems instead. In this paradigm, we would introduce an external message broker such as RabbitMQ to facilitate messages within our systems. Instead of providing an HTTP endpoint to perform an action, the API service could subscribe to a domain event from the calling system, perform its side effect, then fire off its own domain event, to which the calling system would subscribe to. The advantage of this approach is that this scheme makes more efficient use of the network (reducing chattiness), but we trade off the advantages of using HTTP (the ubiquity of the protocol, performance enhancements like layered caching).</p>

<p>Browser-based clients can also get in on the asynchronous fun with the use of WebSockets to subscribe to server events. Instead of having a browser call an HTTP API, the browser could simply fire a WebSocket event, to which the service would asynchronously process (potentially also proxying the message downstream to other APIs with messages) and then responding via a WebSocket message when the data is done processing.</p>

<h2 id="big-challenge-data-consistency">Big challenge: data consistency</h2>

<p>When we choose an asynchronous evented approach, we now have to consider how to model asynchronous transactions. Imagine that one domain process charges a user’s credit card with a third party payment processor and another domain process is responsible for updating it in your database. There are now two processes updating two data stores. A central tenet in distributed systems design is to anticipate and expect failure. Let’s imagine any of the following scenarios happens:</p>

<ol>
  <li>An Amazon AWS partial outage takes down one of your services but not the other.</li>
  <li>One of your services becomes backed up due to high traffic, and no longer can service new requests in a timely manner.</li>
  <li>A new deployment has introduced a data bug in a downstream API that your teams are rushing to fix, but will requiring manual reconciling with the data in the upstream system.</li>
</ol>

<p>How will you build your domain and data models to account for failures in each processing step? What would happen if you have one operation occur in one domain that depends on data that has not yet appeared in another part of the system? Can you design your data models (and database schema) to support independent updates without any dependencies? How will you handle the case when one domain action fails and the other completes?</p>

<h3 id="first-approach-avoid-it-by-choosing-noncritical-paths-to-decouple-first">First approach: avoid it by choosing noncritical paths to decouple, first</h3>

<p>If you are implementing an asynchronous, evented paradigm for the first time, I suggest you carefully begin decoupling boundaries with domain events only for events that lie outside the critical business domain path. Begin with some noncritical aspect of the system — for example, you may have a third party analytics tracking service that you must publish certain business events to. That would be a nice candidate to decouple from the main request process and move to an async path.</p>

<h3 id="second-approach-enforce-transactional-consistency-within-the-same-processdomain-boundary">Second approach: enforce transactional consistency within the same process/domain boundary</h3>

<p>Although we won’t discuss specifics in this article, if you must enforce transactional consistency in some part of your system (say, the charging of a credit card with the crediting of money to a user’s account) then I suggest that you perform those operations within the same bounded context and same process, leaning on transactional consistency guarantees provided by your database layer.</p>

<h3 id="third-approach-embrace-it-with-eventual-consistency">Third approach: embrace it with eventual consistency</h3>

<p>Alternatively, you may be able to lean on “eventual consistency” semantics with your data. Maybe it’s less important that your data squares away with itself immediately — maybe it’s more important that the data, at some guaranteed point in time — eventually lines up. It may be OK for some aspect of your data (e.g. notifications in a news feed) and may not be appropriate for other data (e.g. a bank account balance).</p>

<p>You may need to fortify your system to ensure that data eventually becomes consistent. This may involve building out the following pieces of infrastructure.</p>

<ol>
  <li>Messages need to be durable — make sure your job enqueuing system does not drop messages, or at least has a failure mode to re-process them when (not if!) your system fails.</li>
  <li>Your jobs should be designed to be idempotent, so they can be retried multiple times and result in the correct outcome.</li>
  <li>You should easily be able to recover from bad data scenarios. Should a service go down, it should be able to replay messages, logs, or the consumer should have a queue of retry-able messages it can send.</li>
  <li>Eventual consistency means that you may need an external process to verify consistency. You may be doing this sort of verification process in a data warehouse, or in a different software system that has a full view of all the data in your distributed system. Be sure that this sort of verification is able to reveal to you holes in the data, and provide actionable insights so you can fix them.</li>
  <li>You will need to add monitoring and logging to measure the failure modes of the system. When errors spike, or messages fail to send (events fail to fire), you need to be alerted. Once alerted, your logging must be good enough to be able to trace the source and the data that each request is firing.</li>
</ol>

<p>The scale of this subject is large and is under active research in the field of computer science. A good book to pick up that discusses this topic is <a href="https://www.amazon.com/Service-Oriented-Design-Rails-Addison-Wesley-Professional/dp/0321659368">Service-Oriented Design with Ruby on Rails</a>. The popular <a href="http://www.enterpriseintegrationpatterns.com/">Enterprise Integration Patterns</a> book also has a great topic on consistency (and is accompanied by a very helpful <a href="http://www.enterpriseintegrationpatterns.com/patterns/conversation/EnsuringConsistencyIntro.html">online guide</a> as well).</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[JHipster &amp; Spring Boot for Rails developers]]></title>
		
		<link href="http://www.g9labs.com/2016/10/14/jhipster-and-spring-boot-for-rails-developers/"/>
		<updated>2016-10-14T14:24:39-07:00</updated>
		<id>http://www.g9labs.com/2016/10/14/jhipster-and-spring-boot-for-rails-developers</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>The first question you may be asking is - <em>why would I want to go from Rails to Java</em>?</p>

<p>Maybe you don’t have a choice. Maybe you started a new job. Maybe you heard Java was the new, old hotness. In any case, you’re a Ruby on Rails developer and you’re staring Java in the face.</p>

<h3 id="the-languages">The languages</h3>

<p>First off, Rails and Java share similar philosophies.</p>

<p>You may argue that Java is the One True Language for old-fashioned Object-Oriented Programming. The existence of strong types lead to powerful expressions around OOP concepts like inheritance, polymorphism, and the like.</p>

<p>Java and Ruby share similar philosophies - in that Everything Is An Object. In Ruby, the <code>nil</code> value is modeled as a <code>NilClass</code>. In Java, objects abound everywhere.</p>

<h3 id="the-frameworks">The frameworks</h3>

<p>I can’t speak from firsthand experience, but Java developers will tell you that developing Java apps in the early 2000s was like configuration soup. Everything was explicit and configured in XML.</p>

<p>Spring Boot arguable moves the state of the art in Java frameworks more towards’ Rails’ philosophies - that convention trumps configuration. It accomplishes this through <em>annotations</em> - more on this later.</p>

<p>Rails was precisely so groundbreaking and exciting in 2005 because it was everything Java was not - terse, expressive, and unapologetically convention-driven. Where in Java, everything was explicitly traceable through system calls, Rails used magic methods of dynamically-defined methods, monkey-patching and big ol’ global God Objects to accomplish its magic.</p>

<h3 id="liquibase-vs-active-record">Liquibase vs Active Record</h3>

<p>In Active Record, database changes are called <em>migrations</em>.</p>

<p>Migrations are only run from migration files, and may optionally be generated from the CLI.</p>

<p>In Liquibase, these are called <em>changesets</em>, and the files are called <em>changelogs</em>.</p>

<p>These migrations are either generated from the Liquibase CLI, or there is a nifty tool that reads Hibernate persistence entities and generates a “diff” against a known database, writing the migration to a file.</p>

<p>Rails checks in a <code>schema.rb</code> file, encompassing the canonical definition of the DB schema. There is no such equivalent in Liquibase (* I may be wrong).</p>

<p><strong>To be continued…</strong></p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Rails, meet Phoenix: Migrating to Phoenix with Rails session sharing]]></title>
		
		<link href="http://www.g9labs.com/2016/06/24/migrating-to-phoenix-with-rails-session-sharing/"/>
		<updated>2016-06-24T13:31:06-07:00</updated>
		<id>http://www.g9labs.com/2016/06/24/migrating-to-phoenix-with-rails-session-sharing</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>You’ve resolved to build your company’s Next Big Thing in Phoenix and Elixir. That’s great! You’re facing a problem though - all user authentication and access concerns are performed on your Rails system, and the work to reimplement this in Phoenix is significant.</p>

<p>Fortunately for you, there is a great Phoenix plug to share session data between Rails and Phoenix. If you pull this off, you’ll be able to build your new API on your Phoenix app, all while letting Rails handle user authentication and session management.</p>

<h3 id="before-we-begin">Before we begin</h3>
<p>In this scenario, you want to build out a new API in Phoenix that is consumed by your frontend single-page application, whose sessions are hosted on Rails. We’ll call the Rails app <code>rails_app</code> and your new Phoenix app <code>phoenix_app</code>.</p>

<p>Additionally, each app will use a different subdomain. The Rails app will be deployed at the <code>www.myapp.com</code> subdomain. The Phoenix app will be deployed at the <code>api.myapp.com</code> subdomain.</p>

<p>We are going to take <a href="https://github.com/cconstantin">Chris Constantin</a>’s excellent <a href="https://github.com/cconstantin/plug_rails_cookie_session_store"><code>PlugRailsCookieSessionStore</code></a> plug and integrate it into our Phoenix project. Both apps will be configured with identical cookie domains, encryption salts, signing salts, and security tokens.</p>

<p>In the examples that follow, I’ll be using the latest versions of each framework at the time of writing, Rails 4.2 and Phoenix 1.2.</p>

<h3 id="cookie-based-session-storage">Cookie-based session storage</h3>

<p>Our session data is stored on the client in a secure, encrypted, validated cookie. We won’t cover the basics of cookies here, but <a href="http://www.justinweiss.com/articles/how-rails-sessions-work/">you can read more about them here</a>.</p>

<p>Our approach will only work if your current Rails system utilizes cookie-based sessions. We will not cover the use case with a database-backed session store in SQL, Redis, or Memcache.</p>

<h3 id="step-1-configure-rails-accordingly">Step 1: Configure Rails accordingly</h3>

<h4 id="configure-the-cookie-store">Configure the cookie store</h4>

<p>Let’s set up your Rails app to use a JSON cookie storage format:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># config/initializer/session_store.rb</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Use cookie session storage in JSON format. Here, we scope the cookie to the root domain.</span>
</span><span class="line"><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">session_store</span> <span class="ss">:cookie_store</span><span class="p">,</span> <span class="ss">key</span><span class="p">:</span> <span class="s1">&#39;_rails_app_session&#39;</span><span class="p">,</span> <span class="ss">domain</span><span class="p">:</span> <span class="s2">&quot;.</span><span class="si">#{</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;DOMAIN&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line"><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">action_dispatch</span><span class="o">.</span><span class="n">cookies_serializer</span> <span class="o">=</span> <span class="ss">:json</span>
</span><span class="line">
</span><span class="line"><span class="c1"># These salts are optional, but it doesn&#39;t hurt to explicitly configure them the same between the two apps.</span>
</span><span class="line"><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">action_dispatch</span><span class="o">.</span><span class="n">encrypted_cookie_salt</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;SESSION_ENCRYPTED_COOKIE_SALT&#39;</span><span class="o">]</span>
</span><span class="line"><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">action_dispatch</span><span class="o">.</span><span class="n">encrypted_signed_cookie_salt</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;SESSION_ENCRYPTED_SIGNED_COOKIE_SALT&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>Your app may not be configured with a <code>SESSION_ENCRYPTED_COOKIE_SALT</code> and <code>SESSION_ENCRYPTED_SIGNED_COOKIE_SALT</code>. You may generate a pair with any random values.</p>

<p><a href="http://nipperlabs.com/rails-secretkeybase">Some speculate</a> that Rails does not require the two salts by default because the <code>SECRET_KEY_BASE</code> is sufficiently long enough to not require a salt. In our example, we choose to supply them anyways to be explicit.</p>

<p>Another important value to note here is that we have chosen a key for our session cookie - <code>_rails_app_session</code>. This value will be the shared cookie key for both apps.</p>

<h3 id="step-2-configure-the-plug-for-phoenix">Step 2: Configure the plug for Phoenix</h3>

<p>Turning our attention to our Phoenix app, in the <code>mix.exs</code> file, add the library dependency:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="elixir"><span class="line"><span class="c1"># mix.exs</span>
</span><span class="line"><span class="kd">defmodule</span> <span class="nc">PhoenixApp</span>
</span><span class="line">  <span class="kd">defp</span> <span class="n">deps</span> <span class="k">do</span>
</span><span class="line">    <span class="c1"># snip</span>
</span><span class="line">    <span class="p">{</span><span class="ss">:plug_rails_cookie_session_store</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.1&quot;</span><span class="p">},</span>
</span><span class="line">    <span class="c1"># snip</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then run <code>mix deps.get</code> to fetch the new library.</p>

<p>Now in your <code>web/phoenix_app/endpoint.ex</code> file, remove the configuration for the existing session store and add the configuration for the Rails session store.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="elixir"><span class="line"><span class="c1"># lib/phoenix_app/endpoint.ex</span>
</span><span class="line"><span class="kd">defmodule</span> <span class="nc">PhoenixApp.Endpoint</span> <span class="k">do</span>
</span><span class="line">  <span class="n">plug</span> <span class="nc">Plug.Session</span><span class="p">,</span>
</span><span class="line">    <span class="c1"># Remove the original cookie store that comes with Phoenix, out of the box.</span>
</span><span class="line">    <span class="c1"># store: :cookie,</span>
</span><span class="line">    <span class="c1"># key: &quot;_phoenix_app_key&quot;,</span>
</span><span class="line">    <span class="c1"># signing_salt: &quot;M8emDP0h&quot;</span>
</span><span class="line">    <span class="ss">store</span><span class="p">:</span> <span class="nc">PlugRailsCookieSessionStore</span><span class="p">,</span>
</span><span class="line">    <span class="c1"># Decide on a shared key for your cookie. Oftentimes, this should</span>
</span><span class="line">    <span class="c1"># mirror your Rails app session key</span>
</span><span class="line">    <span class="ss">key</span><span class="p">:</span> <span class="s2">&quot;_rails_app_session&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="ss">secure</span><span class="p">:</span> <span class="no">true</span><span class="p">,</span>
</span><span class="line">    <span class="ss">encrypt</span><span class="p">:</span> <span class="no">true</span><span class="p">,</span>
</span><span class="line">    <span class="c1"># Specifies the matching rules on the hostname that this cookie will be valid for</span>
</span><span class="line">    <span class="ss">domain</span><span class="p">:</span> <span class="s2">&quot;.</span><span class="si">#{</span><span class="nc">System</span><span class="p">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">&quot;DOMAIN&quot;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="ss">signing_salt</span><span class="p">:</span> <span class="nc">System</span><span class="p">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">&quot;SESSION_ENCRYPTED_SIGNED_COOKIE_SALT&quot;</span><span class="p">),</span>
</span><span class="line">    <span class="ss">encryption_salt</span><span class="p">:</span> <span class="nc">System</span><span class="p">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">&quot;SESSION_ENCRYPTED_COOKIE_SALT&quot;</span><span class="p">),</span>
</span><span class="line">    <span class="ss">key_iterations</span><span class="p">:</span> <span class="mi">1000</span><span class="p">,</span>
</span><span class="line">    <span class="ss">key_length</span><span class="p">:</span> <span class="mi">64</span><span class="p">,</span>
</span><span class="line">    <span class="ss">key_digest</span><span class="p">:</span> <span class="ss">:sha</span><span class="p">,</span>
</span><span class="line">    <span class="c1"># Specify a JSON serializer to use on the session</span>
</span><span class="line">    <span class="ss">serializer</span><span class="p">:</span> <span class="nc">Poison</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>We set a <code>DOMAIN</code> environment variable with the value<br />
<code>myapp.com</code>. The goal is for these two apps to be able to be deployed at any subdomain that ends in <code>myapp.com</code>, and still be able to share the cookie.</p>

<p>The <code>secure</code> flag configures the app to send a secure cookie, which only is served over SSL HTTPS connections. It is highly recommended for your site; if you haven’t upgraded to SSL, you should do so now!</p>

<p>Our cookies are signed such that their origins are guaranteed to have been computed from our app(s). This is done for free with Rails (and Phoenix’s) session libraries. The signature is derived from the <code>secret_key_base</code> and <code>signing_salt</code>.</p>

<p>The <code>encrypt</code> flag encrypts the contents of the cookie’s value with an encryption key derived from <code>secret_key_base</code> and <code>encryption_salt</code>. This should always be set to <code>true</code>.</p>

<p><code>key_iterations</code>, <code>key_length</code> and <code>key_digest</code> are configurations that dictate how the signing and encryption keys are derived. These are <a href="https://github.com/rails/rails/blob/4-2-stable/railties/lib/rails/application.rb">configured to match Rails’ defaults</a> (see also: <a href="https://github.com/rails/rails/blob/4-2-stable/activesupport/lib/active_support/key_generator.rb">defaults</a>). Unless your Rails app has custom configurations for these values, you should leave them be.</p>

<h3 id="step-3-configure-both-apps-to-read-from-the-new-environment-variables">Step 3: Configure both apps to read from the new environment variables</h3>

<p>Be sure your development and production versions of your app are configured with identical values for <code>DOMAIN</code>, <code>SESSION_ENCRYPTED_COOKIE_SALT</code> and <code>SESSION_ENCRYPTED_SIGNED_COOKIE_SALT</code>. You’ll want to make sure your production apps store identical key-value pairs.</p>

<h3 id="step-4-change-phoenix-controllers-to-verify-sessions-based-on-session-data">Step 4: Change Phoenix controllers to verify sessions based on session data.</h3>

<p>Now when the Phoenix app receives incoming requests, it can simply look up user session data in the session cookie to determine whether the user is logged in, and who that user is.</p>

<p>In this example, our Rails app implements user auth with Devise and Warden. We know that Warden stores the user ID and a segment of the password hash in the <code>warden.user.user.key</code> session variable.</p>

<p>Here’s what the raw session data looks like when the <code>PlugRailsCookieSessionStore</code> extracts it from the cookie:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="elixir"><span class="line"><span class="p">%{</span><span class="s2">&quot;_csrf_token&quot;</span> <span class="p">=&gt;</span> <span class="s2">&quot;ELeSt4MBUINKi0STEBpslw3UevGZuVLUx5zGVP5NlQU=&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;session_id&quot;</span> <span class="p">=&gt;</span> <span class="s2">&quot;17ec9b696fe76ba4a777d625e57f3521&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;warden.user.user.key&quot;</span> <span class="p">=&gt;</span> <span class="p">[[</span><span class="mi">2</span><span class="p">],</span> <span class="s2">&quot;$2a$10$R/3NKl9KQViQxY8eoMCIp.&quot;</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="elixir"><span class="line"><span class="kd">defmodule</span> <span class="nc">PhoenixApp.SomeApiResourceController</span> <span class="k">do</span>
</span><span class="line">  <span class="kn">use</span> <span class="nc">PhoenixApp.Web</span><span class="p">,</span> <span class="ss">:controller</span>
</span><span class="line">
</span><span class="line">  <span class="kd">def</span> <span class="n">index</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">_params</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">    <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">user_id</span><span class="p">}</span> <span class="p">=</span> <span class="n">load_user</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">conn</span>
</span><span class="line">    <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:user_id</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>
</span><span class="line">    <span class="o">|&gt;</span> <span class="n">render</span><span class="p">(</span><span class="s2">&quot;index.html&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">plug</span> <span class="ss">:verify_session</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># If we&#39;ve found a user, then allow the request to continue.</span>
</span><span class="line">  <span class="c1"># Otherwise, halt the request and return a 401</span>
</span><span class="line">  <span class="kd">defp</span> <span class="n">verify_session</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="bp">_</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">    <span class="k">case</span> <span class="n">load_user</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">      <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">user_id</span><span class="p">}</span> <span class="p">-&gt;</span> <span class="n">conn</span>
</span><span class="line">      <span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="bp">_</span><span class="p">}</span> <span class="p">-&gt;</span> <span class="n">conn</span> <span class="o">|&gt;</span> <span class="n">send_resp</span><span class="p">(</span><span class="mi">401</span><span class="p">,</span> <span class="s2">&quot;Unauthorized&quot;</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">halt</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kd">defp</span> <span class="n">load_user</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">    <span class="c1"># =&gt; The Warden user storage scheme: [user_id, password_hash_truncated]</span>
</span><span class="line">    <span class="c1"># [[1], &quot;$2a$10$vnx35UTTJQURfqbM6srv3e&quot;]</span>
</span><span class="line">    <span class="n">warden_key</span> <span class="p">=</span> <span class="n">conn</span> <span class="o">|&gt;</span> <span class="n">get_session</span><span class="p">(</span><span class="s2">&quot;warden.user.user.key&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">case</span> <span class="n">warden_key</span> <span class="k">do</span>
</span><span class="line">      <span class="p">[[</span><span class="n">user_id</span><span class="p">],</span> <span class="bp">_</span><span class="p">]</span> <span class="p">-&gt;</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">user_id</span><span class="p">}</span>
</span><span class="line">      <span class="bp">_</span> <span class="p">-&gt;</span> <span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="ss">:not_found</span><span class="p">}</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>A very naive plug implementation simply renders a 401 if the session key is not found in the session, otherwise it allows the request through.</p>

<h3 id="step-5-move-session-concerns-into-its-own-module">Step 5: Move session concerns into its own module</h3>

<p>Let’s move session concerns around session parsing out of the controller into its own <code>Session</code> module. Additionally, we include two helpers, <code>current_user/1</code> and <code>logged_in?/1</code>.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="elixir"><span class="line"><span class="c1"># web/models/session.ex</span>
</span><span class="line"><span class="kd">defmodule</span> <span class="nc">PhoenixApp.Session</span> <span class="k">do</span>
</span><span class="line">  <span class="kn">use</span> <span class="nc">PhoenixApp.Web</span><span class="p">,</span> <span class="ss">:controller</span>
</span><span class="line">  <span class="kd">def</span> <span class="n">current_user</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">    <span class="c1"># Our app&#39;s concept of a User is merely whatever is stored in the</span>
</span><span class="line">    <span class="c1"># Session key. In the future, we could then use this as the delegation</span>
</span><span class="line">    <span class="c1"># point to fetch more details about the user from a backend store.</span>
</span><span class="line">    <span class="k">case</span> <span class="n">load_user</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">      <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">user_id</span><span class="p">}</span> <span class="p">-&gt;</span> <span class="n">user_id</span>
</span><span class="line">      <span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="ss">:not_found</span><span class="p">}</span> <span class="p">-&gt;</span> <span class="no">nil</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kd">def</span> <span class="n">logged_in?</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">    <span class="o">!!</span><span class="n">current_user</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kd">def</span> <span class="n">load_user</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">    <span class="c1"># =&gt; The Warden user storage scheme: [user_id, password_hash_truncated]</span>
</span><span class="line">    <span class="c1"># [[1], &quot;$2a$10$vnx35UTTJQURfqbM6srv3e&quot;]</span>
</span><span class="line">    <span class="n">warden_key</span> <span class="p">=</span> <span class="n">conn</span> <span class="o">|&gt;</span> <span class="n">get_session</span><span class="p">(</span><span class="s2">&quot;warden.user.user.key&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">case</span> <span class="n">warden_key</span> <span class="k">do</span>
</span><span class="line">      <span class="p">[[</span><span class="n">user_id</span><span class="p">],</span> <span class="bp">_</span><span class="p">]</span> <span class="p">-&gt;</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">user_id</span><span class="p">}</span>
</span><span class="line">      <span class="bp">_</span> <span class="p">-&gt;</span> <span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="ss">:not_found</span><span class="p">}</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>This leaves the controller looking skinnier, implementing only the Plug. Extracted methods are delegated to the new <code>Session</code> module.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="elixir"><span class="line"><span class="kd">defmodule</span> <span class="nc">PhoenixApp.SomeApiResourceController</span> <span class="k">do</span>
</span><span class="line">  <span class="kn">use</span> <span class="nc">PhoenixApp.Web</span><span class="p">,</span> <span class="ss">:controller</span>
</span><span class="line">  <span class="kn">alias</span> <span class="nc">PhoenixApp.Session</span>
</span><span class="line">
</span><span class="line">  <span class="kd">def</span> <span class="n">index</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">_params</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">    <span class="nc">IO</span><span class="p">.</span><span class="n">inspect</span> <span class="n">conn</span><span class="p">.</span><span class="n">private</span><span class="p">.</span><span class="n">plug_session</span>
</span><span class="line">    <span class="n">user_id</span> <span class="p">=</span> <span class="nc">Session</span><span class="p">.</span><span class="n">current_user</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">conn</span>
</span><span class="line">    <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:user_id</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>
</span><span class="line">    <span class="o">|&gt;</span> <span class="n">render</span><span class="p">(</span><span class="s2">&quot;index.html&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">plug</span> <span class="ss">:verify_session</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># Future refinements could extract this into its own Plug file.</span>
</span><span class="line">  <span class="kd">defp</span> <span class="n">verify_session</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="bp">_</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">    <span class="k">case</span> <span class="nc">Session</span><span class="p">.</span><span class="n">logged_in?</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">      <span class="no">false</span> <span class="p">-&gt;</span> <span class="n">conn</span> <span class="o">|&gt;</span> <span class="n">send_resp</span><span class="p">(</span><span class="mi">401</span><span class="p">,</span> <span class="s2">&quot;Unauthorized&quot;</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">halt</span>
</span><span class="line">      <span class="bp">_</span> <span class="p">-&gt;</span> <span class="n">conn</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Finally, we implement some nice helpers for your APIs:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="elixir"><span class="line"><span class="c1"># web/web.ex</span>
</span><span class="line">
</span><span class="line"><span class="kd">def</span> <span class="n">view</span> <span class="k">do</span>
</span><span class="line">  <span class="k">quote</span> <span class="k">do</span>
</span><span class="line">    <span class="c1"># snip</span>
</span><span class="line">    <span class="kn">import</span> <span class="nc">PhoenixApp.Session</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>This gives you the ability to call <code>logged_in?(@conn)</code> and <code>current_user(@conn)</code> from within your views, should you desire to.</p>

<h3 id="step-6-fetching-additional-information-from-the-backend">Step 6: Fetching additional information from the backend</h3>

<p>Let’s enhance our <code>Session</code> module with the capability to fetch additional information from another resource.</p>

<p>In this case, we’ll model a call an external User API to fetch extended data about the User, potentially with some sensitive information (that’s why we didn’t want to serialize it into the session).</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="elixir"><span class="line"><span class="c1"># web/models/user.ex</span>
</span><span class="line"><span class="kd">defmodule</span> <span class="nc">PhoenixApp.User</span> <span class="k">do</span>
</span><span class="line">  <span class="c1"># Gets some user identity information like email, avatar image.</span>
</span><span class="line">  <span class="c1"># For this example, we&#39;ll use a random user generator.</span>
</span><span class="line">  <span class="c1">#</span>
</span><span class="line">  <span class="c1"># This example hits an API, but this could just as easily be something that hits</span>
</span><span class="line">  <span class="c1"># the database, or Redis, or some cache.</span>
</span><span class="line">  <span class="kd">def</span> <span class="n">fetch</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">    <span class="p">%{</span> <span class="ss">body</span><span class="p">:</span> <span class="n">body</span> <span class="p">}</span> <span class="p">=</span> <span class="nc">HTTPotion</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;https://randomuser.me/api?seed=</span><span class="si">#{</span><span class="n">user_id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="p">[</span><span class="n">result</span> <span class="p">|</span> <span class="bp">_</span> <span class="p">]</span> <span class="p">=</span> <span class="n">body</span> <span class="o">|&gt;</span> <span class="nc">Poison</span><span class="p">.</span><span class="n">decode!</span> <span class="o">|&gt;</span> <span class="nc">Map</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;results&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">result</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now our <code>Session</code> can be extended to return the proper <code>User</code>, which may provide more utility to us as we implement our Phoenix feature.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="elixir"><span class="line"><span class="kd">defmodule</span> <span class="nc">PhoenixApp.Session</span> <span class="k">do</span>
</span><span class="line">  <span class="kn">use</span> <span class="nc">PhoenixApp.Web</span><span class="p">,</span> <span class="ss">:controller</span>
</span><span class="line">  <span class="kn">alias</span> <span class="nc">PhoenixApp.User</span>
</span><span class="line">
</span><span class="line">  <span class="kd">def</span> <span class="n">current_user</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">    <span class="k">case</span> <span class="n">load_user</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">      <span class="c1"># Changed current_user/1 to now return a User or a nil.</span>
</span><span class="line">      <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">user_id</span><span class="p">}</span> <span class="p">-&gt;</span> <span class="n">user_id</span> <span class="o">|&gt;</span> <span class="nc">User</span><span class="p">.</span><span class="n">fetch</span>
</span><span class="line">      <span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="ss">:not_found</span><span class="p">}</span> <span class="p">-&gt;</span> <span class="no">nil</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># snip</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<h4 id="heres-the-two-apps-in-action">Here’s the two apps in action:</h4>

<p><img src="http://i.imgur.com/Vu72x7C.gif" alt="Flipping between the two apps, logged in and out." /></p>

<h3 id="heroku-deployment-gotchas">Heroku deployment gotchas</h3>

<p>If you are deploying this to Heroku with the popular <a href="git@github.com:HashNuke/heroku-buildpack-elixir.git">Heroku Elixir buildpack</a>, please be aware that adding or changing environment variables that are required at build time require that the new environment variables outlined here are added to your <code>elixir_buildpack.config</code> file in your repository.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="elixir"><span class="line"><span class="c1"># elixir_buildpack.config</span>
</span><span class="line"><span class="n">config_vars_to_export</span><span class="p">=(</span><span class="nc">SECRET_KEY_BASE</span> <span class="nc">SESSION_ENCRYPTED_COOKIE_SALT</span> <span class="nc">SESSION_ENCRYPTED_SIGNED_COOKIE_SALT</span> <span class="nc">DOMAIN</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="caveats-and-considerations">Caveats and considerations</h3>

<h4 id="csrf-incompatibilites">CSRF incompatibilites</h4>

<p>At the time of this writing, Phoenix and Rails overwrite each others’ session CSRF tokens with incompatible token schemes. This means that you are not able to make remote POST or PUT requests across the apps with CSRF protection turned on. Our current approach will work best with a read-only API, at the moment.</p>

<h4 id="be-judicious-about-what-you-store-in-a-cookie">Be judicious about what you store in a cookie</h4>

<p>Cookies themselves have their own strengths and drawbacks. We should note that you should be judicious about the amount of <a href="http://guides.rubyonrails.org/security.html#replay-attacks-for-cookiestore-sessions">data you store in a session</a> (hint: only the bare minimum, and nothing sensitive).</p>

<p>The OWASP guidelines also provide some <a href="https://www.owasp.org/index.php/Session_Management_Cheat_Sheet">general security practices around cookie session storage</a>.</p>

<h4 id="moving-beyond-session-sharing">Moving beyond session sharing</h4>

<p>Even though this scheme may work in the short run, coupling our apps at this level in the long run will result in headaches as the apps are coupled to intricate session implementation details. If, in the long run, you wanted to continue scaling out your Phoenix app ecosystem, you may want to look into the following authentication patterns, both of which move your system toward a microservices architecture.</p>

<p>1) Develop an <a href="http://microservices.io/patterns/apigateway.html">API gateway</a> whose purpose is to be the browser’s buffer to your internal service architecture. This one gateway is responsible for identity access and control, decrypting session data and proxying requests to an umbrella of internal services (which may be Rails or Phoenix). Internal services may receive user identities in unencrypted form.</p>

<p>2) Consider implementing a <a href="https://jwt.io/">JWT token implementation</a> across your apps, in which <a href="https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/">all session and authorization claims are stored in the token itself, and encrypted in the client and server.</a>. This scheme may still rely on cookies (you may store the token in a cookie, or pass it around in an HTTP header). The benefits of this scheme is the ability for your app(s) to manage identity and authentication claims on their own without having to verify against a third party. Drawbacks of this scheme are <a href="http://blog.prevoty.com/does-jwt-put-your-web-app-at-risk">the difficulty around revoking or expiring sessions</a>.</p>

<p>Each of these approaches is not without overhead and complexity; be sure to do your homework before your proceed.</p>

<h3 id="conclusion">Conclusion</h3>

<p>That’s it! I hope I’ve illustrated a quick and easy way to get a working Phoenix app sharing sessions with Rails app(s), should you decide to prototype one in your existing system. I’ve also pushed up a <a href="https://github.com/andrewhao/sample-rails-phoenix-shared-sessions/">sample app if you want to cross-reference the code</a>. Good luck!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Evented Rails: Decoupling domains in Rails with Wisper pub/sub events]]></title>
		
		<link href="http://www.g9labs.com/2016/06/23/rails-pub-slash-sub-with-wisper-and-sidekiq/"/>
		<updated>2016-06-23T11:44:00-07:00</updated>
		<id>http://www.g9labs.com/2016/06/23/rails-pub-slash-sub-with-wisper-and-sidekiq</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>One common pattern in Domain-Driven Design is the use of publish/subscribe messaging to communicate between domains. When <a href="http://martinfowler.com/eaaDev/DomainEvent.html">Domain Events</a> are created from within a domain, other domains are able to subscribe to these events and take action within their own domains, respectively.</p>

<p>This is not a common pattern in Rails, particularly because of Ruby’s lack of language support for functional programming paradigms that exist in other languages. However, with a nifty framework and the help of Sidekiq, we can get just a little bit closer.</p>

<h3 id="what-is-a-domain-event">What is a Domain Event?</h3>

<p>A domain event is a recorded property in the system that tracks an action that the system performs, and the factors/properties that lead to its creation.</p>

<p>In the following examples, we are going to use the <a href="https://github.com/krisleech/wisper">Wisper</a> gem to implement domain events in our sample <a href="http://github.com/andrewhao/delorean">Delorean</a> app.</p>

<p>Imagine that we are writing an endpoint that our users will hit, indicating that they want to hail a time-traveling cab. Now the logic to hail a cab is rather complicated and lives in an entirely different area of the codebase, perhaps even in another application. How should we call the other code and ensure that our code is cleanly decoupled?</p>

<p>With our Domain-Driven powers, we’ve been smart enough to segregate our code into different subdomains and bounded contexts, denoted by these two Ruby modules <code>Ridesharing</code> and <code>DriverRouting</code>.</p>

<h2 id="example-1-in-process-pub-sub-event-modeling-with-a-service-object">Example 1: In-process pub-sub event modeling, with a service object.</h2>

<p>A simple way to use Wisper is to use it to implement your service objects with Wisper, calling the service from the controller.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Ridesharing</span>
</span><span class="line">  <span class="k">class</span> <span class="nc">RidesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">post</span>
</span><span class="line">      <span class="c1"># Hail a time-traveling Delorean:</span>
</span><span class="line">      <span class="n">command</span> <span class="o">=</span> <span class="no">HailDelorean</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">      <span class="n">command</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s1">&#39;hailed&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">driver</span><span class="o">|</span>
</span><span class="line">        <span class="n">render</span> <span class="ss">text</span><span class="p">:</span> <span class="s2">&quot;Hailed you a cab: </span><span class="si">#{</span><span class="n">driver</span><span class="si">}</span><span class="s2"> is arriving!&quot;</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">      <span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s1">&#39;could_not_hail&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">render</span> <span class="ss">text</span><span class="p">:</span> <span class="s2">&quot;Sorry, no dice.&quot;</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">      <span class="n">command</span><span class="o">.</span><span class="n">hail!</span><span class="p">(</span><span class="n">current_user</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Note that the <code>HailDelorean</code> class has powers of event subscriptions now. Our calling code does not have to concern itself with the implementation details of the <code>HailDelorean</code> service - it merely needs to register handlers for the two possible outcomes, <code>hailed</code> and <code>could_not_hail</code>. Here’s how the service class is implemented:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Ridesharing</span>
</span><span class="line">  <span class="k">class</span> <span class="nc">HailDelorean</span>
</span><span class="line">    <span class="kp">include</span> <span class="no">Wisper</span><span class="o">::</span><span class="no">Publisher</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">hail!</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class="line">      <span class="c1"># broadcast() is a Wisper method to fire an event</span>
</span><span class="line">      <span class="n">driver</span> <span class="o">=</span> <span class="n">find_driver</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class="line">      <span class="k">if</span> <span class="n">driver</span>
</span><span class="line">        <span class="n">broadcast</span><span class="p">(</span><span class="s1">&#39;hailed&#39;</span><span class="p">,</span> <span class="n">driver</span><span class="p">)</span>
</span><span class="line">      <span class="k">else</span>
</span><span class="line">        <span class="n">broadcast</span><span class="p">(</span><span class="s1">&#39;could_not_hail&#39;</span><span class="p">)</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">find_driver</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class="line">      <span class="c1"># Here lies slow, complex domain logic</span>
</span><span class="line">      <span class="no">DriverRouting</span><span class="o">::</span><span class="no">FindDriver</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="handling-side-effects-in-subscriber-classes">Handling side effects in subscriber classes</h3>

<p>Other side-effects can subscribe to the <code>HailDelorean</code> events. Let’s say we want to fire an event to Segment analytics tracking. I can create a plain Ruby object that simply needs to implement a method with the same name as the event.</p>

<p>Let’s implement <code>hailed</code> and <code>could_not_hail</code> methods on this subscriber class:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">TrackSegmentAnalytics</span>
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">hailed</span><span class="p">(</span><span class="n">driver</span><span class="p">)</span>
</span><span class="line">    <span class="c1"># fire analytics event to Segment</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">could_not_hail</span>
</span><span class="line">    <span class="c1"># fire analytics event to Segment</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>And we hook it up by subscribing it to the command handler:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Ridesharing</span>
</span><span class="line">  <span class="k">class</span> <span class="nc">RidesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">post</span>
</span><span class="line">      <span class="c1"># snip</span>
</span><span class="line">      <span class="n">command</span> <span class="o">=</span> <span class="no">HailDelorean</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">current_user</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">      <span class="c1"># register the subscriber to the triggering action</span>
</span><span class="line">      <span class="n">command</span><span class="o">.</span><span class="n">subscribe</span><span class="p">(</span><span class="no">TrackSegmentAnalytics</span><span class="p">)</span>
</span><span class="line">      <span class="c1"># snip</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>OK, that was a little awkward, doing all that wiring up in the controller. What if we did the wiring globally, within an app initializer?</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># config/initializers/domain_event_subscriptions.rb</span>
</span><span class="line"><span class="no">Wisper</span><span class="o">.</span><span class="n">subscribe</span><span class="p">(</span><span class="no">TrackSegmentAnalytics</span><span class="p">,</span> <span class="ss">scope</span><span class="p">:</span> <span class="s2">&quot;HailDelorean&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1"># alternate form:</span>
</span><span class="line"><span class="no">HailDelorean</span><span class="o">.</span><span class="n">subscribe</span><span class="p">(</span><span class="no">TrackSegmentAnalytics</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>This registers a global subscriber for all future instances of <code>HailDelorean</code>.</p>

<h2 id="example-2-asynchronous-events-with-subscription-handlers-and-sidekiq">Example 2: Asynchronous events with subscription handlers and Sidekiq</h2>

<p>Here’s the real power of Wisper - we can decouple our application domain responsibilities by modeling effects as subscription objects and do them out-of-band of the primary web request thread.</p>

<p>Note that with the <a href="https://github.com/krisleech/wisper-sidekiq"><code>wisper-sidekiq</code></a> gem, all subscriptions given with an <code>async: true</code> option flag will automatically execute in an external thread as a Sidekiq job. Let’s take advantage of that now.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Ridesharing</span>
</span><span class="line">  <span class="k">class</span> <span class="nc">RidesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">post</span>
</span><span class="line">      <span class="c1"># Hail a time-traveling Delorean:</span>
</span><span class="line">      <span class="no">HailDelorean</span><span class="o">.</span><span class="n">hail</span><span class="p">(</span><span class="n">current_user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class="line">      <span class="n">render</span> <span class="ss">text</span><span class="p">:</span> <span class="s1">&#39;Hailing a cab, please wait for a response...&#39;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">class</span> <span class="nc">HailDelorean</span>
</span><span class="line">    <span class="kp">include</span> <span class="no">Wisper</span><span class="o">::</span><span class="no">Broadcaster</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">hail</span><span class="p">(</span><span class="n">passenger_id</span><span class="p">)</span>
</span><span class="line">      <span class="n">broadcast</span><span class="p">(</span><span class="ss">:hail</span><span class="p">,</span> <span class="n">passenger_id</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">module</span> <span class="nn">DriverRouting</span>
</span><span class="line">  <span class="c1"># Note that this class is both a subscriber and a publisher</span>
</span><span class="line">  <span class="k">class</span> <span class="nc">FindDriver</span>
</span><span class="line">    <span class="kp">include</span> <span class="no">Wisper</span><span class="o">::</span><span class="no">Publisher</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">hail</span><span class="p">(</span><span class="n">passenger_id</span><span class="p">)</span>
</span><span class="line">      <span class="c1"># Do slow, complex hairy routefinding/optimization/messaging behind the scenes:</span>
</span><span class="line">      <span class="n">driver</span> <span class="o">=</span> <span class="n">find_driver_for</span><span class="p">(</span><span class="n">passenger_id</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">      <span class="k">if</span> <span class="n">driver</span>
</span><span class="line">        <span class="n">broadcast</span><span class="p">(</span><span class="s1">&#39;driver_found&#39;</span><span class="p">,</span> <span class="n">passenger_id</span><span class="p">,</span> <span class="n">driver</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class="line">      <span class="k">else</span>
</span><span class="line">        <span class="n">broadcast</span><span class="p">(</span><span class="s1">&#39;driver_not_found&#39;</span><span class="p">,</span> <span class="n">passenger_id</span><span class="p">)</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Finally, we add handlers (subscribers) to these domain objects:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Ridesharing</span>
</span><span class="line">  <span class="k">class</span> <span class="nc">NotifyPassengerWithDriverStatus</span>
</span><span class="line">    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">driver_found</span>
</span><span class="line">      <span class="c1"># send them a text message :)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">driver_not_found</span>
</span><span class="line">      <span class="c1"># send them a text message :(</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now let’s link it together with subscriptions:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># config/initializers/domain_event_subscriptions.rb</span>
</span><span class="line"><span class="no">Ridesharing</span><span class="o">::</span><span class="no">HailDelorean</span><span class="o">.</span><span class="n">subscribe</span><span class="p">(</span><span class="no">DriverRouting</span><span class="o">::</span><span class="no">FindDriver</span><span class="p">,</span> <span class="ss">async</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class="line"><span class="no">DriverRouting</span><span class="o">::</span><span class="no">FindDriver</span><span class="o">.</span><span class="n">subscribe</span><span class="p">(</span><span class="no">Ridesharing</span><span class="o">::</span><span class="no">NotifyPassengerWithDriverStatus</span><span class="p">,</span> <span class="ss">async</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class="line"><span class="no">Wisper</span><span class="o">.</span><span class="n">subscribe</span><span class="p">(</span><span class="no">AnalyticsListener</span><span class="p">,</span> <span class="ss">scope</span><span class="p">:</span> <span class="s2">&quot;Ridesharing::NotifyPassengerWithDriverStatus&quot;</span><span class="p">,</span> <span class="s2">&quot;DriverRouting::FindDriver&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">async</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now our messages between our domains are pulled out of the main request thread, and operate in an asynchronous fashion with Sidekiq as the runner.</p>

<p>Code in our domains are kept clean - note that there are no direct references to the other subdomains within each subdomain. Our app more cleanly segregates the responsibilities between each app, heavy workloads are naturally balanced as they move to worker threads.</p>

<h2 id="caveats-beware-of-overbuilding">Caveats: Beware of overbuilding</h2>

<p>If you are on a small app, you probably should go with approach #1. The weight of indirection can be a cognitive load on development, unless you truly need to build async code in #2. The overhead and conceptual complexities of the approach can only be justified with large codebases, or in apps where a domain-centric view (and segregation) of code is present.</p>

<h2 id="caveats-event-subscriptions-can-be-a-tangled-mess">Caveats: Event subscriptions can be a tangled mess</h2>

<p>Note that the act of wiring can quickly fan out into a spidery mess of handlers - you could even further decouple your handlers by modeling a global event bus as a publisher, and having each domain tap into the bus’ events and figure out how to handle each event on its own.</p>

<h2 id="caveats-transactional-consistency">Caveats: transactional consistency!</h2>

<p>If you implement this asynchronously, you’ll have to think about how to deal with transactional consistency. Can you design your data models (and database schema) to support independent updates without any dependencies? How will you handle the case when one domain action fails and the other completes?</p>

<p>You may have to roll your own two-phase commit here, the specifics of which I won’t delve into. However, for most of our applications, we may want to skip the asynchronous and keep our events synchronous.</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Domain-Driven Design & The Joy of Naming]]></title>
		
		<link href="http://www.g9labs.com/2016/04/18/the-joy-of-naming-with-the-powers-of-domain-driven-design/"/>
		<updated>2016-04-18T17:14:00-07:00</updated>
		<id>http://www.g9labs.com/2016/04/18/the-joy-of-naming-with-the-powers-of-domain-driven-design</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>I want to discuss a topic near and dear to my heart, and what I believe is at the crux of effective software design. It’s not a new functional language, it’s not a fancy new framework, a how-to guide to do microservices, nor a quantum leap in the field of machine learning.</p>

<p>It’s much simpler.</p>

<p>It’s about names.</p>

<p><img src="http://3.bp.blogspot.com/_rL73HKlqbH0/TKhVHMbs2oI/AAAAAAAABEc/DiPbblM0R44/s1600/sistine-chapel-michelangelo-paintings-6.jpg" alt="In the beginning..." /></p>

<p><em>Names define us</em>. They define concepts. They imbue a concept with shared understanding. They’re language concepts, but more than that, they’re units of meaning.</p>

<p>Software development is a fundamentally human endeavour. No amount of technical computing breakthroughs will change the fact that software development is still the arduous task of getting a team together full of humans from a kaleidescope of different cultural, linguistic backgrounds - then throwing them together to build an arbitrarily complex product in a rapidly-shifting competitive landscape.</p>

<p>Not only that, the thing to build is chock-full of systems that interact with other systems of unbounded complexity. Additionally, once your software system is out in the wild, you need to make sure that it was the right thing to build. Is the product you built correctly tuned to your market? Is it generating sufficient revenue?</p>

<p>The landscape is littered with software projects that began ambitiously, but got lost in a towering mess of fragile code. It’s no wonder that developing reliable, successful software is more art than science.</p>

<h3 id="crossing-our-linguistic-wires">Crossing our linguistic wires</h3>

<p>Let’s rewind back to a scene from a typical day in the life of your software development team. Think back to the last time you discussed a story with your product owner, how did it unfold?</p>

<p>Let’s imagine a scene at Delorean, the Uber for time travel, where you work. Your team is responsible for writing software systems that calculate the payment processing for your users who are hailing rides from your company’s time-traveling ridesharing service.</p>

<blockquote>
  <p>PO: Our next big project is to update our driver app to show rider locations on the timeline map.</p>
</blockquote>

<blockquote>
  <p>You: And when do these riders show up on the timeline map?</p>
</blockquote>

<blockquote>
  <p>PO: When the driver turns on the app and signals that she’s driving.</p>
</blockquote>

<blockquote>
  <p>You: OK, so that means when the app boots up and the DriverStatus service receives a POST we’ll need to simultaneously fetch references from the HailingUser service based on time locality.</p>
</blockquote>

<blockquote>
  <p>PO: Um… I guess so?</p>
</blockquote>

<p>Or how about your last iteration planning meeting, where you discussed the intricacies of a specific story?</p>

<blockquote>
  <p>PO: In this story, we’re going to add a coupon box to the checkout flow.</p>
</blockquote>

<blockquote>
  <p>You: [Thinking out loud] Hm… would that mean we add a <code>/coupon</code> route to the checkout API?</p>
</blockquote>

<blockquote>
  <p>Teammate: Wait - I think we call them <code>Discounts</code> in the backend. And the checkout flow is technically part of the <code>RideCommerce</code> service.</p>
</blockquote>

<blockquote>
  <p>You: Right - I mean let’s call the route <code>/coupon</code> but it’ll create a <code>Discount</code> object. And in this story,    let’s just remember that the checkout API really refers to the <code>RideCommerce</code> service.</p>
</blockquote>

<blockquote>
  <p>PO: I’ll add a note to the story.</p>
</blockquote>

<p>The implementing engineer, of course, doesn’t read the note in the story (who has time to, anyways?). In the course of implementation, he gets tripped up in semantics and spends the better part of a half day re-implementing the <code>Checkout</code> flow as an entirely new service, before realizing his mistake in code review and backing out his changes.</p>

<p>Months later, a new colleague is tasked to fix the link in the checkout flow, but files an incomplete fix because she was not aware of the fact that <code>Coupons</code> actually had mappings back to <code>Discounts</code>. The bug makes its way to production, where it subtly lies dormant until a most inopportune time…</p>

<h3 id="a-better-domain-driven-way">A better, Domain-Driven way</h3>

<p>In Eric Evans’ book <a href="http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215"><strong>Domain-Driven Design</strong></a>, he describes the concept of a <a href="http://martinfowler.com/bliki/UbiquitousLanguage.html">Ubiquitous Language</a> - a shared, common vocabulary that the entire team shares when discussing software.</p>

<p>When we say the “entire team”, we mean the combined team of designers, developers, the product owner and any other domain experts that might be at hand.</p>

<p>Your product owner may be your domain expert (and typically is). However, you may have other domain experts such as:</p>

<ul>
  <li>Any team that builds reporting or analytics off of your software.</li>
  <li>Upstream data providers</li>
  <li>Anybody further up the reporting chain whose purview includes the software you’re building, or its effects. Think: the Director of Finance, the COO, the head of Customer Support.</li>
  <li>The users of your software</li>
</ul>

<p>Side note: in XP, each team has an “onsite customer” - this is your domain expert!</p>

<h4 id="developing-a-ubiquitous-language-with-a-glossary">Developing a Ubiquitous Language with a Glossary</h4>

<p>Try this: keep a living document of all the terminology your team uses - along with all its definitions. This <strong>Glossary</strong> is exactly what it sounds - a list of terms and their definitions.</p>

<blockquote>
  <h2 id="delorean-team-glossary">Delorean Team Glossary</h2>

  <ul>
    <li><strong>Coupon</strong>: an applied discount to a BookingAmount. A coupon may take the form of a Fixed or a Percentage amount.
      <ul>
        <li><strong>Fixed-type</strong>: A coupon that applies a fixed amount of money - e.g. a $30 USD discount.</li>
        <li><strong>Percentage-type</strong>: A coupon that applies a percentage savings off the total BookingAmount.</li>
      </ul>
    </li>
    <li><strong>Driver</strong>: An employed driver who drives within the system, picking up passengers and driving Trips for payment.</li>
    <li><strong>Trip</strong>: An itinerary of passenger pick-up and drop-off location and times.</li>
    <li><strong>Rider</strong>: The passenger that books the trip and is transported by the <em>Driver</em>.</li>
    <li><strong>Booking</strong>: A reservation for a Trip, as booked by the <em>Rider</em>.</li>
    <li><strong>BookingAmount</strong>: The monetary amount of the Trip, accounting for the trip cost, surge pricing, coupons and taxes.</li>
    <li><strong>Routing Engine:</strong> The software system that maps out the driving directions for a driver.</li>
    <li><strong>Payment</strong>: A record of how a user paid.</li>
    <li><strong>Charge</strong>: A financial transaction for a specific dollar amount, for a specific charge method to an institution.</li>
    <li><strong>Checkout</strong>: A workflow in which a <em>Payment</em> is made for a <em>Booking</em>.</li>
  </ul>
</blockquote>

<p>From now on, use only the term definitions listed here in your stories. Be explicit about how you use your language!</p>

<p>I’ve been on many projects where the sloppy usage of a term from project inception led to the usage of that term in the code - codifying that messy, slippery term throughout the life of the project.</p>

<p>Which leads us to our next point:</p>

<h4 id="refactoring-your-team-to-use-the-right-terms">Refactoring your team to use the right terms</h4>

<p>Your <strong>Glossary</strong> is a living document. It is meant to be living - either on a continually-updated Google Doc or a wiki page. It should be visible for all to see - you should print it out and post it on the walls!</p>

<p>Meanwhile, in a planning meeting:</p>

<blockquote>
  <p>You: So when a user logs into the app and broadcasts that they’re ready to drive…</p>
</blockquote>

<blockquote>
  <p>PO: You mean <em>Driver</em>. When a <em>Driver</em> logs in.</p>
</blockquote>

<blockquote>
  <p>You: Right. Good catch.</p>
</blockquote>

<p>It seems a little silly (after all, you both know only Drivers use the broadcast feature of the app), but the laser focus on using the right words means that your team is always on the same page when talking about things.</p>

<p>Later that afternoon, your teammate taps you on the shoulder:</p>

<blockquote>
  <p>Teammate: I’m about to implement the Coupon story. I suggest we rename the <code>Discount</code> class to <code>Coupon</code>.</p>
</blockquote>

<blockquote>
  <p>You: Great idea. That way, we aren’t tripped up by the naming mismatches in the future.</p>
</blockquote>

<blockquote>
  <p>Teammate: I do have a question about the coupon, though. Do you think it’s <em>applied</em> to the <strong>BookingAmount</strong>, or is it <em>added</em>?</p>
</blockquote>

<blockquote>
  <p>PO: [Overhearing conversation] You had it right. It’s <em>applied</em>.</p>
</blockquote>

<p>You and your teammate then go and update the glossary, scribbling an addendum on the wall (or updating your wiki):</p>

<blockquote>
  <h2 id="delorean-team-glossary-1">Delorean Team Glossary</h2>
  <ul>
    <li><strong>Coupon</strong>: … Coupons may be <em>applied</em> to BookingAmounts to discount the total cost of the booking.</li>
  </ul>
</blockquote>

<h4 id="refactoring-your-code-to-use-the-right-terms">Refactoring your code to use the right terms</h4>

<p>Your teammate and you then walk over to her desk; as a pair you proceed to refactor the existing account code. We’ll use Ruby for the sake of this example.</p>

<p>In the beginning, the code looks like this:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Checkout</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">booking_amount</span><span class="p">,</span> <span class="n">discount</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@booking_amount</span> <span class="o">=</span> <span class="n">booking_amount</span>
</span><span class="line">    <span class="vi">@discount</span> <span class="o">=</span> <span class="n">discount</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">total</span>
</span><span class="line">    <span class="vi">@booking_amount</span><span class="o">.</span><span class="n">total</span> <span class="o">-</span> <span class="vi">@discount</span><span class="o">.</span><span class="n">calculate_amount_for</span><span class="p">(</span><span class="ss">booking_amount</span><span class="p">:</span> <span class="n">booking_amount</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Discount</span>
</span><span class="line">  <span class="no">STRATEGY_FIXED</span> <span class="o">=</span> <span class="s1">&#39;STRATEGY_FIXED&#39;</span>
</span><span class="line">  <span class="no">STRATEGY_PERCENTAGE</span> <span class="o">=</span> <span class="s1">&#39;STRATEGY_PERCENTAGE&#39;</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">amount</span><span class="p">,</span> <span class="n">strategy</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@amount</span> <span class="o">=</span> <span class="n">amount</span>
</span><span class="line">    <span class="vi">@strategy</span> <span class="o">=</span> <span class="n">strategy</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">calculate_amount_for</span><span class="p">(</span><span class="ss">booking_amount</span><span class="p">:)</span>
</span><span class="line">    <span class="c1"># Implementation...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>You take a first pass and rename the <code>Discount</code> class to <code>Coupon</code>.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Coupon</span>
</span><span class="line">  <span class="no">STRATEGY_FIXED</span> <span class="o">=</span> <span class="s1">&#39;STRATEGY_FIXED&#39;</span>
</span><span class="line">  <span class="no">STRATEGY_PERCENTAGE</span> <span class="o">=</span> <span class="s1">&#39;STRATEGY_PERCENTAGE&#39;</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">amount</span><span class="p">,</span> <span class="n">strategy</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@amount</span> <span class="o">=</span> <span class="n">amount</span>
</span><span class="line">    <span class="vi">@strategy</span> <span class="o">=</span> <span class="n">strategy</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">calculate_amount_for</span><span class="p">(</span><span class="ss">booking_amount</span><span class="p">:)</span>
</span><span class="line">    <span class="c1"># Implementation...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now there’s something funny here - your domain language suggests that a <strong>Coupon</strong> is <em>applied to</em> a <strong>BookingAmount</strong>. You pause, because the code reads the opposite - “A Coupon calculates its amount for a BookingAmount”.</p>

<blockquote>
  <p>You: How about we also refactor the <code>calculate_amount_for</code> method to reflect the language a little better?</p>
</blockquote>

<blockquote>
  <p>Teammate: Yeah. It sounds like the action occurs the other way - the BookingAmount is responsible for applying a Coupon to itself.</p>
</blockquote>

<p>In your next refactoring pass, you move the <code>calculate_amount_for</code> method into the <code>BookingAmount</code>, calling it <code>applied_discount_total</code>:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">BookingAmount</span>
</span><span class="line">  <span class="c1"># implementation details...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">applied_coupon_amount</span><span class="p">(</span><span class="ss">coupon</span><span class="p">:)</span>
</span><span class="line">    <span class="c1"># Implementation...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Finally, you change your <code>Checkout</code> implementation to match:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Checkout</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">booking_amount</span><span class="p">,</span> <span class="n">coupon</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@booking_amount</span> <span class="o">=</span> <span class="n">booking_amount</span>
</span><span class="line">    <span class="vi">@coupon</span> <span class="o">=</span> <span class="n">coupon</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">total_amount</span>
</span><span class="line">    <span class="vi">@booking_amount</span><span class="o">.</span><span class="n">price</span> <span class="o">-</span> <span class="vi">@booking_amount</span><span class="o">.</span><span class="n">applied_coupon_amount</span><span class="p">(</span><span class="ss">coupon</span><span class="p">:</span> <span class="vi">@coupon</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>When you read the implementation in plain English, it reads:</p>

<blockquote>
  <p>The checkout’s total amount is calculated by subtracting the booking amount’s applied coupon amount from the booking amount price.</p>
</blockquote>

<p>Phew! Designing a strong <strong>Ubiquitous Language</strong> was hard work! In fact, you had spent a goodly amount of time debating and clarifying with your domain experts:</p>

<ul>
  <li>Is a Coupon <em>applied</em> to a BookingAmount, or is it <em>discounted from</em> one?</li>
  <li>Should we call it a Coupon <em>amount</em>, or a Coupon <em>cost</em>?</li>
  <li>Is the pre-tax, pre-discount amount in the BookingAmount called a <em>price</em>, or a <em>cost</em>?</li>
</ul>

<p>Whatever you agreed on, that’s what you changed your code to reflect.</p>

<h4 id="continual-refinement">Continual refinement</h4>

<p>Hm. Something still feels off.</p>

<p>You and your teammate feel your OOP spidey senses going haywire.</p>

<blockquote>
  <p>Teammate: Hm. I guess that worked, but that’s still not exactly as clean as we wanted it. Isn’t it kind of weird how the Checkout owns the calculation for the calculation of a discount?</p>
</blockquote>

<blockquote>
  <p>You: Yeah, I see where you’re coming from. That’s just not good OO design. Additionally, if we notice the language our domain experts were using, they didn’t mention that the checkout total was some subtraction of something from another thing. The Checkout’s total simply is the order amount, after application of a Coupon.</p>
</blockquote>

<p>Your partner and you take one last step:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Checkout</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">booking_amount</span><span class="p">,</span> <span class="n">coupon</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@booking_amount</span> <span class="o">=</span> <span class="n">booking_amount</span>
</span><span class="line">    <span class="vi">@booking_amount</span><span class="o">.</span><span class="n">apply!</span><span class="p">(</span><span class="n">coupon</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">total_amount</span>
</span><span class="line">    <span class="vi">@booking_amount</span><span class="o">.</span><span class="n">amount</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">BookingAmount</span>
</span><span class="line">  <span class="c1"># Implementation...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">apply!</span><span class="p">(</span><span class="n">coupon</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@coupons</span> <span class="o">+=</span> <span class="n">coupon</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">amount</span>
</span><span class="line">    <span class="vi">@amount</span> <span class="o">-</span> <span class="vi">@coupons</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:amount</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>You sit back and read it back, out loud:</p>

<blockquote>
  <p>The checkout’s total amount is the BookingAmount after a Coupon has been applied.</p>
</blockquote>

<p>You both smile. Much better.</p>

<h3 id="in-closing">In closing…</h3>

<p>In this brief time we had together,</p>

<ul>
  <li>We discussed why names are important - especially in a complex endeavour like software development.</li>
  <li>We covered why it’s important to arrive at a shared understanding, together as a team, using the same words and vocabulary.</li>
  <li>We discovered how to build and integrate a <strong>Glossary</strong> into the daily rhythm of our team</li>
  <li>We refactored the code twice - illustrating how to get code in line with the domain language.</li>
</ul>

<h3 id="and-there-is-much-more">And there is much more!</h3>

<p>In an upcoming post, we’ll investigate how the <strong>Ubiquitous Language</strong> applies to a core concept of Domain-Driven Design: the <strong>Bounded Context</strong>. Why is that important? Because Bounded Contexts give us tools to organize our code - and to do further advanced things like <a href="https://speakerdeck.com/andrewhao/ddd-rail-your-monorail">break up monoliths into services</a>.</p>

<script async="" class="speakerdeck-embed" data-id="1e6dd8983891467381036a321cd274a9" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>

]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Knex.js and PostGIS cheat sheet]]></title>
		
		<link href="http://www.g9labs.com/2016/04/08/knex-dot-js-and-bookshelf-dot-js-cheat-sheet/"/>
		<updated>2016-04-08T12:33:00-07:00</updated>
		<id>http://www.g9labs.com/2016/04/08/knex-dot-js-and-bookshelf-dot-js-cheat-sheet</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>As follows are some code snippets for using <a href="http://knexjs.org/">Knex.js</a> for executing Postgres and PostGIS queries.</p>

<h3 id="execute-raw-sql-in-migration">Execute raw SQL in migration</h3>

<p>I often find this useful for fancy SQL, like creating views.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="nx">exports</span><span class="p">.</span><span class="nx">up</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">knex</span><span class="p">,</span> <span class="nx">Promise</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">knex</span><span class="p">.</span><span class="nx">raw</span><span class="p">(</span><span class="err">`</span><span class="nx">YOUR</span> <span class="nx">RAW</span> <span class="nx">SQL</span><span class="err">`</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="add-a-postgis-point-type-to-a-table-in-a-migration">Add a PostGIS Point type to a table in a migration:</h3>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="k">return</span> <span class="nx">knex</span><span class="p">.</span><span class="nx">schema</span><span class="p">.</span><span class="nx">table</span><span class="p">(</span><span class="s1">&#39;events&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">table</span><span class="p">.</span><span class="nx">specificType</span><span class="p">(</span><span class="s1">&#39;point&#39;</span><span class="p">,</span> <span class="s1">&#39;geometry(point, 4326)&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="add-a-foreign-key-to-another-table">Add a foreign key to another table.</h3>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="k">return</span> <span class="nx">knex</span><span class="p">.</span><span class="nx">schema</span><span class="p">.</span><span class="nx">table</span><span class="p">(</span><span class="s1">&#39;events&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="nx">table</span><span class="p">.</span><span class="nx">integer</span><span class="p">(</span><span class="s1">&#39;device_id&#39;</span><span class="p">).</span><span class="nx">references</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">).</span><span class="nx">inTable</span><span class="p">(</span><span class="s1">&#39;devices&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="add-a-multi-column-unique-index">Add a multi-column unique index</h3>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="k">return</span> <span class="nx">knex</span><span class="p">.</span><span class="nx">schema</span><span class="p">.</span><span class="nx">table</span><span class="p">(</span><span class="s1">&#39;events&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">table</span><span class="p">.</span><span class="nx">unique</span><span class="p">([</span><span class="s1">&#39;start_time&#39;</span><span class="p">,</span> <span class="s1">&#39;end_time&#39;</span><span class="p">,</span> <span class="s1">&#39;start_location&#39;</span><span class="p">,</span> <span class="s1">&#39;end_location&#39;</span><span class="p">,</span> <span class="s1">&#39;distance_miles&#39;</span><span class="p">]);</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="find-a-collection">Find a collection</h3>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="nx">knex</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s1">&#39;*&#39;</span><span class="p">)</span>
</span><span class="line"><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="s1">&#39;participants&#39;</span><span class="p">)</span>
</span><span class="line"><span class="p">.</span><span class="nx">where</span><span class="p">({</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Jason&#39;</span> <span class="p">})</span>
</span><span class="line"><span class="p">.</span><span class="nx">andWhere</span><span class="p">(</span><span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;=&#39;</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="custom-operations-in-select-clause">Custom operations in SELECT clause</h3>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="nx">knex</span><span class="p">(</span><span class="s1">&#39;trips&#39;</span><span class="p">)</span>
</span><span class="line"><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="nx">knex</span><span class="p">.</span><span class="nx">raw</span><span class="p">(</span><span class="s1">&#39;miles * passengers as passenger_miles&#39;</span><span class="p">))</span>
</span><span class="line"><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="nx">knex</span><span class="p">.</span><span class="nx">raw</span><span class="p">(</span><span class="s2">&quot;CONCAT(&#39;Hello, &#39;, name) as greeting_message&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="return-postgis-data-from-a-spatial-column">Return PostGIS data from a spatial column:</h3>

<p>We use <a href="https://github.com/jfgodoy/knex-postgis">knex-postgis</a> to gain access to PostGIS functions in Postgres. Here, we return a ‘point’ column with <code>ST_AsGeoJSON</code>:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kr">const</span> <span class="nx">knexPostgis</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;knex-postgis&#39;</span><span class="p">)(</span><span class="nx">knex</span><span class="p">);</span>
</span><span class="line"><span class="nx">knex</span><span class="p">(</span><span class="s1">&#39;events&#39;</span><span class="p">).</span><span class="nx">select</span><span class="p">(</span><span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="nx">knexPostgis</span><span class="p">.</span><span class="nx">asGeoJSON</span><span class="p">(</span><span class="s1">&#39;point&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>

<p>See <a href="https://github.com/jfgodoy/knex-postgis">knex-postgis</a> documentation for a list of other PostGIS functions that are supported.</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Lossless rate limiting with RxJS]]></title>
		
		<link href="http://www.g9labs.com/2016/03/21/lossless-rate-limiting-with-rxjs/"/>
		<updated>2016-03-21T13:09:00-07:00</updated>
		<id>http://www.g9labs.com/2016/03/21/lossless-rate-limiting-with-rxjs</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Much of RxJS involves working with <a href="http://reactivex.io/documentation/operators/backpressure.html">backpressure</a> - how to reconcile streams that emit/process data at different rates, without overloading the system. Much of that model is built with lossy handling in mind - it makes sense that when your system is under duress, that you design your streams to degrade gracefully (e.g. drop certain events, or rate limit them by chunking into windows, etc).</p>

<p>However, there are times when it is appropriate to have a lossless approach to backpressure - e.g., to store every chunk of data that comes through a stream in memory, and not drop things. These use cases may come about when:</p>

<ul>
  <li>You have a short-lived, or bounded set of data you know will come over the pipe. You understand the bounds of the data that will ever come over the pipe.</li>
  <li>You have a processing script you want to run, which is not part of a large system.</li>
  <li>You have a honkin’ large system that can handle the load.</li>
</ul>

<p>In my case, I had a script that called the Google Geocoding API for a set of GPS coordinates. Now for a set of several hundred coordinates, I would end up calling the API several hundred times all at once with this naive implementation:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// address$: [ &quot;1234 Widget Way, Promiseland, WV&quot; ] -- [...] -- [...]</span>
</span><span class="line"><span class="kr">const</span> <span class="nx">geocoded$</span> <span class="o">=</span> <span class="nx">addresses$</span>
</span><span class="line"><span class="p">.</span><span class="nx">flatMap</span><span class="p">(</span><span class="nx">address</span> <span class="o">=&gt;</span> <span class="nx">Rx</span><span class="p">.</span><span class="nx">Observable</span><span class="p">.</span><span class="nx">fromPromise</span><span class="p">(</span><span class="nx">callGoogleGeocodingService</span><span class="p">(</span><span class="nx">address</span><span class="p">)))</span>
</span><span class="line"><span class="c1">// geocoded$: [ { latitude: 89.99, longitude: 90.00, ... } ] -- [...] -- [...]</span>
</span></code></pre></td></tr></table></div></figure>

<p>I searched all over for a lossless throttling mechanism, but all I could find was references to RxJS’s lossy <a href="">throttle</a> behavior.</p>

<p>Other frameworks, like <a href="https://github.com/baconjs/bacon.js/#observable-bufferingthrottle">Bacon.js’s bufferingThrottle()</a> and <a href="http://highlandjs.org/#ratelimit">Highland.js ratelimit()</a> seemed attractive. Where was RxJS’s equivalent?</p>

<p>Thanks to a <a href="http://stackoverflow.com/questions/34955842/rate-limiting-http-calls-made-by-rxjs">helpful StackOverflow post</a>, I found the answer: the use of <a href="https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/concatmap.md">concatMap()</a> and <a href="https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/delay.md">delay()</a> forces the incoming stream to execute serially over artificial time delayed streams.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kr">const</span> <span class="nx">geocoded$</span> <span class="o">=</span> <span class="nx">addresses$</span>
</span><span class="line"><span class="p">.</span><span class="nx">concatMap</span><span class="p">(</span><span class="nx">address</span> <span class="o">=&gt;</span> <span class="nx">Rx</span><span class="p">.</span><span class="nx">Observable</span><span class="p">.</span><span class="nx">just</span><span class="p">(</span><span class="nx">address</span><span class="p">).</span><span class="nx">delay</span><span class="p">(</span><span class="nx">TIME_INTERVAL</span><span class="p">))</span>
</span><span class="line"><span class="p">.</span><span class="nx">flatMap</span><span class="p">(</span><span class="nx">address</span> <span class="o">=&gt;</span> <span class="nx">Rx</span><span class="p">.</span><span class="nx">Observable</span><span class="p">.</span><span class="nx">fromPromise</span><span class="p">(</span><span class="nx">callGoogleGeocodingService</span><span class="p">(</span><span class="nx">address</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>

<p>Thanks to:</p>

<ul>
  <li>http://stackoverflow.com/questions/34955842/rate-limiting-http-calls-made-by-rxjs</li>
  <li>http://stackoverflow.com/questions/30876361/rxjs-rate-limit-requests-per-second-and-concurrency?rq=1</li>
</ul>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Partitioning RxJS streams: adventures in nested Observables with groupBy() and flatMap()]]></title>
		
		<link href="http://www.g9labs.com/2016/02/17/partitioning-rxjs-streams-adventures-in-nested-observables-with-groupby-and-flatmap/"/>
		<updated>2016-02-17T22:47:00-08:00</updated>
		<id>http://www.g9labs.com/2016/02/17/partitioning-rxjs-streams-adventures-in-nested-observables-with-groupby-and-flatmap</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>One of the confusing aspects about working with streams is diving into Rx operators that take a stream and fan out into multiple streams.</p>

<p>Is your head exploding yet?</p>

<h2 id="the-problem">The problem:</h2>

<p>Let’s dive into a problem I ran into while working on a personal project:</p>

<p>The task at hand is to take a list of GPS moving point data and partition the group data into multiple clusters of points, count up each group, then return the aggregate stats. As a cyclist is moving, I want to know how often they are moving at that specific velocity (speed).</p>

<p>Our weapon of choice is the <a href="http://reactivex.io/documentation/operators/groupby.html">RxJS groupBy() function</a>, which groups like stream values based on a key value you define.</p>

<p><a href="http://reactivex.io/documentation/operators/groupby.html"><img src="http://reactivex.io/documentation/operators/images/groupBy.c.png" alt="Image of groupBy() at work, with marbles." /></a></p>

<p>OK. Easy enough. So my implementation looked something like this:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="nx">gpsPointStream</span>
</span><span class="line"><span class="p">.</span><span class="nx">groupBy</span><span class="p">((</span><span class="nx">point</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">point</span><span class="p">.</span><span class="nx">velocity</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>The supplied <code>(point) =&gt; point.velocity</code> function determines the <code>key</code> value for the supplied event, which then 1) creates a new Observable sequence for that specific <code>key</code> value, if it doesn’t exist, or 2) assigns your event to an existing Observable sequence.</p>

<p>Let’s illustrate:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="nx">src</span><span class="o">:</span>     <span class="o">--</span> <span class="p">{</span> <span class="nx">velocity</span><span class="o">:</span> <span class="mi">0</span> <span class="p">}</span> <span class="o">----------</span> <span class="p">{</span> <span class="nx">velocity</span><span class="o">:</span> <span class="mf">0.1</span> <span class="p">}</span> <span class="o">-----------------------------------</span> <span class="p">{</span> <span class="nx">velocity</span><span class="o">:</span> <span class="mi">0</span> <span class="p">}</span> <span class="o">--&gt;</span>
</span><span class="line"><span class="nx">groupBy</span><span class="o">:</span> <span class="o">--</span> <span class="p">[{</span> <span class="nx">Observable</span> <span class="nx">key</span><span class="o">:</span> <span class="mi">0</span> <span class="p">}]</span> <span class="o">--</span> <span class="p">[</span> <span class="p">{</span> <span class="nx">Observable</span> <span class="nx">key</span><span class="o">:</span> <span class="mi">0</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">Observable</span> <span class="nx">key</span><span class="o">:</span> <span class="mf">0.1</span> <span class="p">}</span> <span class="p">]</span> <span class="o">--</span> <span class="p">[</span> <span class="p">{</span> <span class="nx">Observable</span> <span class="nx">key</span><span class="o">:</span> <span class="mi">0</span> <span class="nx">count</span><span class="o">:</span> <span class="mi">2</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">Observable</span> <span class="nx">key</span><span class="o">:</span> <span class="mf">0.1</span> <span class="p">}</span> <span class="p">]</span> <span class="o">--&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<h2 id="never-fear-flatmap-to-the-rescue">Never fear, <code>flatMap()</code> to the rescue.</h2>

<p>So the story turns to our hero <a href="http://reactivex.io/documentation/operators/flatmap.html"><code>flatMap()</code></a>, which as it turns out is specifically tuned to deal with issues of dealing with multiple streams.</p>

<p><a href="http://reactivex.io/documentation/operators/flatmap.html"><img src="http://reactivex.io/documentation/operators/images/flatMap.c.png" alt="Marble diagram for flatMap" /></a></p>

<p><code>flatMap</code> will take a supplied function as its argument, which is the operation to apply to each argument within the supplied stream.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="nx">gpsPointStream</span>
</span><span class="line"><span class="p">.</span><span class="nx">groupBy</span><span class="p">((</span><span class="nx">point</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">point</span><span class="p">.</span><span class="nx">velocity</span><span class="p">)</span>
</span><span class="line"><span class="p">.</span><span class="nx">flatMap</span><span class="p">((</span><span class="nx">group</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">group</span><span class="p">.</span><span class="nx">scan</span><span class="p">((</span><span class="nx">h</span><span class="p">,</span> <span class="nx">v</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">h</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">              <span class="p">.</span><span class="nx">zip</span><span class="p">(</span><span class="nx">Observable</span><span class="p">.</span><span class="nx">just</span><span class="p">(</span><span class="nx">group</span><span class="p">.</span><span class="nx">key</span><span class="p">))</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="nx">src</span><span class="o">:</span>     <span class="o">--</span> <span class="p">{</span> <span class="nx">velocity</span><span class="o">:</span> <span class="mi">0</span> <span class="p">}</span> <span class="o">----------</span> <span class="p">{</span> <span class="nx">velocity</span><span class="o">:</span> <span class="mf">0.1</span> <span class="p">}</span> <span class="o">-----------------------------------</span> <span class="p">{</span> <span class="nx">velocity</span><span class="o">:</span> <span class="mi">0</span> <span class="p">}</span> <span class="o">----&gt;</span>
</span><span class="line"><span class="nx">groupBy</span><span class="o">:</span> <span class="o">--</span> <span class="p">[{</span> <span class="nx">Observable</span> <span class="nx">key</span><span class="o">:</span> <span class="mi">0</span> <span class="p">}]</span> <span class="o">--</span> <span class="p">[</span> <span class="p">{</span> <span class="nx">Observable</span> <span class="nx">key</span><span class="o">:</span> <span class="mi">0</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">Observable</span> <span class="nx">key</span><span class="o">:</span> <span class="mf">0.1</span> <span class="p">}</span> <span class="p">]</span> <span class="o">--</span> <span class="p">[</span> <span class="p">{</span> <span class="nx">Observable</span> <span class="nx">key</span><span class="o">:</span> <span class="mi">0</span> <span class="nx">count</span><span class="o">:</span> <span class="mi">2</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">Observable</span> <span class="nx">key</span><span class="o">:</span> <span class="mf">0.1</span> <span class="p">}</span> <span class="p">]</span> <span class="o">--&gt;</span>
</span><span class="line"><span class="nx">flatMap</span><span class="o">:</span> <span class="o">--</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span> <span class="p">]</span> <span class="o">-----------------</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mf">0.1</span> <span class="p">]</span> <span class="o">------------------------------------------</span> <span class="p">[</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span> <span class="p">]</span> <span class="o">--&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>What just happened here?</p>

<p>I specified a merging function for the <code>flatMap()</code> stream, which performed the <code>scan()</code> counting aggregation on my group before merging the stream back into the main stream. I threw in a <code>zip</code>, which annotated my aggregate count value with a record of the group key (velocity) that this value was computed for.</p>

<h2 id="compare-it-to-imperative">Compare it to imperative</h2>

<p>The equivalent of <code>groupBy</code>/<code>flatMap</code> in imperative programming is, quite literally, just <code>_.groupBy()</code> and <code>_.flatMap()</code>. With a few key differences. Here it is in <a href="https://lodash.com/docs#groupBy">lodash</a>:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">grouped</span> <span class="o">=</span> <span class="nx">_</span><span class="p">([</span> <span class="p">{</span> <span class="nx">velocity</span><span class="o">:</span> <span class="mi">0</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">velocity</span><span class="o">:</span> <span class="mf">0.1</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">velocity</span><span class="o">:</span> <span class="mi">0</span> <span class="p">}</span> <span class="p">])</span>
</span><span class="line"><span class="p">.</span><span class="nx">groupBy</span><span class="p">((</span><span class="nx">point</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">point</span><span class="p">.</span><span class="nx">velocity</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nx">grouped</span><span class="p">.</span><span class="nx">value</span><span class="p">()</span>
</span><span class="line"><span class="c1">// { 0: [ { velocity: 0 }, { velocity: 0 } ], 0.1: [ { velocity: 0.1 } ] }</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">flatmapped</span> <span class="o">=</span> <span class="nx">grouped</span><span class="p">.</span><span class="nx">flatMap</span><span class="p">((</span><span class="nx">v</span><span class="p">,</span> <span class="nx">k</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="p">[</span> <span class="p">[</span><span class="nx">v</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="nx">k</span><span class="p">]</span> <span class="p">]</span>
</span><span class="line">  <span class="p">})</span>
</span><span class="line">
</span><span class="line"><span class="nx">flatmapped</span><span class="p">.</span><span class="nx">value</span><span class="p">()</span>
</span><span class="line"><span class="c1">// [[2, &quot;0&quot;], [1, &quot;0.1&quot;]]</span>
</span></code></pre></td></tr></table></div></figure>

<p>So in the end, the end result was the same with one crucial difference - our Observable, reactive version was able to take intermediate accounts into time and perform an intermediate calculation as data was flowing in. This allowed us to generate an intermediate count for the “0” velocity group.</p>

<h2 id="takeaways">Takeaways</h2>

<ul>
  <li>When you want to fan out a stream into groups or partitions based on a specific stream value, turn to <a href="https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/groupby.md"><code>groupBy</code></a>.</li>
  <li>When you have a need to combine a stream-of-streams, you want to look at <a href="https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/selectmany.md"><code>flatMap</code></a>. You may also consider looking at <a href="https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/concatmap.md"><code>concatMap</code></a>, a close cousin of <code>flatMap</code>.</li>
  <li>Reactive programming gives you more expressive abilities to reason about time and event ordering. You just have to tilt your head a little bit.</li>
</ul>

<h2 id="further-reading">Further reading:</h2>

<ul>
  <li>http://blogs.microsoft.co.il/iblogger/2015/08/11/animations-of-rx-operators-groupby/</li>
</ul>

<p><strong>Update: 2016/03/22</strong></p>

<p>Updated typo where the <code>index</code> variable on a GroupedObservable was changed to correctly be <code>key</code>.</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Strange Loop 2015: Notes & Reflections]]></title>
		
		<link href="http://www.g9labs.com/2015/09/27/strange-loop-2015-reflections/"/>
		<updated>2015-09-27T15:40:00-07:00</updated>
		<id>http://www.g9labs.com/2015/09/27/strange-loop-2015-reflections</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Going to Strange Loop was a huge check off my conference bucket list (lanyard?). I’d always heard about this slightly-weird, highly academic collision between academia and industry, skewing toward programming languages you haven’t heard of (or, at the very least, you’ve never used in production). I anticipated sitting at the feet of gray-haired wizards and bright-eyed hipsters with Ph.Ds.</p>

<p>The conference did not disappoint. And it was not quite what I expected-I less sat at the feet of geniuses than I did talk with them, peer-to-peer, about topics of interest. All around me people were saying “Don’t be afraid to ask questions. Don’t feel stupid - nobody knows everything.” Speakers were tweeting about how much they were learning.  It was comforting, because lots of topics I had come to see were those in which I had no. freakin. clue. about.</p>

<p>The following is culled from my notes from different sessions I attended. I will focus on brevity. I will keep it clear. Here we go:</p>

<h3 id="opening-keynote-i-see-what-you-mean---peter-alvaro">Opening Keynote: “I see what you mean” - Peter Alvaro</h3>

<iframe width="560" height="315" src="https://www.youtube.com/embed/R2Aa4PivG0g" frameborder="0" allowfullscreen=""></iframe>

<ul>
  <li>Instructions, behaviors &amp; outcomes.</li>
  <li>It “feels good” to write in C (a hardcore 1000 liner)</li>
  <li>But a declarative program (e.g. SQL) works well, but is harder to come<br />
up with.</li>
  <li>The declarative world - as described in the work done in Datalog</li>
  <li>How can we take concepts from Datalog and apply to real-world<br />
resources like network actors (distributed systems)?</li>
  <li>It becomes easier to model these systems declaratively when we<br />
explicitly capture time.</li>
  <li>Enter Dedalus: extension to Datalog where time is a modeling<br />
construct.</li>
  <li>(Show off usage of <code>@next</code> and <code>@async</code> annotations</li>
  <li>Computation is redezvous - the only thing that you know is what YOU<br />
know at that point in time.</li>
  <li>Takeaway: Abstractions leak. Model them better (e.g. with time)</li>
  <li>Inventing languages is dope.</li>
</ul>

<h3 id="have-your-causality-and-your-wall-clocks-too-jon-moore">Have your Causality and your Wall Clocks Too (Jon Moore)</h3>

<iframe width="560" height="315" src="https://www.youtube.com/embed/YqNGbvFHoKM" frameborder="0" allowfullscreen=""></iframe>

<ul>
  <li>Take concept of Lamport clocks and extend them with hybrid clocks.</li>
  <li>And extend them one further with: Distributed Monotonic Clocks</li>
  <li>These DMCs use population protocol (flocking) to each actor in the<br />
system communicate with another, updating their source of truth to<br />
eventually agree on a media time w/in the group</li>
  <li>DMC components:
    <ol>
      <li>Have a reset button by adding epoch bit</li>
      <li>Use flocking (via population protocol) to avoid resets</li>
      <li>Accomodates for some clockless nodes</li>
      <li>Explicitly reflects causality</li>
    </ol>
  </li>
</ul>

<h3 id="building-isomorphic-web-apps-with-react---elyse-gordon">Building Isomorphic Web Apps with React - Elyse Gordon</h3>

<iframe width="560" height="315" src="https://www.youtube.com/embed/QPXNb6bl7hc" frameborder="0" allowfullscreen=""></iframe>

<ul>
  <li>Vevo needed better SEO for SPAs. Old soln was to snapshot page and upload to S3.</li>
  <li>Beneficial for SEO crawlers</li>
  <li>React in frontend. Node in backend.</li>
  <li>Vevo-developed <a href="">pellet</a> project as Flux-like framework to organize<br />
files.</li>
  <li>Webpack aliases/shims</li>
  <li>Server hands off to browser, bootstraps React in client.</li>
  <li>Alternatives: Relay, Ember</li>
</ul>

<h3 id="designing-for-the-worst-case-peter-bailis-pbailis">Designing for the Worst Case: Peter Bailis (@pbailis)</h3>

<iframe width="560" height="315" src="https://www.youtube.com/embed/ZGIAypUUwoQ" frameborder="0" allowfullscreen=""></iframe>

<ul>
  <li>Designing for worst case often penalizes average case</li>
  <li>But what if designing for the worst case actually helps avg case?</li>
  <li>Examples from dstbd systems:
    <ul>
      <li>Worst case of disconnected data centers, packet loss/link loss. Fix by introducing coordination-free protocols. Boom, you’ve now made your network more scalable, performant, resistent to downtime.</li>
      <li>Worst case: hard to coordinate a distributed transaction between services. What do you do? You implement something like buffered writes out of process.
        <ul>
          <li>CRDT, RAMP, HAT, bloom</li>
          <li>Suddenly, you have fault tolerance</li>
        </ul>
      </li>
      <li>Tail latency problem in microservices: the more microservices you query, the higher the probability of hitting a slow server response.
        <ul>
          <li>Your service’s corner case is your user’s average case</li>
        </ul>
      </li>
      <li>HCI: accessibility guidelines in W3C lift standards for all. Make webpages easier to navigate. Side effect of better page performance, higher conversion.</li>
      <li>Netflix designing CC subtitles also benefits other users.</li>
      <li>Curb cuts in the real world to help ADA/mobility-assisted folks also benefit normal folks too</li>
    </ul>
  </li>
  <li>Best has pitfalls too: your notion of best may be hard to hit, or risky. You may want to optimize for “stable” solution. (Robust optimization)</li>
  <li>When to design for worst case?
    <ul>
      <li>common corner cases</li>
      <li>environmental conditions vary</li>
      <li>“normal” isn’t normal</li>
    </ul>
  </li>
  <li>worst forces a conversation
    <ul>
      <li>how do we plan for failures?</li>
      <li>what is our scale-out strategy?</li>
      <li>how do we audit failures? data breaches?</li>
    </ul>
  </li>
</ul>

<h3 id="ideology-by-gary-bernardt">Ideology by Gary Bernardt</h3>

<ul>
  <li>Rumsfeld: known knowns, known unknowns, and unknown unknowns.</li>
  <li>Ideology is the thing you know you do not know you know</li>
  <li>Conflict between typed vs dynamic programmers:
    <ul>
      <li>Typed: “I don’t need tests, I have types”</li>
      <li>Dynamic: “I write tests, so I don’t need types”</li>
    </ul>
  </li>
  <li>In reality, they are solving different places in the problem domain, but they have different beliefs about the world that are hidden in the shadows:
    <ul>
      <li>Typed: “Correctness comes solely from types”</li>
      <li>Dynamic: “Correctness comes solely from example”</li>
    </ul>
  </li>
  <li>“I need nulls” -&gt; You believe nulls are the only way to represent absence</li>
  <li>“Immutable data structures are slow” -&gt; You believe all immutable types are slow</li>
  <li>“GC is impractical” -&gt; you believe GC algorithms won’t get faster.</li>
  <li>Read CSE 341 Type systems, Dan Grossman</li>
</ul>

<h3 id="building-scalable-stateful-services-caitlin-mccaffrey">Building Scalable, Stateful Services: Caitlin McCaffrey</h3>

<iframe width="560" height="315" src="https://www.youtube.com/embed/H0i_bXKwujQ" frameborder="0" allowfullscreen=""></iframe>

<h4 id="sticky-connection-always-talk-to-the-same-machine">Sticky connection: always talk to the same machine</h4>
<p>Building sticky connections:<br />
- persistent connections (load balancing cannot rebalance server)<br />
- implement backpressure (d/c connection)</p>

<h4 id="dynamic-cluster-membership">dynamic cluster membership</h4>

<ul>
  <li>gossip protocols -&gt; availability</li>
  <li>consensus systems -&gt; consistency<br />
(everybody needs to have the same worldview.</li>
</ul>

<h4 id="work-distribution">work distribution:</h4>

<h5 id="random">random:</h5>
<ul>
  <li>write anywhere, read from all</li>
</ul>

<h5 id="consistent-hashing-on-session-id">consistent hashing: on session ID</h5>

<p>hash space -&gt; node<br />
dynamoDB, Manhattan</p>

<p>con: can have hotspots, could have uneven distribution of resources cannot move work.</p>

<h4 id="distributed-hash-table">distributed hash table</h4>
<p>statefully store hash</p>

<h4 id="real-world">Real world</h4>
<p>Scuba (Facebook)<br />
- distributed in-memory DB</p>

<p>Ringpop (Uber)<br />
- Node.js swim gossip protocol, consistent hashing</p>

<p>Orleans (MS Research)<br />
- actor model<br />
- gossip<br />
- consistent hash<br />
- distributed hashtable</p>

<h3 id="idalin-abby-bob-from-protesting-to-programming-becoming-a-tech-activist">Idalin “Abby” Bobé: From Protesting to Programming: Becoming a Tech Activist</h3>

<iframe width="560" height="315" src="https://www.youtube.com/embed/gy82S8tjJX8" frameborder="0" allowfullscreen=""></iframe>

<ul>
  <li>Tech to resist exploitation</li>
  <li>Technologists as activists</li>
  <li>Idalin Bobé -&gt; Changed name to “Abby” to get a job.</li>
  <li>Pastor Jenkins - magnifying glass vs paper</li>
  <li>Philadelphia Partnership Program:
    <ul>
      <li>1st to college</li>
      <li>work &lt;&gt; school</li>
    </ul>
  </li>
  <li>Difficult to balance.</li>
  <li>Mills MBA, CS</li>
  <li>Joined Black Girls Code
    <ul>
      <li>Apply technology in the right way</li>
    </ul>
  </li>
  <li>Ferguson happened
    <ul>
      <li>Thoughtworkers joined on the ground</li>
      <li>Hands Up United: www.handsupunited.org</li>
    </ul>
  </li>
  <li>“Do not be led by digital metrics” - even though the activists had digital tooling, the tools were being used against activists. Phone calls, chats monitored. Movement tracked.</li>
  <li>New group starting up in St. Louis called “Ray Clark, Sr.” - named after a black man who played a strong role in the founding of Silicon Valley.</li>
  <li>21st century technologists need 21st century skillsets.</li>
  <li>Dream Defenders</li>
  <li>“it is our duty to fight for our freedom/it is our duty to win/we must love and support one another/we have nothing to lose but our chains”</li>
</ul>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Notes on performance tuning a Puma server]]></title>
		
		<link href="http://www.g9labs.com/2015/06/29/notes-on-performance-tuning-a-puma-server/"/>
		<updated>2015-06-29T11:47:00-07:00</updated>
		<id>http://www.g9labs.com/2015/06/29/notes-on-performance-tuning-a-puma-server</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>A couple of months ago, I was tuning a Rails app for one of our clients.<br />
This client wanted to know how performant their app would be under load.</p>

<p>To do that, you can do several different things:</p>

<ol>
  <li>Tune the thread/process balance within the VM</li>
  <li>Horizontally scale with your cloud platform.</li>
</ol>

<p>This is a discussion of the former (#1):</p>

<h2 id="set-up-the-test">1) Set up the test</h2>

<h3 id="drive-with-a-synthetic-script">Drive with a synthetic script</h3>

<p>Our application had a synthetic load driver that would run Selenium to<br />
execute various app tasks. This synthetic driver could be parallelized<br />
across many notes via Rainforest QA, Sauce Labs or Browserify.</p>

<p>In our case, I only needed to run our synthetic load script on a single<br />
node in multiple processes, which simulated enough load to anticipate<br />
another order of magnitude of traffic.</p>

<h3 id="know-how-to-inspect-the-server-under-load">Know how to inspect the server under load.</h3>

<p>Commands you will want to know:</p>

<pre><code>$ free -m # Find the total amount of free memory on your machine
$ ps uH p &lt;pid&gt; # List out process threads
$ kill -TTIN &lt;puma_master_pid&gt; # Add a puma worker
$ kill -TTOU &lt;puma_master_pid&gt; # Remove a puma worker
$ kill -USR2 &lt;puma_master_pid&gt; # Kill the puma master &amp; workers
</code></pre>

<h2 id="generating-more-load-use-external-load-testing-services-or-plain-tools">Generating more load: use external load testing services, or plain tools.</h2>

<p>Try using <a href="http://www.flood.io">Flood.io</a> or JMeter for performance load.</p>

<p>I tried looking into the <a href="https://github.com/schneems/puma_auto_tune">puma_auto_tune</a> gem, but it required a higher level of production instrumentation than I was ready to give it.</p>

<h2 id="analysis-new-relic-scalability-analysis">Analysis: New Relic scalability analysis</h2>

<p>New Relic gave us a scalability analysis scatter plot, plotting<br />
throughput against average application response time. In essence, it<br />
allows you to see spikes in response times as correlated to throughput.</p>

<h2 id="process">Process:</h2>

<p>My approach was to use the synthetic script to generate productionlike<br />
node and ramp up the # of load actors in 5m increments. Each run would<br />
test the following Puma process/thread balance:</p>

<p>Run #1: Single-process, multi threads.<br />
Run #2: Multiple processes, single threaded.<br />
Run #3: Multiple processes, multiple threads.</p>

<blockquote>
  <h3 id="aside-how-many-of-these-threadsprocesses-should-i-be-using">Aside: <em>how many</em> of these threads/processes should I be using?</h3>

  <p>Note that your numbers will be different on the execution<br />
characteristics of your app and your server environment. Tweak it for<br />
yourself. You’re designing an experiment.</p>

  <p>If you’re curious, our Rails app started out with 4 threads on 2<br />
workers. We made the # of Puma workers (both min and max) environment<br />
variables so we could tweak the variables easily without deploying.</p>
</blockquote>

<p>The strategy was then to look at the perf characteristics of each run in<br />
the scatter plot. If there were any spikes in the graph with the<br />
increase of load, then that would be noted. Even minor features like an<br />
increase in slope would be noted - at that point, the incremental cost<br />
of each request increases with overall system load.</p>

<h2 id="results">Results</h2>

<p>I don’t have the New Relic data on hand to show, now, but in our case we<br />
discovered two things:</p>

<ol>
  <li>The server easily scaled from ~10 -&gt; ~500 rpm with a virtually flat<br />
line for all runs.</li>
  <li>The app exhibited no noticeable performance differences when flipped<br />
between uniprocess-multithreaded, multiprocess-unithreaded, and<br />
multiprocess-multithreaded modes. Any performance gains were under a<br />
tolerable threshold.</li>
</ol>

<p>How do we parse these results?</p>

<ul>
  <li>We note that we didn’t really push the performance threshold on this<br />
app (it’s not meant to be a public web site and 95% of it is behind a<br />
login wall to a specialized group of users). Thus, if we pushed the<br />
concurrent connections even more, we may have seen more of a pronounced<br />
difference.</li>
  <li>The <em>absence</em> of any major red flags was itself a validation. The<br />
question we wanted answered coming into this experiment was “how close<br />
are we to maxing out our single-node EC2 configuration such that we will<br />
have to begin configuring horizontal scaling?”? The answer was: we can<br />
safely scale further out in the near-term future, and cross the bridge<br />
of horizontal scaling/bursting when we get there.</li>
  <li>We did not have enough statistically significant differences in<br />
performance for #threads/#processes in Puma. However, if we wanted to<br />
truly find the optimal performance in our app, we would have turned to<br />
tools like <a href="https://github.com/schneems/puma_auto_tune">puma_auto_tune</a> to answer those questions.</li>
</ul>

<p>Let me know in the comments if you have any questions!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Toolbox: learning Swift and VIPER]]></title>
		
		<link href="http://www.g9labs.com/2015/06/01/toolbox-learning-swift-and-viper/"/>
		<updated>2015-06-01T17:04:00-07:00</updated>
		<id>http://www.g9labs.com/2015/06/01/toolbox-learning-swift-and-viper</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>The following are some notes I’m compiling as I’m beginning a journey<br />
down the rabbit hole, writing an app in Swift utilizing the <a href="http://www.objc.io/issue-13/viper.html">VIPER app development methodology</a></p>

<ul>
  <li>
    <p>I had trouble importing nested source code into XCode before realizing that I<br />
needed to import the folder with corresponding Groups. This is done by<br />
clicking the checkbox “Create Groups for any Added Folders”</p>

    <p><em>Reference</em>: https://developer.apple.com/library/ios/technotes/iOSStaticLibraries/Articles/configuration.html</p>

    <p>Without doing this, the compiler was not able to build the project.</p>

    <ul>
      <li>Since there is no way to do method swizzling in Swift, there are no real easy ways to do mocking/stubbing the way we used to do so in Ruby. Instead, this is forcing me to rely on plain old Swift structs. There are some simple ways to stub, but it ends up looking kind of awkward and very wiring-intensive like this:</li>
    </ul>
  </li>
</ul>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class NewRidePresenterSpec: QuickSpec {
</span><span class="line">  override func spec() {
</span><span class="line">    describe("#startRecordingGpsTrack") {
</span><span class="line">      class MockInteractor: NewRideInteractor {
</span><span class="line">        var wasCalled: Bool = false
</span><span class="line">
</span><span class="line">        @objc private override func startRecordingGpsTrack() {
</span><span class="line">          wasCalled = true
</span><span class="line">        }
</span><span class="line">      }
</span><span class="line">
</span><span class="line">      var subject = NewRidePresenter()
</span><span class="line">
</span><span class="line">      it("tells the interactor to start recording") {
</span><span class="line">        let mockInteractor = MockInteractor()
</span><span class="line">        subject.interactor = mockInteractor
</span><span class="line">        subject.startRecordingGpsTrack()
</span><span class="line">
</span><span class="line">        expect(mockInteractor.wasCalled).to(beTrue())
</span><span class="line">      }
</span><span class="line">    }
</span><span class="line">  }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>Using the <a href="https://github.com/teambox/viper-module-generator"><code>vipergen</code></a> and <a href="https://github.com/team-supercharge/boa"><code>boa</code></a> scaffolding generators helped me understand the concepts behind the view.</li>
  <li>Tip: Build a VIPER module, but don’t build it all at once. Just focus on the Presenter-Interactor-Wireframe component, or the DataStore-Entity-Interactor component. This will keep your head from exploding.</li>
  <li>Dude. I miss vim. <a href="http://alcatraz.io/">Alcatraz</a> + xvim helped a little…</li>
  <li>xcodebuild + <a href="https://github.com/supermarin/xcpretty">xcpretty</a> + Guard-shell == some sort of CI feedback loop.</li>
  <li>Manually creating mocks in Swift = kind of painful. If you override (subclass) a NSObject in Swift, <a href="http://stackoverflow.com/a/30530308/993929">you must provide it with the <code>@objc</code> pragma, otherwise it throws a segfault error</a></li>
  <li>You must contact CircleCI manually if you want to activate an iOS build (it’s still in beta). What are some other good CI tools to use with iOS?</li>
</ul>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Building GPX stats through FRP principles with Bacon.js]]></title>
		
		<link href="http://www.g9labs.com/2015/04/30/building-gpx-stats-through-frp-principles-on-bacon-dot-js/"/>
		<updated>2015-04-30T12:54:00-07:00</updated>
		<id>http://www.g9labs.com/2015/04/30/building-gpx-stats-through-frp-principles-on-bacon-dot-js</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>With my current fascination with <a href="http://github.com/andrewhao/stressfactor">tracking workouts and location-based-activities</a>, I have been interested in how I might be able to rewrite some of my stats logic with FRP principles.</p>

<h3 id="what-is-frp">What is FRP?</h3>

<p>FRP, or Functional Reactive Programming, is often defined as “functional programming over values that change over time”. It uses functional composition for streams of data that may appear in an infinite stream of data for some far indeterminate future - these types of use cases are served well by FRP which <a href="http://en.wikipedia.org/wiki/Functional_reactive_programming">“(simplifies) these problems by explicitly modeling time”</a>.</p>

<h3 id="gps---your-location-varied-over-time">GPS - your location, varied over time.</h3>

<p>A great application of this would be a workout. Let’s say I wanted to build an app that received realtime updates on a person’s position. Say the app was a Node server that received this JSON blob from a web API as a location update:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="json"><span class="line"><span class="p">{</span> <span class="err">&#39;lat&#39;:</span> <span class="err">29.192414,</span>
</span><span class="line">  <span class="err">&#39;lon&#39;:</span> <span class="err">148.113241,</span>
</span><span class="line">  <span class="err">&#39;ele&#39;:</span> <span class="err">122.1,</span>
</span><span class="line">  <span class="err">&#39;time&#39;:</span> <span class="err">&#39;2015-04-18T13:54:56Z&#39;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Say that some time later, the API receives this JSON blob:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="json"><span class="line"><span class="p">{</span> <span class="err">&#39;lat&#39;:</span> <span class="err">29.192424,</span>
</span><span class="line">  <span class="err">&#39;lon&#39;:</span> <span class="err">148.113251,</span>
</span><span class="line">  <span class="err">&#39;ele&#39;:</span> <span class="err">123.1,</span>
</span><span class="line">  <span class="err">&#39;time&#39;:</span> <span class="err">&#39;2015-04-18T13:55:26Z&#39;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>So we have these data points, that the user has moved <code>+0.00001</code> latitude points and <code>+0.00001</code> longitude points, climbing a total of <code>+1.0</code> meters, over a period of <code>30</code> seconds.</p>

<h4 id="exercise-get-my-instantaneous-velocity">Exercise: Get my instantaneous velocity</h4>

<p>If we performed this imperatively, we would write it something like this:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">locations</span> <span class="o">=</span> <span class="p">[{</span> <span class="cm">/*json*/</span> <span class="p">},</span> <span class="p">{</span> <span class="cm">/*json*/</span> <span class="p">}</span> <span class="cm">/*, ...*/</span><span class="p">];</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">last</span> <span class="o">=</span> <span class="nx">locations</span><span class="p">[</span><span class="nx">locations</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">secondToLast</span> <span class="o">=</span> <span class="nx">locations</span><span class="p">[</span><span class="nx">locations</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="p">];</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">timeDelta</span> <span class="o">=</span> <span class="nx">last</span><span class="p">.</span><span class="nx">time</span> <span class="o">-</span> <span class="nx">secondToLast</span><span class="p">.</span><span class="nx">time</span><span class="p">;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">distanceDelta</span> <span class="o">=</span> <span class="nx">getDistance</span><span class="p">(</span><span class="nx">last</span><span class="p">.</span><span class="nx">lon</span><span class="p">,</span> <span class="nx">last</span><span class="p">.</span><span class="nx">lat</span><span class="p">,</span> <span class="nx">secondToLast</span><span class="p">.</span><span class="nx">lon</span><span class="p">,</span> <span class="nx">secondToLast</span><span class="p">.</span><span class="nx">lat</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">velocity</span> <span class="o">=</span> <span class="nx">distanceDelta</span> <span class="o">/</span> <span class="nx">timeDelta</span><span class="p">;</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">velocity</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>With FRP, it might look more like this:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">locationStream</span> <span class="o">=</span> <span class="p">[{</span> <span class="cm">/*json*/</span> <span class="p">},</span> <span class="p">{</span> <span class="cm">/*json*/</span> <span class="p">}</span> <span class="cm">/*, ...some JSON objects that might appear in the future */</span><span class="p">];</span>
</span><span class="line"><span class="nx">locationStream</span><span class="p">.</span><span class="nx">slidingWindow</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">              <span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">pairs</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                <span class="kd">var</span> <span class="nx">timeDelta</span> <span class="o">=</span> <span class="nx">pairs</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">time</span> <span class="o">-</span> <span class="nx">pairs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">time</span><span class="p">;</span>
</span><span class="line">                <span class="kd">var</span> <span class="nx">distanceDelta</span> <span class="o">=</span> <span class="nx">getDistance</span><span class="p">(</span><span class="nx">pairs</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">lon</span><span class="p">,</span> <span class="nx">pairs</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">lat</span><span class="p">,</span> <span class="nx">pairs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">lon</span><span class="p">,</span> <span class="nx">pairs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">lat</span><span class="p">);</span>
</span><span class="line">                <span class="k">return</span> <span class="nx">distanceDelta</span> <span class="o">/</span> <span class="nx">timeDelta</span>
</span><span class="line">              <span class="p">})</span>
</span><span class="line">              <span class="p">.</span><span class="nx">onValue</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">velocity</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">velocity</span><span class="p">);</span>
</span><span class="line">              <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>There is a key difference that is not easily demonstrated here - that the former imperative example requires that all JSON arrays be materialized at once - via db query, in-memory store, etc. It doesn’t account for change in time.</p>

<p>However, the latter functional example accounts for changing values of time as they appear over the stream - as soon as a new value shows up in the stream, the velocity is changed instantly.</p>

<h3 id="some-more-location-based-experiments-rxlocation">Some more location-based experiments: rxlocation</h3>

<p>I wrote up a library to parse various facts from a changing stream of GPS events, from instantaneous velocity, average velocity, moving/stopped status, etc.</p>

<p>I investigated different reactive frameworks, mainly <a href="https://github.com/Reactive-Extensions/RxJS/">RxJS</a> and <a href="https://github.com/baconjs/bacon.js/">Bacon.js</a>. My takeaways were that RxJS does everything and the kitchen sink, but I got lost trying to reconcile Node streams with RxJS cold streams. Bacon.js just seemed to work for me, out of the box. I’m still learning, so I hope to have a better understanding of the core issues here.</p>

<p>You can check it out here: <a href="https://github.com/andrewhao/rxlocation">rxlocation</a>.</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Docker, Rails, and Docker Compose in your development workflow]]></title>
		
		<link href="http://www.g9labs.com/2015/03/19/docker-rails-and-docker-compose-in-your-development-workflow/"/>
		<updated>2015-03-19T13:29:00-07:00</updated>
		<id>http://www.g9labs.com/2015/03/19/docker-rails-and-docker-compose-in-your-development-workflow</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>(This post <a href="http://blog.carbonfive.com/2015/03/17/docker-rails-docker-compose-together-in-your-development-workflow/">originally appeared</a> on the Carbon Five blog.)</p>

<p>We’ve been trialing the usage of Docker and <a href="https://docs.docker.com/compose/">Docker Compose</a> (previously known as <a href="http://www.fig.sh">fig</a>) on a Rails project here at Carbon Five. In the past, my personal experience with Docker had been that the promise of portable containerized apps was within reach, but the tooling and development workflow were still awkward - commands were complex, configuration and linking steps were complicated, and the overall learning curve was high.</p>

<p>My team decided to take a peek at the current landscape of Docker tools (primarily boot2docker and Docker Compose) and see how easily we could spin up a new app and integrate it into our development workflow on Mac OS X.</p>

<p>In the end, I’ve found my experience with Docker tools to be surprisingly pleasant; the tooling easily integrates with existing Rails development workflows with only a minor amount of performance overhead. Docker Compose offers a seamless way to build containers and orchestrate their dependencies, and helps lower the learning curve to build Dockerized applications. Read on to find out how we built ours.</p>

<h2 id="introduction-to-docker-compose-ne-fig">Introduction to docker-compose (née Fig).</h2>

<p>Docker Compose acts as a wrapper around Docker - it links your containers together and provides syntactic sugar around some complex container linking commands.</p>

<p>We liked Docker Compose for its ability to coordinate and spin up your entire application and dependencies with one command. In the past, frameworks like Vagrant were easy ways to generate a standard image for your development team to use and get started on. Docker Compose offers similar benefits of decoupling the app from the host environment, but also provides the container vehicle for the app to run in all environments - that is, the container you develop in will often be the same container that you deploy to production with.</p>

<p>Docker (with the orchestration tooling provided by Compose) provides us the ability to:</p>

<ul>
  <li>Upgrade versions of Ruby or Node (or whatever runtime your app requires) in production with far less infrastructure coordination than normally required.</li>
  <li>Reduce the number of moving parts in the deployment process. Instead of writing complex Puppet and Capistrano deployment scripts, our deployments will now center around moving images around and starting containers.</li>
  <li>Simplify developer onboarding by standardizing your team on the same machine images.</li>
</ul>

<p>In this example, we will run two Docker containers - a Rails container and a MySQL container - and rely on Compose to build, link, and run them.</p>

<h2 id="installing-boot2docker-docker-and-docker-compose">Installing boot2docker, Docker, and Docker Compose.</h2>

<p>Docker runs in a VirtualBox VM through an image called <code>boot2docker</code>. The reason we have to use <code>boot2docker</code> and VirtualBox is because the Mac OSX filesystem is not compatible with the type of filesystem required to support Docker. Hence, we must run our Docker containers within yet another virtual machine.</p>

<ol>
  <li>Download and install <a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox</a>.</li>
  <li>Now install boot2docker and Docker Compose.</li>
</ol>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>brew install boot2docker docker-compose
</span></code></pre></td></tr></table></div></figure>
<ol>
  <li>Initialize and start up boot2docker</li>
</ol>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>boot2docker init
</span><span class="line"><span class="nv">$ </span>boot2docker start
</span></code></pre></td></tr></table></div></figure>

<ol>
  <li>Configure your Docker host to point to your boot2docker image.</li>
</ol>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="k">$(</span>boot2docker shellinit<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>You’ll need to run this for every terminal session that invokes the <code>docker</code> or <code>docker-compose</code> command - better export this line into your <code>.zshrc</code> or <code>.bashrc</code>.</p>

<h2 id="creating-a-dockerfile">Creating a Dockerfile</h2>

<p>Let’s start by creating a Dockerfile for this app. This specifies the base dependencies for our Rails application. We will need:</p>

<ul>
  <li>Ruby 2.2 - for our Rails instance</li>
  <li>NodeJS and NPM - for installation of Karma, jshint, and other JS dependencies.</li>
  <li>MySQL client - for ActiveRecord tasks</li>
  <li>PhantomJS - for executing JS-based tests</li>
  <li>vim - for inspecting and editing files within our container</li>
</ul>

<p>Create a <code>Dockerfile</code> from within your Rails app directory.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">FROM ruby:2.2.0
</span><span class="line">RUN apt-get update -qq <span class="o">&amp;&amp;</span> apt-get install -y build-essential nodejs npm nodejs-legacy mysql-client vim
</span><span class="line">RUN npm install -g phantomjs
</span><span class="line">
</span><span class="line">RUN mkdir /myapp
</span><span class="line">
</span><span class="line">WORKDIR /tmp
</span><span class="line">COPY Gemfile Gemfile
</span><span class="line">COPY Gemfile.lock Gemfile.lock
</span><span class="line">RUN bundle install
</span><span class="line">
</span><span class="line">ADD . /myapp
</span><span class="line">WORKDIR /myapp
</span><span class="line">RUN <span class="nv">RAILS_ENV</span><span class="o">=</span>production bundle <span class="nb">exec </span>rake assets:precompile --trace
</span><span class="line">CMD <span class="o">[</span><span class="s2">&quot;rails&quot;</span>,<span class="s2">&quot;server&quot;</span>,<span class="s2">&quot;-b&quot;</span>,<span class="s2">&quot;0.0.0.0&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>Let’s start by breaking this up line-by-line:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">FROM ruby:2.2.0
</span></code></pre></td></tr></table></div></figure>
<p>The <a href="https://docs.docker.com/reference/builder/#from"><code>FROM</code></a> directive specifies the <a href="https://registry.hub.docker.com/u/library/ruby/"><code>library/ruby</code> base image from Docker Hub</a>, and uses the <code>2.2.0</code> tag, which corresponds to the Ruby 2.2.0 runtime.</p>

<p>From here on, we are going to be executing commands that will build on this reference image.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">RUN apt-get update -qq <span class="o">&amp;&amp;</span> apt-get install -y build-essential nodejs npm nodejs-legacy mysql-client vim
</span><span class="line">RUN npm install -g phantomjs
</span></code></pre></td></tr></table></div></figure>

<p>Each <a href="https://docs.docker.com/reference/builder/#run"><code>RUN</code></a> command builds up the image, installing specific application dependencies and setting up the environment. Here we install our app dependencies both from <code>apt</code> and <code>npm</code>.</p>

<h3 id="an-aside-on-how-a-docker-image-is-built">An aside on how a Docker image is built</h3>

<p>One of the core concepts in Docker is the concept of “layers”. Docker runs on operating systems that support layering filesystems such as <code>aufs</code> or <code>btrfs</code>. Changes to the filesystem can be thought of as atomic operations that can be rolled forward or backwards.</p>

<p>This means that Docker can effectively store its images as snapshots of each other, much like Git commits. This also has implications as to how we can build up and cache copies of the container as we go along.</p>

<p>The Dockerfile can be thought of as a series of rolling incremental changes to a base image - each command builds on top of the line before. This allows Docker to quickly rebuild changes to the reference image by understanding which lines have changed - and not rebuild the image from scratch each time.</p>

<p>Keep these concepts in mind as we talk about speeding up your Docker build in the following section.</p>

<h3 id="fast-docker-builds-by-caching-your-gemfiles">Fast Docker builds by caching your Gemfiles</h3>

<p>The following steps install the required Ruby gems for Bundler, within your app container:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">WORKDIR /tmp
</span><span class="line">COPY Gemfile Gemfile
</span><span class="line">COPY Gemfile.lock Gemfile.lock
</span><span class="line">RUN bundle install
</span></code></pre></td></tr></table></div></figure>

<p>Note how we sneak the gems into <code>/tmp</code>, then run the <code>bundle install</code> which downloads and installs gems into Bundler’s <code>vendor/bundle</code> directory. This is a cache hack - whereas in the past we would have kept the <code>Gemfile</code>s in with the rest of the application directory in <code>/myapp</code>.</p>

<p>Keeping Gemfiles inline with the app would have meant that the entire <code>bundle install</code> command would have been re-run on each <code>docker-compose build</code> – without any caching – due to the constant change in the code in the <code>/myapp</code> directory.</p>

<p>By separating out the Gemfiles into their own directory, we logically separate the Gemfiles, which are far less likely to change, from the app code, which are far more likely to change. This reduces the number of times we have to wait for a clean <code>bundle install</code> to complete.</p>

<p>HT: <a href="http://ilikestuffblog.com/2014/01/06/how-to-skip-bundle-install-when-deploying-a-rails-app-to-docker/">Brian Morearty: “How to skip bundle install when deploying a Rails app to Docker”</a></p>

<h3 id="adding-the-app">Adding the app</h3>

<p>Finally, we finish our Dockerfile by adding our current app code to the working directory.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">ADD . /myapp
</span><span class="line">WORKDIR /myapp
</span><span class="line">RUN <span class="nv">RAILS_ENV</span><span class="o">=</span>production bundle <span class="nb">exec </span>rake assets:precompile --trace
</span><span class="line">CMD <span class="o">[</span><span class="s2">&quot;rails&quot;</span>,<span class="s2">&quot;server&quot;</span>,<span class="s2">&quot;-b&quot;</span>,<span class="s2">&quot;0.0.0.0&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>This links the contents of the app directory on the host to the  <code>/myapp</code> directory within the container.</p>

<p>Note that we precompile all our assets before the container boots up - this ensures that the container is preloaded and ready to run and jives with Docker tenets that a container should be the same container that runs in development, test, and production environments.</p>

<h2 id="setting-up-docker-compose">Setting up Docker Compose</h2>

<p>Now that we’ve defined a <code>Dockerfile</code> for booting our Rails app, we turn to the Compose piece that orchestrates the linking phase between the Rails app and its dependencies - in this case, the DB.</p>

<p>A <code>docker-compose.yml</code> file automatically configures our application ecosystem. Here, it defines our Rails container and its db container:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="l-Scalar-Plain">web</span><span class="p-Indicator">:</span>
</span><span class="line">  <span class="l-Scalar-Plain">build</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">.</span>
</span><span class="line">  <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class="line">    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">.:/myapp</span>
</span><span class="line">  <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class="line">    <span class="p-Indicator">-</span> <span class="s">&quot;3000:3000&quot;</span>
</span><span class="line">  <span class="l-Scalar-Plain">links</span><span class="p-Indicator">:</span>
</span><span class="line">    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">db</span>
</span><span class="line">  <span class="l-Scalar-Plain">env_file</span><span class="p-Indicator">:</span>
</span><span class="line">    <span class="p-Indicator">-</span> <span class="s">&#39;.env.web&#39;</span>
</span><span class="line"><span class="l-Scalar-Plain">db</span><span class="p-Indicator">:</span>
</span><span class="line">  <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">library/mysql:5.6.22</span>
</span><span class="line">  <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class="line">    <span class="p-Indicator">-</span> <span class="s">&quot;13306:3306&quot;</span>
</span><span class="line">  <span class="l-Scalar-Plain">env_file</span><span class="p-Indicator">:</span>
</span><span class="line">    <span class="p-Indicator">-</span> <span class="s">&#39;.env.db&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<p>A simple:</p>

<pre><code>$ docker-compose up
</code></pre>

<p>will spin up both the <code>web</code> and <code>db</code> instances.</p>

<p>One of the most powerful tools of using Docker Compose is the ability to abstract away the configuration of your server, no matter whether it is running as a development container on your computer, a test container on CI, or on your production Docker host.</p>

<p>The directive:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="l-Scalar-Plain">links</span><span class="p-Indicator">:</span>
</span><span class="line">  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">db</span>
</span></code></pre></td></tr></table></div></figure>

<p>will add an entry for <code>db</code> into the Rails’ container’s <code>/etc/hosts</code>, linking the hostname to the correct container. This allows us to write our database.yml like so:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="c1"># config/database.yml</span>
</span><span class="line"><span class="l-Scalar-Plain">development</span><span class="p-Indicator">:</span> <span class="nl">&amp;default</span>
</span><span class="line">  <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">db</span>
</span></code></pre></td></tr></table></div></figure>

<p>Another important thing to note is the <code>volumes</code> configuration:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="c1"># docker-compose.yml</span>
</span><span class="line"><span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class="line">  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">.:/myapp</span>
</span></code></pre></td></tr></table></div></figure>

<p>This mounts the current directory <code>.</code> on the host Mac to the <code>/myapp</code> directory in the container. This allows us to make live code changes on the host filesystem and see code changes reflected in the container.</p>

<p>Also note that we make use of Compose’s <code>env_file</code> directive, which allows us to specify environment variables to inject into the container at runtime:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="l-Scalar-Plain">env_file</span><span class="p-Indicator">:</span>
</span><span class="line">  <span class="p-Indicator">-</span> <span class="s">&#39;.env.web&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<p>A peek into <code>.env.web</code> shows:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="l-Scalar-Plain">PORT=3000</span>
</span><span class="line"><span class="l-Scalar-Plain">PUMA_WORKERS=1</span>
</span><span class="line"><span class="l-Scalar-Plain">MIN_THREADS=4</span>
</span><span class="line"><span class="l-Scalar-Plain">MAX_THREADS=16</span>
</span><span class="line"><span class="l-Scalar-Plain">SECRET_KEY_BASE=&lt;Rails secret key&gt;</span>
</span><span class="line"><span class="l-Scalar-Plain">AWS_REGION=us-west-2</span>
</span><span class="line"><span class="l-Scalar-Plain"># ...</span>
</span></code></pre></td></tr></table></div></figure>

<p>Note that the <code>env_file</code> is powerful in that it allows us to swap out environment configurations when you deploy and run your containers. Perhaps your container needs separate configurations on dev than when on CI, or when deployed to staging or on production.</p>

<h2 id="creating-containers-and-booting-them-up">Creating containers and booting them up.</h2>

<p>Now it’s time to assemble the container. From within the Rails app, run:</p>

<pre><code>$ docker-compose build
</code></pre>

<p>This downloads and builds the containers that your web app and your db will live in, linking them up. You will need to re-run the <code>docker-compose build</code> command every time you change the <code>Dockerfile</code> or <code>Gemfile</code>.</p>

<h2 id="running-your-app-in-containers">Running your app in containers</h2>

<p>You can bring up your Rails server and associated containers by running:</p>

<pre><code>$ docker-compose up
</code></pre>

<p>This is a combination of build, link, and start-services command for<br />
each container. You should see output that indicates that both our <code>web</code> and <code>db</code> containers, as configured in the <code>docker-compose.yml</code> file, are booting up.</p>

<h2 id="development-workflow">Development workflow</h2>

<p>I was pleasantly surprised to discover that developing with Docker added very little overhead to the development process. In fact, most commands that you would run for Rails simply needed to be prepended with a <code>docker-compose run web</code>.</p>

<table>
  <thead>
    <tr>
      <th>When you want to run:</th>
      <th>With Docker Compose, you would run:</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>bundle install</code></td>
      <td><code>docker-compose run web bundle install</code></td>
    </tr>
    <tr>
      <td><code>rails s</code></td>
      <td><code>docker-compose run web rails s</code></td>
    </tr>
    <tr>
      <td><code>rspec spec/path/to/spec.rb</code></td>
      <td><code>docker-compose run web rspec spec/path/to/spec.rb</code></td>
    </tr>
    <tr>
      <td><code>RAILS_ENV=test rake db:create</code></td>
      <td><code>docker-compose run -e RAILS_ENV=test web rake db:create</code></td>
    </tr>
    <tr>
      <td><code>tail -f log/development.log</code></td>
      <td><code>docker-compose run web tail -f log/development.log</code></td>
    </tr>
  </tbody>
</table>

<h2 id="protips">Protips</h2>

<p>Here are some nice development tricks I found useful when working with Docker:</p>

<ul>
  <li>Add a <code>dockerhost</code> entry to your <code>/etc/hosts</code> file so you can visit <code>dockerhost</code> from your browser.</li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>boot2docker ip
</span><span class="line">192.168.59.104
</span></code></pre></td></tr></table></div></figure>

<p>Then add the IP to your <code>/etc/hosts</code></p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">192.168.59.104  dockerhost
</span></code></pre></td></tr></table></div></figure>

<p>Now you can pull up your app from <code>dockerhost:3000</code>:</p>

<p><img src="http://i.imgur.com/5eqNJqN.png" alt="Screenshot of your URL bar" /></p>

<ul>
  <li>
    <p>Debugging containers with <code>docker exec</code></p>

    <p>Sometimes you need to get inside a container to see what’s <em>really</em> happening. Perhaps you need to test whether a port is truly open, or verify that a process is truly running. This can be accomplished by grabbing the container ID with a <code>docker ps</code>, then passing that ID into the <code>docker exec</code> command:</p>
  </li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>docker ps
</span><span class="line">CONTAINER ID        IMAGE
</span><span class="line">301fa6331388        myrailsapp_web:latest
</span><span class="line"><span class="nv">$ </span>docker <span class="nb">exec</span> -it 301fa6331388 /bin/bash
</span><span class="line">root@301fa6331388:/myapp#
</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>Showing environment variables in a container with <code>docker-compose run web env</code></li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>docker-compose run web env
</span><span class="line"><span class="nv">AWS_SECRET_KEY</span><span class="o">=</span>
</span><span class="line"><span class="nv">MAX_THREADS</span><span class="o">=</span>16
</span><span class="line"><span class="nv">MIN_THREADS</span><span class="o">=</span>4
</span><span class="line"><span class="nv">AWS_REGION</span><span class="o">=</span>us-west-2
</span><span class="line"><span class="nv">BUNDLE_APP_CONFIG</span><span class="o">=</span>/usr/local/bundle
</span><span class="line"><span class="nv">HOME</span><span class="o">=</span>/root
</span><span class="line"><span class="c">#...</span>
</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>
    <p>Running an interactive debugger (like <a href="http://pryrepl.org/">pry</a>) in your Docker container</p>

    <p>It takes a little extra work to get Docker to allow interactive terminal debugging with tools like <code>byebug</code> or <code>pry</code>. Should you desire to start your web server with debugging capabilities, you will need to use the <code>--service-ports</code> flag with the <code>run</code> command.</p>
  </li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>docker-compose run --service-ports web
</span></code></pre></td></tr></table></div></figure>

<p>This works due to two internal implementations of <code>docker-compose run</code>:</p>

<ul>
  <li><code>docker-compose run</code> creates a TTY session for your app to connect to, allowing interactive debugging. The default <code>docker-compose up</code> command does not create a TTY session.</li>
  <li>The <code>run</code> command does not map ports to the Docker host by default. The <code>--service-ports</code> directive maps the container’s ports to the host’s ports, allowing you to visit the container from your web browser.</li>
</ul>

<ol>
  <li>Use <code>slim</code> images when possible on production</li>
</ol>

<p>Oftentimes, your base image will come supplied with a <code>-slim</code> variant on Docker Hub. This usually means that the image maintainer has supplied a trimmed-down version of the container for you to use with source code and build-time files stripped and removed. You can oftentimes shave a couple hundred megabytes off your resulting image – we did when we switched our <code>ruby</code> image from <code>2.2.1</code> to <code>2.2.1-slim</code>. This results in faster deployment times due to less network I/O from the registry to the deployment target.</p>

<h2 id="gotchas">Gotchas</h2>

<ul>
  <li>
    <p>Remember that your app runs in containers - so every time you do a <code>docker-compose run</code>, remember that Compose is spinning up entirely new containers for your code <strong>but only if the containers are not up already, in which case they are linked to that (running) container</strong>.</p>

    <p>This means that it’s possible that you’ve spun up multiple instances of your app without thinking about it - for example, you may have a <code>web</code> and <code>db</code> container already up from a <code>docker-compose up</code> command, and then in a separate terminal window you run a <code>docker-compose run web rails c</code>. That spins up <em>another</em> <code>web</code> container to execute the command, but then links that container with the pre-launched <code>db</code> container.</p>
  </li>
  <li>
    <p>There is a small but noticeable performance penalty running through both the VirtualBox VM and docker. I’ve generally noticed waiting a few extra seconds when starting a Rails environment. My overall experience has been that the penalty has not been large enough to be painful.</p>
  </li>
</ul>

<h2 id="try-it-out">Try it out</h2>

<p>Give this a shot and let me know how Docker has been working for you. What have your experiences been? What are ways in which you’ve been able to get your Docker workflow smoother? Share in the comments below.</p>

<h3 id="coming-up-integration-with-ci-and-deployment">Coming up: integration with CI and deployment.</h3>

<p>In upcoming blog posts, we will investigate how to use the power of Docker Compose to test and build your containers in a CI-powered workflow, push to Docker registries, and deploy to production. Stay tuned!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Explorations in logic programming]]></title>
		
		<link href="http://www.g9labs.com/2014/11/29/explorations-in-logic-programming/"/>
		<updated>2014-11-29T16:40:00-08:00</updated>
		<id>http://www.g9labs.com/2014/11/29/explorations-in-logic-programming</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Out of <a href="https://github.com/andrewhao/storybook">Storybook</a>, a side project I’ve been doing for a friend, I had the opportunity to model the problem domain as a constraint satisfaction problem (CSP). It goes:</p>

<blockquote>
  <p>A set of students are assigned a book a week. Write plan generator to create a set of student-book assignments for that week, given the following constraints:</p>

  <ul>
    <li>All students must receive a book.</li>
    <li>Each book may only be assigned to one student at a time.</li>
    <li>A student may not be assigned a book s/he has received before.</li>
  </ul>
</blockquote>

<p>Being that this was a Rails app, I put <a href="https://github.com/andrewhao/storybook">Amb</a>, a Ruby-based CSP solver, to use. Amb is derived off <a href="">Jim Weirich’s original source code</a>, implementing a simple backtracking algorithm. (More <a href="http://community.schemewiki.org/?amb">interesting reading on the original idea</a> behind the <code>amb</code> operator, proposed in a <a href="http://www-formal.stanford.edu/jmc/basis1.pdf">paper</a> by LISP founder John McCarthy in 1963.)</p>

<p>Not having written any CSP logic since my university days, I tried to come up with a naive solution. It goes something like this:</p>

<figure class="code"><figcaption><span>assignment_problem_1.rb</span><a href="https://github.com/andrewhao/storybook/blob/8bb03101d46472e36ee400b79c30d941d3a4bd39/lib/assignment_problem.rb">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">AssignmentProblem</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">solve</span>
</span><span class="line">    <span class="c1"># Generates the cross product of sids and bids.</span>
</span><span class="line">    <span class="n">spaces</span> <span class="o">=</span> <span class="n">student_ids</span><span class="o">.</span><span class="n">product</span><span class="p">(</span><span class="n">bag_ids</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># Now generate combinations of those uniques</span>
</span><span class="line">    <span class="n">full_solution_space</span> <span class="o">=</span> <span class="n">spaces</span><span class="o">.</span><span class="n">permutation</span><span class="p">(</span><span class="n">student_ids</span><span class="o">.</span><span class="n">count</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># Assign those to the CSP</span>
</span><span class="line">    <span class="n">plan</span> <span class="o">=</span> <span class="n">solver</span><span class="o">.</span><span class="n">choose</span><span class="p">(</span><span class="o">*</span><span class="n">full_solution_space</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">solver</span><span class="o">.</span><span class="n">assert</span> <span class="n">all_students_have_bags</span><span class="p">(</span><span class="n">plan</span><span class="p">)</span>
</span><span class="line">    <span class="n">solver</span><span class="o">.</span><span class="n">assert</span> <span class="n">assigned_bags_are_unique</span><span class="p">(</span><span class="n">plan</span><span class="p">)</span>
</span><span class="line">    <span class="n">solver</span><span class="o">.</span><span class="n">assert</span> <span class="n">assigned_bags_without_student_repeats</span><span class="p">(</span><span class="n">plan</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">plan</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Well this would work for 2 students and 2 bags, 3 and 3, 4 and 4, but would blow up and overflow the stack when we got to 5 students and 5 bags. Why? I was forcing Ruby to generate the full solution space before starting the CSP search problem:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">student_ids</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:s1</span><span class="p">,</span> <span class="ss">:s2</span><span class="o">]</span>
</span><span class="line"><span class="n">bag_ids</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:b1</span><span class="p">,</span> <span class="ss">:b2</span><span class="o">]</span>
</span><span class="line"><span class="c1"># Modeled as: the complete solution space of assignments</span>
</span><span class="line"><span class="n">spaces</span> <span class="o">=</span> <span class="n">student_ids</span><span class="o">.</span><span class="n">product</span><span class="p">(</span><span class="n">bag_ids</span><span class="p">)</span>
</span><span class="line"><span class="c1"># =&gt; [[:s1, :b1], [:s1, :b2], [:s2, :b1], [:s2, :b2]]</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then I was taking that cross product and brute-force generating all possible permutations internal to that:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">spaces</span><span class="o">.</span><span class="n">permutation</span><span class="p">(</span><span class="n">student_ids</span><span class="o">.</span><span class="n">count</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>
</span><span class="line"><span class="c1"># =&gt; [[[:s1, :b1], [:s1, :b2]], [[:s1, :b1], [:s2, :b1]],</span>
</span><span class="line"><span class="c1">#     [[:s1, :b1], [:s2, :b2]], [[:s1, :b2], [:s1, :b1]],</span>
</span><span class="line"><span class="c1">#     [[:s1, :b2], [:s2, :b1]], [[:s1, :b2], [:s2, :b2]],</span>
</span><span class="line"><span class="c1">#     [[:s2, :b1], [:s1, :b1]], [[:s2, :b1], [:s1, :b2]],</span>
</span><span class="line"><span class="c1">#     [[:s2, :b1], [:s2, :b2]], [[:s2, :b2], [:s1, :b1]],</span>
</span><span class="line"><span class="c1">#     [[:s2, :b2], [:s1, :b2]], [[:s2, :b2], [:s2, :b1]]]</span>
</span></code></pre></td></tr></table></div></figure>

<p>The most obvious thing that stood out to me like a sore thumb was how I wasn’t simply trusting the constraint-based nature of the problem and expressing the problem in terms of the constraints, instead of attempting to imperatively generate the solution. Usage of <code>Enumerable#permutation</code> resulted in an <em>O(n!)</em> algorithm, which is unacceptable. Back to the drawing board:</p>

<figure class="code"><figcaption><span>assignment_problem_2.rb</span><a href="https://github.com/andrewhao/storybook/blob/e2dd94add2b5949d87968ab650a31b4bdfb9e8a2/lib/csp/assignment_problem.rb">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">AssignmentProblem</span>
</span><span class="line">  <span class="c1"># Generates tuples of student =&gt; bag assignments</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">solve</span>
</span><span class="line">    <span class="n">student_ids</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">sid</span><span class="o">|</span>
</span><span class="line">      <span class="n">bid</span> <span class="o">=</span> <span class="n">solver</span><span class="o">.</span><span class="n">choose</span><span class="p">(</span><span class="o">*</span><span class="n">bag_ids</span><span class="p">)</span>
</span><span class="line">      <span class="n">partial_plan</span><span class="o">[</span><span class="n">sid</span><span class="o">]</span> <span class="o">=</span>  <span class="n">bid</span>
</span><span class="line">      <span class="n">solver</span><span class="o">.</span><span class="n">assert</span> <span class="n">assigned_bags_are_unique</span><span class="p">(</span><span class="n">partial_plan</span><span class="p">)</span>
</span><span class="line">      <span class="n">solver</span><span class="o">.</span><span class="n">assert</span> <span class="n">assigned_bags_without_student_repeats</span><span class="p">(</span><span class="n">partial_plan</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="n">partial_plan</span><span class="o">.</span><span class="n">to_a</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Note the main difference here is how I’ve re-tooled the solver to assign variables one at a time (in L5) and check constraints after each assignment. This simplifies the domain of the problem as a graph search and helps us more easily reason about this program.</p>

<h3 id="further-explorations">Further explorations</h3>

<p>Follow my <a href="https://www.github.com/andrewhao/csp-solvers/">csp-solvers</a> project, where I attempt to rewrite this in Prolog and Clojure in an attempt to see how language affects how we reason about problems like these. It’s gonna be fun.</p>

<h3 id="further-reading">Further reading</h3>
<ul>
  <li><a href="http://www.amazon.com/Artificial-Intelligence-Modern-Approach-3rd/dp/0136042597/ref=sr_1_1?ie=UTF8&amp;qid=1417214576&amp;sr=8-1&amp;keywords=9780136042594">Artificial Intelligence: A Modern Approach (3rd Edition)</a></li>
  <li>http://aima.cs.berkeley.edu/2nd-ed/newchap05.pdf</li>
  <li><a href="https://www.ruby-forum.com/topic/57768">Ruby Forum – Using Amb</a></li>
  <li><a href="http://community.schemewiki.org/?amb">SchemeWiki: amb</a></li>
</ul>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[My own robot training buddy.]]></title>
		
		<link href="http://www.g9labs.com/2014/11/15/my-own-robot-training-buddy/"/>
		<updated>2014-11-15T10:03:00-08:00</updated>
		<id>http://www.g9labs.com/2014/11/15/my-own-robot-training-buddy</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>As an ultra runner, I am really into the mountains. As a software engineer, I’m really into data. So naturally, I’m interested in the intersection of both.</p>

<p>I’ve particularly been interested in how systems like <a href="http://www.strava.com">Strava</a> work, especially when they quantify what is known as a “Suffer Score”, a single number denoting the amount of training stress (a.k.a. suffering) you put yourself through in a workout.</p>

<p>How does a track workout compare to a long day on the trails? Which is tougher: a 5m tempo road run in and around my neighborhood, or a tough 2m climb into a local regional park?</p>

<h2 id="data-in">Data in…</h2>

<p>I first attacked the problem of getting data off of my phone. I record my GPX tracks in <a href="http://runmeter.com/">Runmeter</a>, a fantastic iPhone application with all sorts of metrics and data export capabilities. What I wanted was a seamless way to get the data off my phone without fuss after a hard workout.</p>

<p>The application has a nifty feature in which it can automatically send an email to an email address after a workout is completed.</p>

<p>I wrote an <a href="https://github.com/andrewhao/velocitas">email ingester, Velocitas</a>, with the help of <a href="http://cloudmailin.com/">Cloudmailin</a>, which fires off a POST request to the Node application. Velocitas does the following:</p>

<ul>
  <li><code>curl</code>s and downloads the GPX link embedded in the email.</li>
  <li>Saves the GPX file to a linked Dropbox account.</li>
  <li>Republishes the GPX file to a linked Strava account.</li>
</ul>

<h2 id="deriving-the-training-stress-score">Deriving the Training Stress Score</h2>

<p>Next up: I wanted to do a quick and dirty implementation of the (run-based) Training Stress Score. <a href="https://github.com/andrewhao/stressfactor">Stressfactor</a>, a Ruby gem, is what came out of it.</p>

<p>It implements the rTSS as detailed in <a href="http://home.trainingpeaks.com/blog/article/running-training-stress-score-rtss-explained">this article</a>.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="p">(</span><span class="n">duration_seconds</span> <span class="o">*</span> <span class="n">normalized_graded_pace</span> <span class="o">*</span> <span class="n">intensity_factor</span><span class="p">)</span> <span class="o">/</span>
</span><span class="line"><span class="p">(</span><span class="n">functional_threshold_pace</span> <span class="o">*</span> <span class="mi">3600</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span>
</span></code></pre></td></tr></table></div></figure>

<p>Stressfactor is a higher-order tookit for deriving meaning from GPX tracks, so it, at the moment, attempts to calculate the stress score and grade adjusted pace.</p>

<p>The data still needs validation, so I’m eager to run it on my data set of GPX tracks from the past years.</p>

<h2 id="generating-reports">Generating reports</h2>

<p>I’m working on this part right now – I need to nicely display a report from my workout history in Dropbox and display per-GPX. I’ve started the project – <a href="https://github.com/andrewhao/stressreport">Stressreport</a>.</p>

<h2 id="some-things-ive-learned-and-am-learning">Some things I’ve learned and am learning</h2>

<ul>
  <li>The human body is complex, and cannot be <a href="http://fellrnr.com/wiki/Modeling_Human_Performance">easily modeled</a> without sufficient data. That said, what I’m doing now may be sufficient for basic training data.</li>
  <li>The nature of parsing and generating higher-order stats from raw data may lend itself well to experimentation with functional languages. I’m interested in trying to reimplement Stressfactor in Scala, or a functional equivalent.</li>
  <li>Deploying all my apps on Heroku’s free tier may actually be an interesting start to building a microservice architecture – with the space limitations on Heroku, I’m forced to build new features on new services. Call it cheapskate architecture.</li>
</ul>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Recap: QCon SF 2014]]></title>
		
		<link href="http://www.g9labs.com/2014/11/05/qcon-sf-2014/"/>
		<updated>2014-11-05T19:01:00-08:00</updated>
		<id>http://www.g9labs.com/2014/11/05/qcon-sf-2014</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Blurb sent me off to QCon SF 2014 for three days.</p>

<h2 id="notes">Notes</h2>

<p>I took a series of notes each day in attendance:</p>

<ul>
  <li><a href="http://www.g9labs.com/notes/2014-11-03-qconsf-day-one.html">Day One: Architectures, Functional</a></li>
  <li><a href="http://www.g9labs.com/notes/2014-11-04-qconsf-day-two.html">Day Two: Rx Systems, API Platforms</a></li>
  <li><a href="http://www.g9labs.com/notes/2014-11-05-qconsf-day-three.html">Day Three: Microservices, Culture</a></li>
</ul>

<h2 id="summary">Summary</h2>

<ul>
  <li>Big trends in continuous delivery and deployment – deploy more often, smaller feedback loops</li>
  <li>A lot of emphasis on event driven architectures + microservices. Lots of emphasis on DDD as a design tool.</li>
  <li>Reactive systems with functional implementations were widely discussed as a scaling tool (backpressure-sensitive) and as a coordination tool between multiple async services.</li>
  <li>Big data/realtime streaming talks were interesting – my personal experience with them is limited, but it seems there is a debate over the merits of existing Lambda architecture practice.</li>
  <li>A lot of talk about microservice orchestration tools – acknowledging the pain of configuration and management of many services.</li>
  <li>Scala got a lotttt of attention. Probably because of its presence in bigger companies like Netflix, Twitter, LinkedIn. Wonder what smaller startups are using.</li>
  <li>Web Components were a big upcoming trend in frontend technologies. Strong modularization of views + behaviors in HTML documents.</li>
</ul>

<h2 id="questions">Questions</h2>

<ul>
  <li>If I could do a startup over again, would I begin an app in Rails? Where is the sweet spot for that sort of application architecture?</li>
  <li>How can I design systems such that they can be extractible into focused components/services as early as possible?</li>
  <li>How can we plan for failures (<a href="http://en.wikipedia.org/wiki/Fault_injection">fault injection</a>)?</li>
  <li>How does one implement change in software engineering organizations? Bottom-up (organic initiatives bubbling up through management) vs top-down (management/software leaders direct org to implement).</li>
  <li>How are we doing with encouraging women and minorities who traditionally are underrepresented in our industry?</li>
  <li>What are places in our hiring funnels that, unbeknownst to us, may be turning away or detracting women and minorities?</li>
</ul>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Conway's Law for humans]]></title>
		
		<link href="http://www.g9labs.com/2014/11/01/conways-law-for-humans/"/>
		<updated>2014-11-01T18:38:00-07:00</updated>
		<id>http://www.g9labs.com/2014/11/01/conways-law-for-humans</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>If you’re familiar with <a href="http://en.wikipedia.org/wiki/Conway's_law">Conway’s Law</a>, it states:</p>

<blockquote>
  <p>Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization’s communication structure.</p>
</blockquote>

<p>Or in layman’s terms, your software systems reflect the structure of the teams that create them.</p>

<p>Think about it – do your teams prefer to do everything themselves? Or do they ask for help from other teams? In general, as a team, we prefer to have as little dependencies as possible. The work that the engineer has to do to send an email, or wait for work from another team (like an API change or design change) is usually time-consuming and burdensome. Therefore, it is not (usually) in the team’s best interests to cross silos and ask for help from others. Your teams, if they look like this, tend to work in codebases that are generally monolithic and wholly owned by the team.</p>

<p>It’s not wrong, or it’s not bad, it’s just a sociological observation. This is why companies like Spotify, Netflix or Amazon have embraced Conway’s Law and changed their organizations to match the  microservice-driven architecture they want. Small teams work on small codebases and are empowered to make the changes they need.</p>

<h3 id="a-corollary-and-some-observations-about-your-company-culture">A corollary and some observations about your company culture.</h3>

<p>Here’s a corollary, which I’ve heard in various shapes and forms. Paraphrased:</p>

<blockquote>
  <p>An organization’s structure tends to pattern after its leaders’ communication patterns.</p>
</blockquote>

<p>I’ve been pushing an effort to unify our company’s frontend styles and UX into a unified framework in an attempt to standardize the look and feel of the site.</p>

<p>However, in working with our designers, I realized that they weren’t talking to each other. Designers in one department had opposing design aesthetics from designers in another. This was causing problems in the code, because the frontend framework itself was becoming fragmented. You could see it in the code. Version A of the styleguide went into Department A’s products. Version B of the styleguide went to Department B’s products.</p>

<p>In this case, as we kept rolling out this framework, I realized our organization had no single owner for the design language of the site. Why? I had to wonder if it had to do with some deeper communication issues between the heads of the two departments.</p>

<p>Code can be a good canary to organizational issues, and call out larger human issues at hand. In this case, Conway’s Law helps us root out and bring into the light structural concerns. Leaders can pay attention to these concerns and check themselves to become more open communicators.</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Mocks aren't stubs: mockist & classic testing]]></title>
		
		<link href="http://www.g9labs.com/2014/06/21/mocks-arent-stubs/"/>
		<updated>2014-06-21T17:55:00-07:00</updated>
		<id>http://www.g9labs.com/2014/06/21/mocks-arent-stubs</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>With the famed “TDD is dead” debate around the Rails community largely<br />
coming to an end, I found myself referencing Martin Fowler’s article,<br />
<a href="http://martinfowler.com/articles/mocksArentStubs.html">Mocks Aren’t Stubs</a> a good deal, trying to make sense of it in terms of how I write tests and code.</p>

<p>In this post I’m going to talk about mocking and stubbing and their<br />
roots, paraphrase Fowler in an attempt to explain their differences, and<br />
walk through a couple of code examples. In each case, I’m going to<br />
attempt to build this example out in Ruby and RSpec 3.</p>

<p>Let’s assume this implementation in our code for a <code>BookUpdater</code> object in Ruby. Its job is to call through its collaborating <code>ApiClient</code>, which wraps some aspect of an API that we want to call.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># Update a book&#39;s metadata in our systems.</span>
</span><span class="line"><span class="k">class</span> <span class="nc">BookUpdater</span>
</span><span class="line">  <span class="kp">attr_accessor</span> <span class="ss">:book</span><span class="p">,</span> <span class="ss">:api_client</span><span class="p">,</span> <span class="ss">:response</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">book</span><span class="p">,</span> <span class="n">api_client</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@book</span> <span class="o">=</span> <span class="n">book</span>
</span><span class="line">    <span class="vi">@api_client</span> <span class="o">=</span> <span class="n">api_client</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">updated?</span>
</span><span class="line">    <span class="o">!!</span><span class="n">response</span><span class="o">.</span><span class="n">success?</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">update!</span>
</span><span class="line">    <span class="n">response</span> <span class="o">=</span> <span class="n">api_client</span><span class="o">.</span><span class="n">call_update_api</span><span class="p">(</span><span class="n">book</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<h2 id="what-they-are">What they are</h2>

<h3 id="mocks">Mocks</h3>

<p>Mocks are fake objects that verify that they have received messages. In<br />
RSpec, we traditionally use the <code>mock</code> object utility to create these objects.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">api_client</span> <span class="o">=</span> <span class="n">mock</span><span class="p">(</span><span class="s1">&#39;api client&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">book</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">
</span><span class="line"><span class="n">expect</span><span class="p">(</span><span class="n">api_client</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:call_update_api</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="n">book</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">subject</span> <span class="o">=</span> <span class="no">BookUpdater</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">api_client</span><span class="p">,</span> <span class="n">book</span><span class="p">)</span>
</span><span class="line"><span class="n">subject</span><span class="o">.</span><span class="n">list!</span>
</span></code></pre></td></tr></table></div></figure>

<p>What’s happening here? RSpec creates a mock <code>api_client</code> object that will verify that, after the test case executes, it has received the <code>:call_update_api</code> message with the correct arguments.</p>

<p>The main point of this style of testing is <em>behavior verification</em> – that is, that your object is behaving correctly in relation with its collaborators.</p>

<h3 id="double">Double</h3>

<p>Let’s take a look at a <code>double</code> – also known as a <code>stub</code>. A <code>double</code> is a fake object that is set up to respond to a certain message with a pre-canned response, each time. Let’s take a look at how I would set up a test using doubles:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">api_client</span> <span class="o">=</span> <span class="n">double</span><span class="p">(</span><span class="s1">&#39;api client&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">response</span> <span class="o">=</span> <span class="n">double</span><span class="p">(</span><span class="s1">&#39;response&#39;</span><span class="p">,</span> <span class="ss">:success?</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span>
</span><span class="line"><span class="n">book</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">
</span><span class="line"><span class="n">allow</span><span class="p">(</span><span class="n">api_client</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:call_update_api</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="n">book</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class="line"><span class="n">expect</span><span class="p">(</span><span class="n">subject</span><span class="o">.</span><span class="n">update!</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">(</span><span class="n">subject</span><span class="p">,</span> <span class="ss">:updated?</span><span class="p">)</span><span class="o">.</span><span class="n">from</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>Okay, so what’s the big deal here? My test case still passes. Note that<br />
I had to change my code to focus its expectation on the <code>subject</code>’s<br />
state instead of the <code>api_client</code>.</p>

<p>The focus of using doubles is for <em>state verification</em> – that is, that so long as everybody around me is behaving according to their contracts, the test merely has to verify that internal object state changes correctly.</p>

<h3 id="a-third-way----real-objects">A third way – real objects</h3>

<p>I won’t cover this very much in depth, but with sufficiently simple objects, one could actually instantiate real objects instead of doubles, and test an object against all its collaborators. This is, in my experience, the most common experience of working in Rails + ActiveRecord applications.</p>

<h2 id="classic-vs-mockist-testing-different-strokes-for-different-folks">Classic vs Mockist testing: different strokes for different folks</h2>

<p>As we saw above, the key difference between the mock and the stub (the <code>double</code>). The focus of the test in the mock case is on the messages being sent to the collaborators. The focus of the test when using the double is on the the <code>subject</code> under test (SUT).</p>

<p>Mocks and stubs/doubles are tools that we can use under the larger umbrellas of two TDD philosophical styles: <em>classic</em> vs <em>mockist</em> styles.</p>

<h3 id="classic-tdd">Classic TDD</h3>

<ul>
  <li>Classic TDDists like using <code>double</code>s or real objects to test collaborators.</li>
  <li>From personal experience, testing classicly is oftentimes the path of least resistance. There isn’t expectation setup and verification that mockist testing requires of you.</li>
  <li>Classic TDD sometimes results in creating objects that reveal state – note how the <code>BookUpdater</code> needed to expose an <code>updated?</code> method.</li>
  <li>Setting up the state of the world prior to your test may be complex, requiring setting up all the objects in your universe. This can be a huge pain (has anybody ever had this problem with overcomplicated Rails models with spidery associations? Raise your hands…). Classicists may argue that the root cause here is not paying attention to your model architecture, and having too many associations is an antipattern. Alternatively, classicists oftentimes generate test factories (e.g. Rails’ FactoryGirl gem) to manage test setup.</li>
  <li>Tests tend to be treatable more like black boxes, testable under isolation (due to verifications on object state) and are more resistant to refactoring.</li>
</ul>

<h3 id="mockist-tdd">Mockist TDD</h3>

<ul>
  <li>Mockist TDD utilizes <code>mock</code>s to verify behavior between objects and collaborators.</li>
  <li>It can be argued to develop “purer” objects, that are mainly concerned with objects passing messages to each other. Fowler refers to these objects as preferring role-interfaces.</li>
  <li>These tests are easier to set up, as they don’t require setting up the state of the world prior to test invocation.</li>
  <li>Tests tend to be more coupled to implementation, and may be more difficult to refactor due to very specific requirements for message passing between collaborators.</li>
  <li>Fowler brings up a point where being a mockist means that your objects prefer to <a href="https://pragprog.com/articles/tell-dont-ask">Tell Don’t Ask</a>. A nice side effect of TDA is you generally can avoid Demeter violations.</li>
</ul>

<h2 id="in-conclusion">In conclusion</h2>

<p>In coming from a classic TDD background, I’ve oftentimes viewed mockist testing with some suspicion, particularly around how much work is involved to bring them about. Over the years, I’ve warmed up to the usage of mockist testing, but have not been diligent enough at doing pure driving TDD with mocks. In reviewing Fowler’s comments, I’m intruiged at the possibilities of mockist TDD in affecting system design, particularly in their natural inclinations toward <a href="http://martinfowler.com/bliki/RoleInterface.html">role interfaces</a>. I look forward to trying pure mockist TDD in a future project.</p>

<h4 id="further-reading">Further reading:</h4>
<ul>
  <li><a href="http://dannorth.net/introducing-bdd/">Dan North: “Introducing BDD”</a></li>
  <li><a href="http://jamesgolick.com/2010/3/10/on-mocks-and-mockist-testing.html">James Golick: “On Mocks and Mockist Testing”</a></li>
  <li><a href="http://jmock.org/oopsla2004.pdf">OOPSLA 2004: “Mock Roles, Not Objects”</a></li>
  <li><a href="http://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627">Amazon: “Growing Object Oriented Software, Guided by Tests”</a></li>
</ul>
]]>
		</content>
	</entry>
	
</feed>
