<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: amd | The Sweet Spot]]></title>
  <link href="http://www.g9labs.com/category/amd/atom.xml" rel="self"/>
  <link href="http://www.g9labs.com/"/>
  <updated>2018-03-13T21:12:28-07:00</updated>
  <id>http://www.g9labs.com/</id>
  <author>
    <name><![CDATA[Andrew Hao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Running Mocha tests with ES6/AMD modules]]></title>
    <link href="http://www.g9labs.com/2014/06/06/running-mocha-tests-with-es6-amd-modules/"/>
    <updated>2014-06-06T15:11:00-07:00</updated>
    <id>http://www.g9labs.com/2014/06/06/running-mocha-tests-with-es6-amd-modules</id>
    <content type="html"><![CDATA[<p>In one of my personal projects (<a href="https://github.com/andrewhao/chordmeister">Chordmeister</a>), I’ve been trying to<br />
upgrade the code to be written in <a href="http://wiki.ecmascript.org/doku.php?id=harmony:modules#export_declarations">ES6 modules</a> and transpile down to AMD modules with Square’s <a href="https://github.com/square/es6-module-transpiler">very excellent es6-module-transpiler project</a>.</p>

<p>Since I’ve already <a href="https://github.com/andrewhao/hendrix">updated</a> an Ember app of mine to try ES6, I figured it was high time to do it on another project.</p>

<h2 id="sorry-coffeescript-but-im-moving-on">Sorry Coffeescript, but I’m moving on.</h2>

<p>First problem: Coffeescript seems indecisive with respect to ES6<br />
support. In order to support <code>import</code> or <code>export</code> keywords, I had to<br />
wrap the statements in backticks, making the code look like this:</p>

<div class="language-coffeescript highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>`import ClassifiedLine from &quot;chordmeister/classified_line&quot;`
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>class Parser
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  # Implementation
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>`export default Parser`
</pre></div>
</div>
</div>

<p>Except this wasn’t being picked up by es6-module-transpiler, since<br />
Coffeescript wraps the entire declaration in a closure: I was<br />
finding myself having problems compiling from Coffeescript -&gt; ES5 JS -&gt; ES6 JS.</p>

<div class="language-javascript highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>define(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">chordmeister/parser</span><span style="color:#710">&quot;</span></span>,
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  [],
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  <span style="color:#080;font-weight:bold">function</span>() {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">use strict</span><span style="color:#710">&quot;</span></span>;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    (<span style="color:#080;font-weight:bold">function</span>() {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>      <span style="color:#777">// Oops, I wasn't transpiled!</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      <span style="color:#080;font-weight:bold">import</span> ClassifiedLine from <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">chordmeister/classified_line</span><span style="color:#710">'</span></span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>      <span style="color:#080;font-weight:bold">var</span> Parser;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>      Parser = (<span style="color:#080;font-weight:bold">function</span>() {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        <span style="color:#777">// Implementation</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>      }
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>      )();
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>      <span style="color:#777">// Oops, I wasn't transpiled!</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>      <span style="color:#080;font-weight:bold">export</span> <span style="color:#080;font-weight:bold">default</span> Parser;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      })()
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  });
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
</pre></div>
</div>
</div>

<p>So the first call: ditch Coffeescript. Write this in pure ES6.</p>

<div class="language-javascript highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span style="color:#080;font-weight:bold">import</span> ClassifiedLine from <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">chordmeister/classified_line</span><span style="color:#710">'</span></span>;
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span style="color:#080;font-weight:bold">var</span> Parser;
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>Parser = (<span style="color:#080;font-weight:bold">function</span>() {
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>  <span style="color:#777">// implementation</span>
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>})();
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>
<span class="line-numbers"><a href="#n8" name="n8">8</a></span><span style="color:#080;font-weight:bold">export</span> <span style="color:#080;font-weight:bold">default</span> Parser;
</pre></div>
</div>
</div>

<p>Which transpiled nicely to:</p>

<div class="language-javascript highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>define(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">chordmeister/parser</span><span style="color:#710">&quot;</span></span>, 
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  [<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">chordmeister/classified_line</span><span style="color:#710">&quot;</span></span>,<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">exports</span><span style="color:#710">&quot;</span></span>],
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>  <span style="color:#080;font-weight:bold">function</span>(__dependency1__, __exports__) {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">use strict</span><span style="color:#710">&quot;</span></span>;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span style="color:#080;font-weight:bold">var</span> ClassifiedLine = __dependency1__[<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">default</span><span style="color:#710">&quot;</span></span>];
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span style="color:#080;font-weight:bold">var</span> Parser;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    Parser = (<span style="color:#080;font-weight:bold">function</span>() {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>      <span style="color:#777">// Implementation</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    })();
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    __exports__[<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">default</span><span style="color:#710">&quot;</span></span>] = Parser;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    });
</pre></div>
</div>
</div>

<h2 id="next-up-adding-amd-support-in-mocha">Next up: adding AMD support in Mocha</h2>

<p>Okay, so we need to set up a few things to get Mocha playing well with RequireJS, the AMD loader.</p>

<p>Our plan of attach will be to leverage the generated AMD modules and load our tests up with them. We have the benefit of being able to specifically inject dependencies into our test suite.</p>

<p>The tricky parts will be:</p>

<h3 id="set-up-the-mocha-indexhtml-runner">Set up the Mocha index.html runner</h3>

<p>Install <code>mocha</code>, <code>require.js</code>, and <code>chai</code> via <code>bower</code>, then plug them into the harness:</p>

<p>``` html test/index.html<br />
&lt;!doctype html&gt;</p>
<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <title>Mocha Spec Runner</title>
    <link rel="stylesheet" href="../bower_components/mocha/mocha.css" />
</head>
<body>
    <div id="mocha"></div>
    <script src="../bower_components/mocha/mocha.js"></script>
    <script src="../bower_components/chai/chai.js"></script>
    <script data-main="test_helper" src="../bower_components/requirejs/require.js"></script>

</body>
</html>

<pre><code>
Note the references to `data-main="test_helper"`, which is require.js's way of determining its entry point after it loads.

### Set up a test runner.

``` javascript test/test_runner.js
// Configure and set up the tests.
require.config({
  baseUrl: "../build/"
})

// Load up the files to run against
var specs = [
  'chordmeister/chord_spec.js',
  'chordmeister/song_spec.js',
  'chordmeister/parser_spec.js',
  'chordmeister/classified_line_spec.js',
];

// Start up the specs.
require(specs, function(require) {
  mocha.setup('bdd');
  expect = chai.expect;
  // Why? Some async loading condition? Is there a callback I should be hooking into?
  setTimeout(function() {
    mocha.run();
  }, 100);
});
</code></pre>

<p>You’ll notice that I was having synchonicity issues between spec suite load and <code>mocha.run()</code>. Throwing everything back a few hundred ms seemed to have done the fix.</p>

<h2 id="amd-gotchas">AMD gotchas</h2>

<p>Pay attention to the <code>default</code> parameter that the module exports with. This is important to remember since native ES6 will allow you to directly import it with its native syntax:</p>

<div class="language-javascript highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span style="color:#080;font-weight:bold">import</span> Parser from <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">chordmeister/parser</span><span style="color:#710">&quot;</span></span>
</pre></div>
</div>
</div>

<p>But if you’re using RequireJS/AMD modules, you’ll need to explicitly call out the <code>default</code> namespace from the required module, so like so:</p>

<div class="language-javascript highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>require([<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">chordmeister/parser</span><span style="color:#710">&quot;</span></span>], <span style="color:#080;font-weight:bold">function</span>(parser) {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>  Parser = parser.<span style="color:#080;font-weight:bold">default</span>;
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>  <span style="color:#080;font-weight:bold">new</span> Parser() <span style="color:#777">// and do stuff.</span>
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>});
</pre></div>
</div>
</div>

<p>Let me know if you have any questions!</p>
]]></content>
  </entry>
  
</feed>
