<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: wisper | The Sweet Spot]]></title>
  <link href="http://www.g9labs.com/category/wisper/atom.xml" rel="self"/>
  <link href="http://www.g9labs.com/"/>
  <updated>2018-09-01T09:34:57-07:00</updated>
  <id>http://www.g9labs.com/</id>
  <author>
    <name><![CDATA[Andrew Hao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Evented Rails: Decoupling domains in Rails with Wisper pub/sub events]]></title>
    <link href="http://www.g9labs.com/2016/06/23/rails-pub-slash-sub-with-wisper-and-sidekiq/"/>
    <updated>2016-06-23T11:44:00-07:00</updated>
    <id>http://www.g9labs.com/2016/06/23/rails-pub-slash-sub-with-wisper-and-sidekiq</id>
    <content type="html"><![CDATA[<p>One common pattern in Domain-Driven Design is the use of publish/subscribe messaging to communicate between domains. When <a href="http://martinfowler.com/eaaDev/DomainEvent.html">Domain Events</a> are created from within a domain, other domains are able to subscribe to these events and take action within their own domains, respectively.</p>

<p>This is not a common pattern in Rails, particularly because of Ruby’s lack of language support for functional programming paradigms that exist in other languages. However, with a nifty framework and the help of Sidekiq, we can get just a little bit closer.</p>

<h3 id="what-is-a-domain-event">What is a Domain Event?</h3>

<p>A domain event is a recorded property in the system that tracks an action that the system performs, and the factors/properties that lead to its creation.</p>

<p>In the following examples, we are going to use the <a href="https://github.com/krisleech/wisper">Wisper</a> gem to implement domain events in our sample <a href="http://github.com/andrewhao/delorean">Delorean</a> app.</p>

<p>Imagine that we are writing an endpoint that our users will hit, indicating that they want to hail a time-traveling cab. Now the logic to hail a cab is rather complicated and lives in an entirely different area of the codebase, perhaps even in another application. How should we call the other code and ensure that our code is cleanly decoupled?</p>

<p>With our Domain-Driven powers, we’ve been smart enough to segregate our code into different subdomains and bounded contexts, denoted by these two Ruby modules <code>Ridesharing</code> and <code>DriverRouting</code>.</p>

<h2 id="example-1-in-process-pub-sub-event-modeling-with-a-service-object">Example 1: In-process pub-sub event modeling, with a service object.</h2>

<p>A simple way to use Wisper is to use it to implement your service objects with Wisper, calling the service from the controller.</p>

<div class="language-ruby highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="color:#080;font-weight:bold">module</span> <span style="color:#B06;font-weight:bold">Ridesharing</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  <span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">RidesController</span> &lt; <span style="color:#036;font-weight:bold">ApplicationController</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">post</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>      <span style="color:#777"># Hail a time-traveling Delorean:</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>      command = <span style="color:#036;font-weight:bold">HailDelorean</span>.new
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>      command.on(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">hailed</span><span style="color:#710">'</span></span>) { |driver|
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        render <span style="color:#606">text</span>: <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Hailed you a cab: </span><span style="background-color:hsla(0,0%,0%,0.07);color:black"><span style="font-weight:bold;color:#666">#{</span>driver<span style="font-weight:bold;color:#666">}</span></span><span style="color:#D20"> is arriving!</span><span style="color:#710">&quot;</span></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>      }
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>      .on(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">could_not_hail</span><span style="color:#710">'</span></span>) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        render <span style="color:#606">text</span>: <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Sorry, no dice.</span><span style="color:#710">&quot;</span></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>      }
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>      command.hail!(current_user)
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    <span style="color:#080;font-weight:bold">end</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  <span style="color:#080;font-weight:bold">end</span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>Note that the <code>HailDelorean</code> class has powers of event subscriptions now. Our calling code does not have to concern itself with the implementation details of the <code>HailDelorean</code> service - it merely needs to register handlers for the two possible outcomes, <code>hailed</code> and <code>could_not_hail</code>. Here’s how the service class is implemented:</p>

<div class="language-ruby highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="color:#080;font-weight:bold">module</span> <span style="color:#B06;font-weight:bold">Ridesharing</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  <span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">HailDelorean</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    include <span style="color:#036;font-weight:bold">Wisper</span>::<span style="color:#036;font-weight:bold">Publisher</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">hail!</span>(user)
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>      <span style="color:#777"># broadcast() is a Wisper method to fire an event</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      driver = find_driver(user)
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>      <span style="color:#080;font-weight:bold">if</span> driver
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        broadcast(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">hailed</span><span style="color:#710">'</span></span>, driver)
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>      <span style="color:#080;font-weight:bold">else</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        broadcast(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">could_not_hail</span><span style="color:#710">'</span></span>)
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>      <span style="color:#080;font-weight:bold">end</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">find_driver</span>(user)
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>      <span style="color:#777"># Here lies slow, complex domain logic</span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>      <span style="color:#036;font-weight:bold">DriverRouting</span>::<span style="color:#036;font-weight:bold">FindDriver</span>.new(user)
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    <span style="color:#080;font-weight:bold">end</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>  <span style="color:#080;font-weight:bold">end</span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span><span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<h3 id="handling-side-effects-in-subscriber-classes">Handling side effects in subscriber classes</h3>

<p>Other side-effects can subscribe to the <code>HailDelorean</code> events. Let’s say we want to fire an event to Segment analytics tracking. I can create a plain Ruby object that simply needs to implement a method with the same name as the event.</p>

<p>Let’s implement <code>hailed</code> and <code>could_not_hail</code> methods on this subscriber class:</p>

<div class="language-ruby highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">TrackSegmentAnalytics</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  <span style="color:#080;font-weight:bold">def</span> <span style="color:#069">self</span>.<span style="color:#06B;font-weight:bold">hailed</span>(driver)
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span style="color:#777"># fire analytics event to Segment</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>  <span style="color:#080;font-weight:bold">end</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>  <span style="color:#080;font-weight:bold">def</span> <span style="color:#069">self</span>.<span style="color:#06B;font-weight:bold">could_not_hail</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span style="color:#777"># fire analytics event to Segment</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  <span style="color:#080;font-weight:bold">end</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>And we hook it up by subscribing it to the command handler:</p>

<div class="language-ruby highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="color:#080;font-weight:bold">module</span> <span style="color:#B06;font-weight:bold">Ridesharing</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  <span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">RidesController</span> &lt; <span style="color:#036;font-weight:bold">ApplicationController</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">post</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>      <span style="color:#777"># snip</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>      command = <span style="color:#036;font-weight:bold">HailDelorean</span>.new(current_user)
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      <span style="color:#777"># register the subscriber to the triggering action</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>      command.subscribe(<span style="color:#036;font-weight:bold">TrackSegmentAnalytics</span>)
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>      <span style="color:#777"># snip</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span style="color:#080;font-weight:bold">end</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  <span style="color:#080;font-weight:bold">end</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span><span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>OK, that was a little awkward, doing all that wiring up in the controller. What if we did the wiring globally, within an app initializer?</p>

<div class="language-ruby highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span style="color:#777"># config/initializers/domain_event_subscriptions.rb</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span style="color:#036;font-weight:bold">Wisper</span>.subscribe(<span style="color:#036;font-weight:bold">TrackSegmentAnalytics</span>, <span style="color:#606">scope</span>: <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">HailDelorean</span><span style="color:#710">&quot;</span></span>)
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>
<span class="line-numbers"><a href="#n4" name="n4">4</a></span><span style="color:#777"># alternate form:</span>
<span class="line-numbers"><a href="#n5" name="n5">5</a></span><span style="color:#036;font-weight:bold">HailDelorean</span>.subscribe(<span style="color:#036;font-weight:bold">TrackSegmentAnalytics</span>)
</pre></div>
</div>
</div>

<p>This registers a global subscriber for all future instances of <code>HailDelorean</code>.</p>

<h2 id="example-2-asynchronous-events-with-subscription-handlers-and-sidekiq">Example 2: Asynchronous events with subscription handlers and Sidekiq</h2>

<p>Here’s the real power of Wisper - we can decouple our application domain responsibilities by modeling effects as subscription objects and do them out-of-band of the primary web request thread.</p>

<p>Note that with the <a href="https://github.com/krisleech/wisper-sidekiq"><code>wisper-sidekiq</code></a> gem, all subscriptions given with an <code>async: true</code> option flag will automatically execute in an external thread as a Sidekiq job. Let’s take advantage of that now.</p>

<div class="language-ruby highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="color:#080;font-weight:bold">module</span> <span style="color:#B06;font-weight:bold">Ridesharing</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  <span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">RidesController</span> &lt; <span style="color:#036;font-weight:bold">ApplicationController</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">post</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>      <span style="color:#777"># Hail a time-traveling Delorean:</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>      <span style="color:#036;font-weight:bold">HailDelorean</span>.hail(current_user.id)
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>      render <span style="color:#606">text</span>: <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">Hailing a cab, please wait for a response...</span><span style="color:#710">'</span></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span style="color:#080;font-weight:bold">end</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  <span style="color:#080;font-weight:bold">end</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  <span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">HailDelorean</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    include <span style="color:#036;font-weight:bold">Wisper</span>::<span style="color:#036;font-weight:bold">Broadcaster</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    <span style="color:#080;font-weight:bold">def</span> <span style="color:#069">self</span>.<span style="color:#06B;font-weight:bold">hail</span>(passenger_id)
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>      broadcast(<span style="color:#A60">:hail</span>, passenger_id)
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    <span style="color:#080;font-weight:bold">end</span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  <span style="color:#080;font-weight:bold">end</span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span><span style="color:#080;font-weight:bold">end</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span><span style="color:#080;font-weight:bold">module</span> <span style="color:#B06;font-weight:bold">DriverRouting</span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>  <span style="color:#777"># Note that this class is both a subscriber and a publisher</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>  <span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">FindDriver</span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    include <span style="color:#036;font-weight:bold">Wisper</span>::<span style="color:#036;font-weight:bold">Publisher</span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    <span style="color:#080;font-weight:bold">def</span> <span style="color:#069">self</span>.<span style="color:#06B;font-weight:bold">hail</span>(passenger_id)
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>      <span style="color:#777"># Do slow, complex hairy routefinding/optimization/messaging behind the scenes:</span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>      driver = find_driver_for(passenger_id)
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>      <span style="color:#080;font-weight:bold">if</span> driver
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>        broadcast(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">driver_found</span><span style="color:#710">'</span></span>, passenger_id, driver.id)
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>      <span style="color:#080;font-weight:bold">else</span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>        broadcast(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">driver_not_found</span><span style="color:#710">'</span></span>, passenger_id)
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>      <span style="color:#080;font-weight:bold">end</span>
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>    <span style="color:#080;font-weight:bold">end</span>
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>  <span style="color:#080;font-weight:bold">end</span>
<span class="line-numbers"><a href="#n35" name="n35">35</a></span><span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>Finally, we add handlers (subscribers) to these domain objects:</p>

<div class="language-ruby highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="color:#080;font-weight:bold">module</span> <span style="color:#B06;font-weight:bold">Ridesharing</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  <span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">NotifyPassengerWithDriverStatus</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span style="color:#080;font-weight:bold">def</span> <span style="color:#069">self</span>.<span style="color:#06B;font-weight:bold">driver_found</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>      <span style="color:#777"># send them a text message :)</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span style="color:#080;font-weight:bold">end</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span style="color:#080;font-weight:bold">def</span> <span style="color:#069">self</span>.<span style="color:#06B;font-weight:bold">driver_not_found</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>      <span style="color:#777"># send them a text message :(</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span style="color:#080;font-weight:bold">end</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  <span style="color:#080;font-weight:bold">end</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span style="color:#080;font-weight:bold">end</span>
</pre></div>
</div>
</div>

<p>Now let’s link it together with subscriptions:</p>

<div class="language-ruby highlighter-coderay"><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span style="color:#777"># config/initializers/domain_event_subscriptions.rb</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span style="color:#036;font-weight:bold">Ridesharing</span>::<span style="color:#036;font-weight:bold">HailDelorean</span>.subscribe(<span style="color:#036;font-weight:bold">DriverRouting</span>::<span style="color:#036;font-weight:bold">FindDriver</span>, <span style="color:#606">async</span>: <span style="color:#069">true</span>)
<span class="line-numbers"><a href="#n3" name="n3">3</a></span><span style="color:#036;font-weight:bold">DriverRouting</span>::<span style="color:#036;font-weight:bold">FindDriver</span>.subscribe(<span style="color:#036;font-weight:bold">Ridesharing</span>::<span style="color:#036;font-weight:bold">NotifyPassengerWithDriverStatus</span>, <span style="color:#606">async</span>: <span style="color:#069">true</span>)
<span class="line-numbers"><a href="#n4" name="n4">4</a></span><span style="color:#036;font-weight:bold">Wisper</span>.subscribe(<span style="color:#036;font-weight:bold">AnalyticsListener</span>, <span style="color:#606">scope</span>: <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Ridesharing::NotifyPassengerWithDriverStatus</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">DriverRouting::FindDriver</span><span style="color:#710">&quot;</span></span>], <span style="color:#606">async</span>: <span style="color:#069">true</span>)
</pre></div>
</div>
</div>

<p>Now our messages between our domains are pulled out of the main request thread, and operate in an asynchronous fashion with Sidekiq as the runner.</p>

<p>Code in our domains are kept clean - note that there are no direct references to the other subdomains within each subdomain. Our app more cleanly segregates the responsibilities between each app, heavy workloads are naturally balanced as they move to worker threads.</p>

<h2 id="caveats-beware-of-overbuilding">Caveats: Beware of overbuilding</h2>

<p>If you are on a small app, you probably should go with approach #1. The weight of indirection can be a cognitive load on development, unless you truly need to build async code in #2. The overhead and conceptual complexities of the approach can only be justified with large codebases, or in apps where a domain-centric view (and segregation) of code is present.</p>

<h2 id="caveats-event-subscriptions-can-be-a-tangled-mess">Caveats: Event subscriptions can be a tangled mess</h2>

<p>Note that the act of wiring can quickly fan out into a spidery mess of handlers - you could even further decouple your handlers by modeling a global event bus as a publisher, and having each domain tap into the bus’ events and figure out how to handle each event on its own.</p>

<h2 id="caveats-transactional-consistency">Caveats: transactional consistency!</h2>

<p>If you implement this asynchronously, you’ll have to think about how to deal with transactional consistency. Can you design your data models (and database schema) to support independent updates without any dependencies? How will you handle the case when one domain action fails and the other completes?</p>

<p>You may have to roll your own two-phase commit here, the specifics of which I won’t delve into. However, for most of our applications, we may want to skip the asynchronous and keep our events synchronous.</p>
]]></content>
  </entry>
  
</feed>
