<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Implementing DDD | The Sweet Spot]]></title>
  <link href="http://www.g9labs.com/category/implementing-ddd/atom.xml" rel="self"/>
  <link href="http://www.g9labs.com/"/>
  <updated>2015-10-07T21:02:52-07:00</updated>
  <id>http://www.g9labs.com/</id>
  <author>
    <name><![CDATA[Andrew Hao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Implementing DDD: Context Maps]]></title>
    <link href="http://www.g9labs.com/2015/03/23/implementing-ddd-context-maps/"/>
    <updated>2015-03-23T10:56:00-07:00</updated>
    <id>http://www.g9labs.com/2015/03/23/implementing-ddd-context-maps</id>
    <content type="html"><![CDATA[<p>This is a multi-part series where I blog through the book: <em>Implementing
DDD</em> by Vaughn Vernon. Feel free to read my summary of <a href="/2014/04/26/implementing-ddd-chapter-2/">Chapter 2</a> of
this series.</p>

<h2>Chapter 3: Context Maps</h2>

<p>The context map is a diagram that illustrates the solution space of the
problem &ndash; it describes a diagram of &ldquo;what already exists&rdquo; as real,
living, breathing software.</p>

<p>Its purpose is to describe your specific solution space for your
specific team. It also has a benefit of facilitating conversations
between your team, and show you where inter-team communication is very
important.</p>

<h3>New terms:</h3>

<ul>
<li><em>Big Ball of Mud</em>: A messy, likely monolithic application that contains code that does not respect best practices, organization, or good coding practices.</li>
<li><em>Customer-Supplier</em>: The Customer is dependent on the Supplier&rsquo;s system.</li>
<li><em>Conformist</em>: A type of relationship where the Customer is forced to obey existing system conventions specified by the Supplier.</li>
<li><em>Partnership</em>: A coorperative relationship between two teams who succeed or fail together.</li>
<li><em>Shared Kernel</em>: A design strategy that shares some core code components. Care should be taken to define explicit boundaries around the kernel and keep the kernel small.</li>
<li><em>Anticorruption Layer</em>: A translation layer between two bounded contexts. Its job is to translate domain contexts between one domain and another.</li>
<li><em>Open Host Service</em>: A protocol that gives access to your system as a set of internal (or public) services, so others may reuse your code.</li>
</ul>


<h3>Drawing a context map</h3>

<p>Use a hand-drawn diagram, nothing fancy. Be sure to identify upstream
and downstream relationships. Talk to people. Keep it simple. Draw it
together, and have conversations.</p>

<p>It should turn up integration bottlenecks.</p>

<p>They should be posted in rooms or on a wall.</p>
]]></content>
  </entry>
  
</feed>
