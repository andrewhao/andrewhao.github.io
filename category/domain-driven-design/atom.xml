<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Domain-Driven Design | The Sweet Spot]]></title>
  <link href="http://www.g9labs.com/category/domain-driven-design/atom.xml" rel="self"/>
  <link href="http://www.g9labs.com/"/>
  <updated>2016-04-19T15:18:56-07:00</updated>
  <id>http://www.g9labs.com/</id>
  <author>
    <name><![CDATA[Andrew Hao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Joy of Naming (with the powers of Domain-Driven Design)]]></title>
    <link href="http://www.g9labs.com/2016/04/18/the-joy-of-naming-with-the-powers-of-domain-driven-design/"/>
    <updated>2016-04-18T17:14:00-07:00</updated>
    <id>http://www.g9labs.com/2016/04/18/the-joy-of-naming-with-the-powers-of-domain-driven-design</id>
    <content type="html"><![CDATA[<p>I want to discuss a topic near and dear to my heart, and what I believe
core to the crux of software design. It&rsquo;s not a new functional language,
it&rsquo;s not a fancy new framework, a how-to guide to do microservices, nor a quantum leap in the field of machine learning.</p>

<p>It&rsquo;s much simpler.</p>

<p>It&rsquo;s about names.</p>

<p><img src="http://3.bp.blogspot.com/_rL73HKlqbH0/TKhVHMbs2oI/AAAAAAAABEc/DiPbblM0R44/s1600/sistine-chapel-michelangelo-paintings-6.jpg" alt="In the beginning..." /></p>

<p><em>Names define us</em>. They define concepts. They imbue a concept with shared understanding. They&rsquo;re language concepts, but more than that, they&rsquo;re units of meaning.</p>

<p>Software development is a fundamentally human endeavour. No amount of technical computing breakthroughs will change the fact that software development is still the arduous task of getting a team together full of humans from a kaleidescope of different cultural, linguistic backgrounds &ndash; then throwing them together to build an arbitrarily complex product in a rapidly-shifting competitive landscape.</p>

<p>Not only that, the thing to build is chock-full of systems that interact with other systems of unbounded complexity. Additionally, once your software system is out in the wild, you need to make sure that it was the right thing to build. Is the product you built correctly tuned to your market? Is it generating sufficient revenue?</p>

<p>The landscape is littered with software projects that began ambitiously, but got lost in a towering mess of fragile code. It&rsquo;s no wonder that developing reliable, successful software is more art than science.</p>

<h3>Crossing our linguistic wires</h3>

<p>Let&rsquo;s rewind back to a scene from a typical day in the life of your software development team. Think back to the last time you discussed a story with your product owner, how did it unfold?</p>

<p>Let&rsquo;s imagine a scene at Delorean, the Uber for time travel, where you work:</p>

<blockquote><p>PO: Our next big project is to update our driver app to show rider locations on the timeline map.</p>

<p>You: And when do these riders show up on the timeline map?</p>

<p>PO: When the driver turns on the app and signals that she&rsquo;s driving.</p>

<p>You: OK, so that means when the app boots up and the DriverStatus service receives a POST we&rsquo;ll need to simultaneously fetch references from the HailingUser service based on time locality.</p>

<p>PO: Um&hellip; I guess so?</p></blockquote>

<p>Or how about your last iteration planning meeting, where you discussed the intricacies of a specific story?</p>

<blockquote><p>PO: In this story, we&rsquo;re going to add a coupon box to the checkout flow.</p>

<p>You: [Thinking out loud] Hm&hellip; would that mean we add a <code>/coupon</code> route to the checkout API?</p>

<p>Teammate: Wait &ndash; I think we call them <code>Discounts</code> in the backend. And the checkout flow is technically part of the <code>RideCommerce</code> service.</p>

<p>You: Right &ndash; I mean let&rsquo;s call the route <code>/coupon</code> but it&rsquo;ll create a <code>Discount</code> object. And in this story,    let&rsquo;s just remember that the checkout API really refers to the <code>RideCommerce</code> service.</p>

<p>PO: I&rsquo;ll add a note to the story.</p></blockquote>

<p>The implementing engineer, of course, doesn&rsquo;t read the note in the story (who has time to, anyways?). In the course of implementation, he gets tripped up in semantics and spends the better part of a half day re-implementing the <code>Checkout</code> flow as an entirely new service, before realizing his mistake in code review and backing out his changes.</p>

<p>Months later, a new colleague is tasked to fix the link in the checkout flow, but files an incomplete fix because she was not aware of the fact that <code>Coupons</code> actually had mappings back to <code>Discounts</code>. The bug makes its way to production, where it subtly lies dormant until a most inopportune time&hellip;</p>

<h3>A better, Domain-Driven way</h3>

<p>In Eric Evans' book <a href="http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215"><strong>Domain-Driven Design</strong></a>, he describes the concept of a <a href="http://martinfowler.com/bliki/UbiquitousLanguage.html">Ubiquitous Language</a> &ndash; a shared, common vocabulary that the entire team shares when discussing software.</p>

<p>When we say the &ldquo;entire team&rdquo;, we mean the combined team of designers, developers, the product owner and any other domain experts that might be at hand.</p>

<p>Your product owner may be your domain expert (and typically is). However, you may have other domain experts such as:</p>

<ul>
<li>Any team that builds reporting or analytics off of your software.</li>
<li>Upstream data providers</li>
<li>Anybody further up the reporting chain whose purview includes the software you&rsquo;re building, or its effects. Think: the Director of Finance, the COO, the head of Customer Support.</li>
<li>The users of your software</li>
</ul>


<p>Side note: in XP, each team has an &ldquo;onsite customer&rdquo; &ndash; this is your domain expert!</p>

<h4>Developing a Ubiquitous Language with a Glossary</h4>

<p>Try this: keep a living document of all the terminology your team uses &ndash; along with all its definitions. This <strong>Glossary</strong> is exactly what it sounds &ndash; a list of terms and their definitions.</p>

<p>```</p>

<h2>Delorean Team Glossary</h2>

<ul>
<li><strong>Coupon</strong>: an applied discount to a BookingAmount. A coupon may take the form of a Fixed or a Percentage amount.

<ul>
<li><strong>Fixed-type</strong>: A coupon that applies a fixed amount of money &ndash; e.g. a $30 USD discount.</li>
<li><strong>Percentage-type</strong>: A coupon that applies a percentage savings off the total BookingAmount.</li>
</ul>
</li>
<li><strong>Driver</strong>: An employed driver who drives within the system, picking up passengers and driving Trips for payment.</li>
<li><strong>Trip</strong>: An itinerary of passenger pick-up and drop-off location and times.</li>
<li><strong>Rider</strong>: The passenger that books the trip and is transported by the <em>Driver</em>.</li>
<li><strong>Booking</strong>: A reservation for a Trip, as booked by the <em>Rider</em>.</li>
<li><strong>BookingAmount</strong>: The monetary amount of the Trip, accounting for the trip cost, surge pricing, coupons and taxes.</li>
<li><strong>Routing Engine:</strong> The software system that maps out the driving directions for a driver.</li>
<li><strong>Payment</strong>: A record of how a user paid.</li>
<li><strong>Charge</strong>: A financial transaction for a specific dollar amount, for a specific charge method to an institution.</li>
<li><strong>Checkout</strong>: A workflow in which a <em>Payment</em> is made for a <em>Booking</em>.
```</li>
</ul>


<p>From now on, use only the term definitions listed here in your stories. Be explicit about how you use your language!</p>

<p>I&rsquo;ve been on many projects where the sloppy usage of a term from project inception led to the usage of that term in the code &ndash; codifying that messy, slippery term throughout the life of the project!</p>

<p>Which leads us to our next point:</p>

<h4>Refactoring your team to use the right terms</h4>

<p>Your <strong>Glossary</strong> is a living document. It is meant to be living &ndash; either on a continually-updated Google Doc or a wiki page. It should be visible for all to see &ndash; you should print it out and post it on the walls!</p>

<p>Meanwhile, in a planning meeting:</p>

<blockquote><p>You: So when a user logs into the app and broadcasts that they&rsquo;re ready to drive&hellip;</p>

<p>PO: You mean <em>Driver</em>. When a <em>Driver</em> logs in.</p>

<p>You: Right. Good catch.</p></blockquote>

<p>It seems a little silly (after all, you both know only Drivers use the broadcast feature of the app), but the laser focus on using the right words means that your team is always on the same page when talking about things.</p>

<p>Later that afternoon, your teammate taps you on the shoulder:</p>

<blockquote><p>Teammate: I&rsquo;m about to implement the Coupon story. I suggest we rename the <code>Discount</code> class to <code>Coupon</code>.</p>

<p>You: Great idea. That way, we aren&rsquo;t tripped up by the naming mismatches in the future.</p>

<p>Teammate: I do have a question about the coupon, though. Do you think it&rsquo;s <em>applied</em> to the <strong>BookingAmount</strong>, or is it <em>added</em>?</p>

<p>PO: [Overhearing conversation] You had it right. It&rsquo;s <em>applied</em>.</p></blockquote>

<p>You and your teammate then go and update the glossary, scribbling an addendum on the wall (or updating your wiki):</p>

<p><code>
- **Coupon**: ... Coupons may be *applied* to BookingAmounts to discount the total cost of the booking.
</code></p>

<h4>Refactoring your code to use the right terms</h4>

<p>Your teammate and you then walk over to her desk; as a pair you proceed to refactor the existing account code. We&rsquo;ll use Ruby for the sake of this example.</p>

<p>In the beginning, the code looks like this:</p>

<p>```ruby
class Checkout
  def initialize(booking_amount, discount)</p>

<pre><code>@booking_amount = booking_amount
@discount = discount
</code></pre>

<p>  end</p>

<p>  def total</p>

<pre><code>@booking_amount.total - @discount.calculate_amount_for(booking_amount: booking_amount)
</code></pre>

<p>  end
end</p>

<p>class Discount
  STRATEGY_FIXED = &lsquo;STRATEGY_FIXED&rsquo;
  STRATEGY_PERCENTAGE = &lsquo;STRATEGY_PERCENTAGE&rsquo;</p>

<p>  def initialize(amount, strategy)</p>

<pre><code>@amount = amount
@strategy = strategy
</code></pre>

<p>  end</p>

<p>  def calculate_amount_for(booking_amount:)</p>

<pre><code># Implementation...
</code></pre>

<p>  end
end
```</p>

<p>You take a first pass and rename the <code>Discount</code> class to <code>Coupon</code>.</p>

<p>```ruby
class Coupon
  STRATEGY_FIXED = &lsquo;STRATEGY_FIXED&rsquo;
  STRATEGY_PERCENTAGE = &lsquo;STRATEGY_PERCENTAGE&rsquo;</p>

<p>  def initialize(amount, strategy)</p>

<pre><code>@amount = amount
@strategy = strategy
</code></pre>

<p>  end</p>

<p>  def calculate_amount_for(booking_amount:)</p>

<pre><code># Implementation...
</code></pre>

<p>  end
end
```</p>

<p>Now there&rsquo;s something funny here &ndash; your domain language suggests that a <strong>Coupon</strong> is <em>applied to</em> a <strong>BookingAmount</strong>. You pause, because the code reads the opposite &ndash; &ldquo;A Coupon calculates its amount for a BookingAmount&rdquo;.</p>

<blockquote><p>You: How about we also refactor the <code>calculate_amount_for</code> method to reflect the language a little better?</p>

<p>Teammate: Yeah. It sounds like the action occurs the other way &ndash; the BookingAmount is responsible for applying a Coupon to itself.</p></blockquote>

<p>In your next refactoring pass, you move the <code>calculate_amount_for</code> method into the <code>BookingAmount</code>, calling it <code>applied_discount_total</code>:</p>

<p>```ruby
class BookingAmount
  # implementation details&hellip;</p>

<p>  def applied_coupon_amount(coupon:)</p>

<pre><code># Implementation...
</code></pre>

<p>  end
end
```</p>

<p>Finally, you change your <code>Checkout</code> implementation to match:</p>

<p>```ruby
class Checkout
  def initialize(booking_amount, coupon)</p>

<pre><code>@booking_amount = booking_amount
@coupon = coupon
</code></pre>

<p>  end</p>

<p>  def total_amount</p>

<pre><code>@booking_amount.price - @booking_amount.applied_coupon_amount(coupon: @coupon)
</code></pre>

<p>  end
end
```</p>

<p>When you read the implementation in plain English, it reads:</p>

<blockquote><p>The checkout&rsquo;s total amount is calculated by subtracting the booking amount&rsquo;s applied coupon amount from the booking amount price.</p></blockquote>

<p>Phew! Designing a strong <strong>Ubiquitous Language</strong> was hard work! In fact, you had spent a goodly amount of time debating and clarifying with your domain experts:</p>

<ul>
<li>Is a Coupon <em>applied</em> to a BookingAmount, or is it <em>discounted from</em> one?</li>
<li>Should we call it a Coupon <em>amount</em>, or a Coupon <em>cost</em>?</li>
<li>Is the pre-tax, pre-discount amount in the BookingAmount called a <em>price</em>, or a <em>cost</em>?</li>
</ul>


<p>Whatever you agreed on, that&rsquo;s what you changed your code to reflect.</p>

<h4>Continual refinement</h4>

<p>Hm. Something still feels off.</p>

<p>You and your teammate feel your OOP spidey senses going haywire.</p>

<blockquote><p>Teammate: Hm. I guess that worked, but that&rsquo;s still not exactly as clean as we wanted it. Isn&rsquo;t it kind of weird how the Checkout owns the calculation for the calculation of a discount?</p>

<p>You: Yeah, I see where you&rsquo;re coming from. That&rsquo;s just not good OO design. Additionally, if we notice the language our domain experts were using, they didn&rsquo;t mention that the checkout total was some subtraction of something from another thing. The Checkout&rsquo;s total simply is the order amount, after application of a Coupon.</p></blockquote>

<p>Your partner and you take one last step:</p>

<p>```ruby
class Checkout
  def initialize(booking_amount, coupon)</p>

<pre><code>@booking_amount = booking_amount
@booking_amount.apply!(coupon)
</code></pre>

<p>  end</p>

<p>  def total_amount</p>

<pre><code>@booking_amount.price
</code></pre>

<p>  end
end</p>

<p>class BookingAmount
  # Implementation&hellip;</p>

<p>  def apply!(coupon)</p>

<pre><code>@coupons += coupon
</code></pre>

<p>  end</p>

<p>  def amount</p>

<pre><code>@amount - coupons.sum(&amp;:amount)
</code></pre>

<p>  end
end
```</p>

<p>You sit back and read it back, out loud:</p>

<blockquote><p>The checkout&rsquo;s total amount is the BookingAmount after a Coupon has been applied.</p></blockquote>

<p>You both smile. Much better.</p>

<h3>In closing&hellip;</h3>

<p>In this brief time we had together,</p>

<ul>
<li>We discussed why names are important &ndash; especially in a complex endeavour like software development.</li>
<li>We covered why it&rsquo;s important to arrive at a shared understanding, together as a team, using the same words and vocabulary.</li>
<li>We discovered how to build and integrate a <strong>Glossary</strong> into the daily rhythm of our team</li>
<li>We refactored the code twice &ndash; illustrating how to get code in line with the domain language.</li>
</ul>


<h3>And there is much more!</h3>

<p>In an upcoming post, we&rsquo;ll investigate how the <strong>Ubiquitous Language</strong> applies to a core concept of Domain-Driven Design: the <strong>Bounded Context</strong>. Why is that important? Because Bounded Contexts give us tools to organize our code &ndash; and to do further advanced things like <a href="https://speakerdeck.com/andrewhao/ddd-rail-your-monorail">break up monoliths into services</a>. More on that to come!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementing DDD: Domains, Subdomains and Bounded Contexts]]></title>
    <link href="http://www.g9labs.com/2014/04/26/implementing-ddd-chapter-2/"/>
    <updated>2014-04-26T08:43:00-07:00</updated>
    <id>http://www.g9labs.com/2014/04/26/implementing-ddd-chapter-2</id>
    <content type="html"><![CDATA[<h2>Chapter 2: Domains, Subdomains, and Bounded Contexts</h2>

<p>A <em>Domain</em> is what a business does and the surrounding context of how it does business. It is important to model out its supported <em>Subdomains</em> &mdash; that is, the smaller components of the business that collaborate in real, day-to-day operations of the business. The book describes these as <em>Core Domains</em>.</p>

<p>Finally, a <em>Bounded Context</em> is the physical manifestation of the solution space as software &mdash; models living in a real application. Its key feature in the context of DDD is as a linguistic barrier between different domains.</p>

<p>In an ideal world, each <em>Subdomain</em> maps directly to one <em>Bounded Context</em>. In the real world, this is less common since we tend to build things into monolithic systems. Still &mdash; many monolithic applications have several components that could in themselves be bounded contexts.</p>

<h6>Side note: In Rails, one could think of Engines as a <em>Bounded Context</em>. But that might be a blog post for another time.</h6>

<p>It is important to get these ideas and concepts down correctly because we need correct modeling of our systems to determine what they do.</p>

<h3>Bounded Contexts and terms</h3>

<p>It&rsquo;s not usually realistic to get the entire organization agreeing on a universal linguistic definition for every term. Instead, DDD assumes that different terms have different meanings in different contexts.</p>

<p>The author then dives into the an example of a book, where a <em>book</em> means several different things to different people in different contexts. A book is touched upon by authors, graphic designers, editors, marketing folks. In each of these contexts, the features of a book mean different things at different times. It is impossible to develop an all-knowing Book model without disagreement between stakeholders. DDD, instead, acknowledges these differences and allows stakeholders to use linguistic terms from within their unique Bounded Contexts.</p>

<p>Bounded Contexts may include things like:</p>

<ul>
<li>Object models</li>
<li>A database schema / persistence layer</li>
<li>A SOAP or REST API</li>
<li>A user interface</li>
</ul>


<h3>Bounded context antipatterns</h3>

<p>You may be tempted to divide up a bounded context by architectural concerns, or because you want to assign smaller tasks to developers (resource allocation). Beware that this kind of work tends to fragment the language.</p>

<p>DDD operates on <em>linquistic drivers</em>. The unity, cohesion and domain-adherence of the bounded context should be the first priority in the design.</p>

<p>Assigning two teams to the same bounded context results in fragmentation of the bounded context.</p>

<p>Ideally: we strive to assign one team to work on one Bounded Context with one Ubiquitous Language at a time.</p>

<h6>In Rails, what are the bounded contexts? It could be the top-level Rails application, or an engine, or a gem, that define the context boundaries._</h6>

<h3>A story&hellip;</h3>

<p>The chapter then goes on to describe their fictional team designing through three iterations off their DDD strategy:</p>

<p>A system in which all domains live within the same bounded context. They see the folly of this and refactor with some tactical patterns, like creating services.</p>

<p>This is, however, missing the point. They realized they needed to listen to business and their domain experts to find out exactly where the right places were to segregate the contexts. The team discovers that the business has a desire to go in a new direction which allows them to segregate the domain in such a way that would enable future directions for the business.</p>

<h6>How often are we as developers in conversation with our product owners and asking where the business <em>wants</em> to go in the future?</h6>

<p>Conversations with the business reveal an intention to develop an add-on product to the core product. This implies the development of two subdomains. However, further investigation reveals that the shared overlap of certain domain models (like users, roles, and access management) cannot simply be identically shared between two systems, since their <em>linguistic meanings</em> in the two systems differ slightly. Instead, the developers use the linguistic problem to develop a third bounded context.</p>

<p>The developers separate their app into three bounded contexts built as three software systems.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogging through: Implementing Domain-Driven Design]]></title>
    <link href="http://www.g9labs.com/2014/02/02/blogging-through-implementing-domain-driven-design/"/>
    <updated>2014-02-02T11:31:00-08:00</updated>
    <id>http://www.g9labs.com/2014/02/02/blogging-through-implementing-domain-driven-design</id>
    <content type="html"><![CDATA[<p>In recent conversations with coworkers, the topic of Domain-Driven Design has
arisen on more than a few occasions in design and architecture meetings.
&ldquo;Have you read it?&rdquo; a coworker asked, &ldquo;I think it&rsquo;d help us a lot.&rdquo;</p>

<p>I&rsquo;ve gotten my hands on a copy of <a href="http://www.amazon.com/Implementing-Domain-Driven-Design-Vaughn-Vernon/dp/0321834577">Implementing Domain-Driven Design</a>
by <a href="https://vaughnvernon.co/">Vaughn Vernon</a>, which is a more pragmatic
approach to DDD than the original <a href="http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=pd_bxgy_b_text_y">Domain-Driven Design</a> book by Eric Evans.</p>

<p>My desire is to share my outlines of the book chapter-by-chapter,
hopefully once a week.</p>

<h2>Chapter 1: Getting Started with DDD</h2>

<h3>Can I DDD?</h3>

<ul>
<li>DDD helps us design software models where &ldquo;our design is exactly how
the software works&rdquo; (1).</li>
<li>DDD isn&rsquo;t a technology, it&rsquo;s a set of principles that involve
discussion, listening, and business value so you can <em>centralize
knowledge</em>.</li>
<li>The main principle here is that we must &ldquo;understand the business in
which our software works&rdquo; (3). This means we learn from domain experts
in our field.</li>
<li>What is a domain model? an object model where objects have
data/persistence concerns with an accurate business meaning.</li>
</ul>


<h3>Why You Should Do DDD</h3>

<ul>
<li>Domain experts and devs on same playing field, cooperation required as
one team. (Agile teams, anyone?)</li>
<li>The business can learn more about itself through the questions asked
about itself.</li>
<li>Knowledge is centralized.</li>
<li>Zero translations between domain experts and software devs and
software.</li>
<li>&ldquo;The design is the code, and code is the design.&rdquo; (7)</li>
<li>It is not without up-front cost</li>
</ul>


<h4>The problem</h4>

<ul>
<li>The schism between business domain experts and software developers
puts your project (and your business) at a risk.</li>
<li>The more time passes, the greater the divide grows.</li>
</ul>


<h4>Solution</h4>

<ul>
<li>DDD brings domain experts and software developers together to develop
software that reflects the business domain mental model.</li>
<li>Oftentimes this requires that they jointly develop a &ldquo;Ubiquitous
Language&rdquo; &ndash; a shared vocabulary and set of concepts that are jointly
spoken by everybody.</li>
<li>DDD produces software that is better designed &amp; architected &ndash;> better testable &ndash;>
clearer code.</li>
<li>Take heed: DDD should only be used to simplify your domain. If the net
cost of implementing DDD is only going to add complexity, then you
should stay away.</li>
</ul>


<h4>Domain model health</h4>

<ul>
<li>As time passes, our domain models can become
<a href="http://www.martinfowler.com/bliki/AnemicDomainModel.html">anemic</a>,
and lose their expressive capabilities and clean boundaries. This can
lead to spaghetti code and a violation of object responsibilities.</li>
<li>Why do anemic domain models hurt us? They claim to be well-formed
models but they hide a badly designed system that is still unfocused
in what it does. (Andrew: I&rsquo;ve seen a lot of Service objects that
claim to be services but really are long scripts to get things done.
There might be a cost of designing the Service interface, but inside
things are just as messy as before we got there.)</li>
<li>Seems like Vernon is blaming the influence of IDEs for Visual Basic as
they influenced Java libraries &mdash; too many explicit getters and
setters.</li>
<li>Vernon throws up some code samples comparing two different code
samples &mdash; one with an anemic model that looks like a long string of
commands and another with descriptive method names. He makes the case
that simply reading the code is documentation of the domain itself.</li>
</ul>


<h4>How to do DDD</h4>

<ul>
<li>Have a <a href="http://martinfowler.com/bliki/UbiquitousLanguage.html"><em>Ubiquitous Language</em></a>
where the team of domain experts share the language together, from
domain experts to programmers.</li>
<li><p>Steps to coming up with a language:</p>

<ol>
<li>Draw out the domain and label it.</li>
<li>Make a glossary of terms and definitions.</li>
<li>Have the team review the language document.</li>
</ol>
</li>
<li><p>Note that a Ubiquitous Language is specific to the context it is
implemented in. In other words, there is one Ubiquitous Language per
Bounded Context.</p></li>
</ul>


<h3>Business value of DDD</h3>

<ol>
<li>The organization gains a useful model of its domain</li>
<li>The precise definition of the business is developed</li>
<li>Domain experts contribute to software design.</li>
<li>A better user experience is gained.</li>
<li>Clean boundaries for models keep them pure.</li>
<li>Enterprise architecture is better designed.</li>
<li>Continuous modeling is used &mdash; the working software we produce is the
model we worked so hard to create.</li>
<li>New tools and patterns are used.</li>
</ol>


<h4>Challenges</h4>

<ul>
<li>The time and effort required to think about the busines domain,
research concepts, and converse with domain experts.</li>
<li>It may be hard to get a domain expert involved due to their
availability.</li>
<li>There is a lot of thought required to clarify pure models and do
domain modeling.</li>
</ul>


<h4>Tactical modeling</h4>

<ul>
<li>The <em>Core Domain</em> is the part of your application that has key and
important business value &mdash; and may require high thought and attention
to design.</li>
<li>Sometimes DDD may not be the right fit for you &mdash; if you have a lot of
experienced developers who are very comfortable with domain modeling,
you may be better off trusting their opinion.</li>
</ul>


<h4>DDD is not heavy.</h4>

<ul>
<li>It fits into any Agile or XP framework. It leans into TDD, eg: you use
TDD to develop a new domain model that describes how it interacts with
other existing models. You go through the red-green-refactor cycle.</li>
<li>DDD promotes lightweight development. As domain experts read the code, they
are able to provide in-flight feedback to the development of the
system.</li>
</ul>

]]></content>
  </entry>
  
</feed>
