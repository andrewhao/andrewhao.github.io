<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: conference | The Sweet Spot]]></title>
  <link href="http://www.g9labs.com/category/conference/atom.xml" rel="self"/>
  <link href="http://www.g9labs.com/"/>
  <updated>2016-03-22T13:58:13-07:00</updated>
  <id>http://www.g9labs.com/</id>
  <author>
    <name><![CDATA[Andrew Hao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Strange Loop 2015: Notes & Reflections]]></title>
    <link href="http://www.g9labs.com/2015/09/27/strange-loop-2015-reflections/"/>
    <updated>2015-09-27T15:40:00-07:00</updated>
    <id>http://www.g9labs.com/2015/09/27/strange-loop-2015-reflections</id>
    <content type="html"><![CDATA[<p>Going to Strange Loop was a huge check off my conference bucket list
(lanyard?). I&rsquo;d always heard about this slightly-weird, highly academic
collision between academia and industry, skewing toward programming
languages you haven&rsquo;t heard of (or, at the very least, you&rsquo;ve never used
in production). I anticipated sitting at the feet of gray-haired wizards
and bright-eyed hipsters with Ph.Ds.</p>

<p>The conference did not disappoint. And it was not quite what I
expected-I less sat at the feet of geniuses than I did talk with them,
peer-to-peer, about topics of interest. All around me people were saying
&ldquo;Don&rsquo;t be afraid to ask questions. Don&rsquo;t feel stupid &ndash; nobody knows
everything.&rdquo; Speakers were tweeting about how much they were learning.
It was comforting, because lots of topics I had come to see were those
in which I had no. freakin. clue. about.</p>

<p>The following is culled from my notes from different sessions I
attended. I will focus on brevity. I will keep it clear. Here we go:</p>

<h3>Opening Keynote: &ldquo;I see what you mean&rdquo; &ndash; Peter Alvaro</h3>

<iframe width="560" height="315"
src="https://www.youtube.com/embed/R2Aa4PivG0g" frameborder="0"
allowfullscreen></iframe>


<ul>
<li>Instructions, behaviors &amp; outcomes.</li>
<li>It &ldquo;feels good&rdquo; to write in C (a hardcore 1000 liner)</li>
<li>But a declarative program (e.g. SQL) works well, but is harder to come
up with.</li>
<li>The declarative world &ndash; as described in the work done in Datalog</li>
<li>How can we take concepts from Datalog and apply to real-world
resources like network actors (distributed systems)?</li>
<li>It becomes easier to model these systems declaratively when we
explicitly capture time.</li>
<li>Enter Dedalus: extension to Datalog where time is a modeling
construct.</li>
<li>(Show off usage of <code>@next</code> and <code>@async</code> annotations</li>
<li>Computation is redezvous &ndash; the only thing that you know is what YOU
know at that point in time.</li>
<li>Takeaway: Abstractions leak. Model them better (e.g. with time)</li>
<li>Inventing languages is dope.</li>
</ul>


<h3>Have your Causality and your Wall Clocks Too (Jon Moore)</h3>

<iframe width="560" height="315"
src="https://www.youtube.com/embed/YqNGbvFHoKM" frameborder="0"
allowfullscreen></iframe>


<ul>
<li>Take concept of Lamport clocks and extend them with hybrid clocks.</li>
<li>And extend them one further with: Distributed Monotonic Clocks</li>
<li>These DMCs use population protocol (flocking) to each actor in the
system communicate with another, updating their source of truth to
eventually agree on a media time w/in the group</li>
<li>DMC components:

<ol>
<li>Have a reset button by adding epoch bit</li>
<li>Use flocking (via population protocol) to avoid resets</li>
<li>Accomodates for some clockless nodes</li>
<li>Explicitly reflects causality</li>
</ol>
</li>
</ul>


<h3>Building Isomorphic Web Apps with React &ndash; Elyse Gordon</h3>

<iframe width="560" height="315"
src="https://www.youtube.com/embed/QPXNb6bl7hc" frameborder="0"
allowfullscreen></iframe>


<ul>
<li>Vevo needed better SEO for SPAs. Old soln was to snapshot page and upload to S3.</li>
<li>Beneficial for SEO crawlers</li>
<li>React in frontend. Node in backend.</li>
<li>Vevo-developed <a href="">pellet</a> project as Flux-like framework to organize
files.</li>
<li>Webpack aliases/shims</li>
<li>Server hands off to browser, bootstraps React in client.</li>
<li>Alternatives: Relay, Ember</li>
</ul>


<h3>Designing for the Worst Case: Peter Bailis (@pbailis)</h3>

<iframe width="560" height="315"
src="https://www.youtube.com/embed/ZGIAypUUwoQ" frameborder="0"
allowfullscreen></iframe>


<ul>
<li>Designing for worst case often penalizes average case</li>
<li>But what if designing for the worst case actually helps avg case?</li>
<li>Examples from dstbd systems:

<ul>
<li>Worst case of disconnected data centers, packet loss/link loss. Fix
by introducing coordination-free protocols. Boom, you&rsquo;ve now made your
network more scalable, performant, resistent to downtime.</li>
<li>Worst case: hard to coordinate a distributed transaction between
services. What do you do? You implement something like buffered writes
out of process.

<ul>
<li>CRDT, RAMP, HAT, bloom</li>
<li>Suddenly, you have fault tolerance</li>
</ul>
</li>
<li>Tail latency problem in microservices: the more microservices you
query, the higher the probability of hitting a slow server response.

<ul>
<li>Your service&rsquo;s corner case is your user&rsquo;s average case</li>
</ul>
</li>
<li>HCI: accessibility guidelines in W3C lift standards for all. Make
webpages easier to navigate. Side effect of better page performance,
higher conversion.</li>
<li>Netflix designing CC subtitles also benefits other users.</li>
<li>Curb cuts in the real world to help ADA/mobility-assisted folks also
benefit normal folks too</li>
</ul>
</li>
<li>Best has pitfalls too: your notion of best may be hard to hit, or
risky. You may want to optimize for &ldquo;stable&rdquo; solution. (Robust
optimization)</li>
<li>When to design for worst case?

<ul>
<li>common corner cases</li>
<li>environmental conditions vary</li>
<li>&ldquo;normal&rdquo; isn&rsquo;t normal</li>
</ul>
</li>
<li>worst forces a conversation

<ul>
<li>how do we plan for failures?</li>
<li>what is our scale-out strategy?</li>
<li>how do we audit failures? data breaches?</li>
</ul>
</li>
</ul>


<h3>Ideology by Gary Bernardt</h3>

<ul>
<li>Rumsfeld: known knowns, known unknowns, and unknown unknowns.</li>
<li>Ideology is the thing you know you do not know you know</li>
<li>Conflict between typed vs dynamic programmers:

<ul>
<li>Typed: &ldquo;I don&rsquo;t need tests, I have types&rdquo;</li>
<li>Dynamic: &ldquo;I write tests, so I don&rsquo;t need types&rdquo;</li>
</ul>
</li>
<li>In reality, they are solving different places in the problem domain,
but they have different beliefs about the world that are hidden in the
shadows:

<ul>
<li>Typed: &ldquo;Correctness comes solely from types&rdquo;</li>
<li>Dynamic: &ldquo;Correctness comes solely from example&rdquo;</li>
</ul>
</li>
<li>&ldquo;I need nulls&rdquo; &ndash;> You believe nulls are the only way to represent absence</li>
<li>&ldquo;Immutable data structures are slow&rdquo; &ndash;> You believe all immutable types are slow</li>
<li>&ldquo;GC is impractical&rdquo; &ndash;> you believe GC algorithms won&rsquo;t get faster.</li>
<li>Read CSE 341 Type systems, Dan Grossman</li>
</ul>


<h3>Building Scalable, Stateful Services: Caitlin McCaffrey</h3>

<iframe width="560" height="315"
src="https://www.youtube.com/embed/H0i_bXKwujQ" frameborder="0"
allowfullscreen></iframe>


<h4>Sticky connection: always talk to the same machine</h4>

<p>Building sticky connections:
&ndash; persistent connections (load balancing cannot rebalance server)
&ndash; implement backpressure (d/c connection)</p>

<h4>dynamic cluster membership</h4>

<ul>
<li>gossip protocols &ndash;> availability</li>
<li>consensus systems &ndash;> consistency
(everybody needs to have the same worldview.</li>
</ul>


<h4>work distribution:</h4>

<h5>random:</h5>

<ul>
<li>write anywhere, read from all</li>
</ul>


<h5>consistent hashing: on session ID</h5>

<p>hash space &ndash;> node
dynamoDB, Manhattan</p>

<p>con: can have hotspots, could have uneven distribution of resources cannot move work.</p>

<h4>distributed hash table</h4>

<p>statefully store hash</p>

<h4>Real world</h4>

<p>Scuba (Facebook)
&ndash; distributed in-memory DB</p>

<p>Ringpop (Uber)
&ndash; Node.js swim gossip protocol, consistent hashing</p>

<p>Orleans (MS Research)
&ndash; actor model
&ndash; gossip
&ndash; consistent hash
&ndash; distributed hashtable</p>

<h3>Idalin &ldquo;Abby&rdquo; Bobé: From Protesting to Programming: Becoming a Tech Activist</h3>

<iframe width="560" height="315"
src="https://www.youtube.com/embed/gy82S8tjJX8" frameborder="0"
allowfullscreen></iframe>


<ul>
<li>Tech to resist exploitation</li>
<li>Technologists as activists</li>
<li>Idalin Bobé &ndash;> Changed name to &ldquo;Abby&rdquo; to get a job.</li>
<li>Pastor Jenkins &ndash; magnifying glass vs paper</li>
<li>Philadelphia Partnership Program:

<ul>
<li>1st to college</li>
<li>work &lt;> school</li>
</ul>
</li>
<li>Difficult to balance.</li>
<li>Mills MBA, CS</li>
<li>Joined Black Girls Code

<ul>
<li>Apply technology in the right way</li>
</ul>
</li>
<li>Ferguson happened

<ul>
<li>Thoughtworkers joined on the ground</li>
<li>Hands Up United: www.handsupunited.org</li>
</ul>
</li>
<li>&ldquo;Do not be led by digital metrics&rdquo; &ndash; even though the activists had
digital tooling, the tools were being used against activists. Phone
calls, chats monitored. Movement tracked.</li>
<li>New group starting up in St. Louis called &ldquo;Ray Clark, Sr.&rdquo; &ndash; named
after a black man who played a strong role in the founding of Silicon
Valley.</li>
<li>21st century technologists need 21st century skillsets.</li>
<li>Dream Defenders</li>
<li>&ldquo;it is our duty to fight for our freedom/it is our duty to win/we must
love and support one another/we have nothing to lose but our chains&rdquo;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recap: QCon SF 2014]]></title>
    <link href="http://www.g9labs.com/2014/11/05/qcon-sf-2014/"/>
    <updated>2014-11-05T19:01:00-08:00</updated>
    <id>http://www.g9labs.com/2014/11/05/qcon-sf-2014</id>
    <content type="html"><![CDATA[<p>Blurb sent me off to QCon SF 2014 for three days.</p>

<h2>Notes</h2>

<p>I took a series of notes each day in attendance:</p>

<ul>
<li><a href="/notes/2014-11-03-qconsf-day-one.html">Day One: Architectures, Functional</a></li>
<li><a href="/notes/2014-11-04-qconsf-day-two.html">Day Two: Rx Systems, API Platforms</a></li>
<li><a href="/notes/2014-11-05-qconsf-day-three.html">Day Three: Microservices, Culture</a></li>
</ul>


<h2>Summary</h2>

<ul>
<li>Big trends in continuous delivery and deployment &mdash; deploy more often, smaller feedback loops</li>
<li>A lot of emphasis on event driven architectures + microservices. Lots of emphasis on DDD as a design tool.</li>
<li>Reactive systems with functional implementations were widely discussed as a scaling tool (backpressure-sensitive) and as a coordination tool between multiple async services.</li>
<li>Big data/realtime streaming talks were interesting &mdash; my personal experience with them is limited, but it seems there is a debate over the merits of existing Lambda architecture practice.</li>
<li>A lot of talk about microservice orchestration tools &mdash; acknowledging the pain of configuration and management of many services.</li>
<li>Scala got a lotttt of attention. Probably because of its presence in bigger companies like Netflix, Twitter, LinkedIn. Wonder what smaller startups are using.</li>
<li>Web Components were a big upcoming trend in frontend technologies. Strong modularization of views + behaviors in HTML documents.</li>
</ul>


<h2>Questions</h2>

<ul>
<li>If I could do a startup over again, would I begin an app in Rails? Where is the sweet spot for that sort of application architecture?</li>
<li>How can I design systems such that they can be extractible into focused components/services as early as possible?</li>
<li>How can we plan for failures (<a href="http://en.wikipedia.org/wiki/Fault_injection">fault injection</a>)?</li>
<li>How does one implement change in software engineering organizations? Bottom-up (organic initiatives bubbling up through management) vs top-down (management/software leaders direct org to implement).</li>
<li>How are we doing with encouraging women and minorities who traditionally are underrepresented in our industry?</li>
<li>What are places in our hiring funnels that, unbeknownst to us, may be turning away or detracting women and minorities?</li>
</ul>

]]></content>
  </entry>
  
</feed>
