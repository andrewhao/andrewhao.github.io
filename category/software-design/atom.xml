<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: software design | The Sweet Spot]]></title>
  <link href="http://www.g9labs.com/category/software-design/atom.xml" rel="self"/>
  <link href="http://www.g9labs.com/"/>
  <updated>2018-09-01T09:34:57-07:00</updated>
  <id>http://www.g9labs.com/</id>
  <author>
    <name><![CDATA[Andrew Hao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Decomposing Fat Models]]></title>
    <link href="http://www.g9labs.com/2012/12/26/decomposing-fat-models/"/>
    <updated>2012-12-26T04:46:09-08:00</updated>
    <id>http://www.g9labs.com/2012/12/26/decomposing-fat-models</id>
    <content type="html"><![CDATA[<p>Heard an awesome Ruby Rogues podcast recently: <a href="http://rubyrogues.com/083-rr-decomposing-fat-models-with-bryan-helmkamp/">“Decomposing Fat Models”</a>.</p>

<p>Essentially, they’re talking through Bryan Helmkamp’s <a href="http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/">Code Climate blog entry “7 ways to decompose fat ActiveRecord models”</a>, which sums up a few strategies that mainly involve extracting objects from your existing code, value, service, policy, decorator objects and the like. Give the entry a read-through, it’s opened my eyes a lot to rethinking my architecture of my Rails models.</p>

<p>A few interesting thoughts that came up in the podcast:</p>

<ul>
  <li>
    <p>The “Skinny Controller, Fat Model” mantra has hurt the Rails community because we start getting these bloated AR classes. “‘fat-‘ anything is bad” one of the hosts mentions in the blog. The smaller your models, the more manageable, readable and testable they become.</p>
  </li>
  <li>
    <p>Rubyists don’t like the term “Factory”, even though in Helmkamp’s opinion, Ruby classes <em>are</em> factories. “We call them “builders”” one of the hosts jokes.</p>
  </li>
  <li>
    <p>The Open/Closed Principle as applied to Ruby: using delegators, decorators.</p>
  </li>
</ul>

]]></content>
  </entry>
  
</feed>
