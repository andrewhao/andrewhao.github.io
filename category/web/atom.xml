<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web | The Sweet Spot]]></title>
  <link href="http://www.g9labs.com/category/web/atom.xml" rel="self"/>
  <link href="http://www.g9labs.com/"/>
  <updated>2018-08-31T19:59:45-07:00</updated>
  <id>http://www.g9labs.com/</id>
  <author>
    <name><![CDATA[Andrew Hao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HAML object references]]></title>
    <link href="http://www.g9labs.com/2012/04/12/haml-object-references/"/>
    <updated>2012-04-12T07:40:09-07:00</updated>
    <id>http://www.g9labs.com/2012/04/12/haml-object-references</id>
    <content type="html"><![CDATA[<p>Did you guys know that you can use the ‘[ ]’ brackets in HAML to automatically set the id and class on a tag, kind of like Rails’ <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/TagHelper.html#method-i-tag">tag</a> helper?</p>

<pre><code># file: app/controllers/users_controller.rb

def show
  @user = CrazyUser.find(15)
end

-# file: app/views/users/show.haml

%div[@user, :greeting]
  %bar[290]/
  Hello!
</code></pre>

<p>is compiled to:</p>

<pre><code>&lt;div class='greeting_crazy_user' id='greeting_crazy_user_15'&gt;
  &lt;bar class='fixnum' id='fixnum_581' /&gt;
  Hello!
&lt;/div&gt;
</code></pre>

<p>Keeps things nice, concise and DRY. See the <a href="http://haml-lang.com/docs/yardoc/file.HAML_REFERENCE.html#object_reference_">HAML documentation</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The making of SOS: Intro]]></title>
    <link href="http://www.g9labs.com/2011/02/01/the-making-of-sos-intro/"/>
    <updated>2011-02-01T10:40:40-08:00</updated>
    <id>http://www.g9labs.com/2011/02/01/the-making-of-sos-intro</id>
    <content type="html"><![CDATA[<p><a href="http://www.flickr.com/photos/andrewhao/5408231821/"><img src="http://farm6.static.flickr.com/5095/5408231821_b4d0fd6837.jpg" alt="Save Our Souls - Logo" /></a></p>

<p>I’m starting a project for my church’s art show that integrates Twitter, print design and light. I’m titling it “Save Our Souls”.</p>

<p>The theme of the art show is “Instead of Ashes”, a reference from of <a href="http://www.esvonline.org/search/isaiah+61/">Isaiah 61</a> which highlights of God’s promises of redemption for the world’s suffering through Jesus.</p>

<h2 id="what-does-it-do">What does it do?</h2>

<p>Essentially, what I want it to do is parse the global Twitter firehose and display a live stream of tweets that highlight brokenness and pain: tweets about the world’s injustices, breakups, deaths, disappointments, and even ennui. This is inspired by <a href="http://twistori.com">twistori</a>.</p>

<p>At the same time these tweets are floating across the screen, I want to illuminate a part of the printed verse in physical space that corresponds to the tweet.</p>

<p>Imagine:</p>

<p>Tweet: <em>I just want everyone to understand something……I’m SEVERELY depressed right now……my (ex)girlfriend is one of the greatest things to happen to me and she’s gone.</em></p>

<p>At the same time, the LED array behind “he has sent me to bind up the brokenhearted” from Isaiah 61:1 would light up and pulse.</p>

<p>And so on, for each tweet that flies across the screen.</p>

<h2 id="architecture">Architecture</h2>
<p><a href="http://www.flickr.com/photos/andrewhao/5408232737/"><img src="http://farm6.static.flickr.com/5020/5408232737_0ba8545d4e.jpg" alt="Isaiah 61 Architecture" /></a></p>

<p>node.js would process messages from the Twitter streaming API keyed off of certain keywords and filter them by (negative) sentiment, and pushed onto queues. Queues would be drained in a fair manner and pushed out to a browser frontend, while a socket connection to an Arduino script would be responsible for pulsing the LED array.</p>

<p>Of course, there’s a lot of questions left unanswered here: How do you make an LED array? How do you do (reliable) sentiment analysis? How big should the print graphic be? How far behind the print should the LED arrays be placed for the light to be sufficiently diffuse, yet bright enough to be visible? I’m not sure yet.</p>

<h2 id="first-steps">First steps</h2>

<p>So I just bought an Arduino and a ton of LEDs off of eBay. I’m trying to relearn all the EE40 I tried so hard to forget way back in my undergrad days.</p>

<p>[caption id=”” align=”alignnone” width=”500” caption=”Arduinos are cool. I had to do my fair share of head-scratching to figure out resistor values.”]<a href="http://www.flickr.com/photos/andrewhao/5408162241/"><img src="http://farm6.static.flickr.com/5096/5408162241_201f757ddd.jpg" alt="Arduino is hooked up" /></a>[/caption]</p>

<p>[caption id=”” align=”alignnone” width=”500” caption=”A conceptual design for the print graphic.”]<a href="http://www.flickr.com/photos/andrewhao/5408870750/"><img src="http://farm6.static.flickr.com/5098/5408870750_9fa4951f0d.jpg" alt="Print Concepts" /></a>[/caption]</p>

<p>[caption id=”” align=”alignnone” width=”500” caption=”Basic node.js backend with a rudimentary frontend streams live tweets.”]<a href="http://www.flickr.com/photos/andrewhao/5408765510/"><img src="http://farm6.static.flickr.com/5137/5408765510_3381c46945.jpg" alt="Testing backend." /></a>[/caption]</p>

<p>See the (rudimentary) nodejs/client code at <a href="https://github.com/andrewhao/isaiah-61-project">github</a>.</p>

<p>See the <a href="http://www.flickr.com/photos/andrewhao/sets/72157625956085386/with/5408765510/">rest of the photos</a>.</p>

<p>More to come!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts on rural computing in Botswana]]></title>
    <link href="http://www.g9labs.com/2009/02/15/thoughts-on-rural-computing-in-botswana/"/>
    <updated>2009-02-15T06:02:41-08:00</updated>
    <id>http://www.g9labs.com/2009/02/15/thoughts-on-rural-computing-in-botswana</id>
    <content type="html"><![CDATA[<p>I’m currently in Botswana, doing volunteer work at a nonprofit Christian agency called <a href="http://lovebotswana.org">Love Botswana Outreach Mission</a>. Among my responsibilities are helping out with the organization’s IT needs. I was pleasantly surprised to discover that the organization is wired for 24/7 Internet access, despite being located about 10km out from the center of Maun, a medium-sized village.</p>

<h3 id="infrastructure">Infrastructure</h3>

<p>As far as I understand it, there is little-to-no telecom infrastructure here in Maun (i.e. there are no telephone, cable or fiber lines). Thus, most communication links happen via satellite or wifi radio.</p>

<p>The mission has a 100-ft radio tower, where a local ISP colocates a wireless repeater to hook into its wireless network. In exchange, the mission receives a special deal on its Internet access plan.</p>

<h3 id="existing-network-setup">Existing network setup</h3>

<p>Because of the relatively low price and quick setup of wireless access points, the mission currently uses a mix of wired switches and wireless repeaters to extend the reach of the network.</p>

<p>A directional antenna on the tower beams a signal to a directional antenna mounted above the IT office trailer to an access point connected through a gateway serving as the DHCP server and firewall. From there, the signal gets sent via a a wired Ethernet network to the other office buildings.</p>

<p>Wireless access points have been installed at various points along the wired office network, allowing wireless access onto the Net.</p>

<p>Only recently has Internet connectivity been extended to reach a cluster of family homes, situated about 200 meters away from the office buildings. A wireless access point is set up in the IT trailer, broadcasting on a +10dB omnidirectional antenna. The closest house to the office has an outdoor +10dB omnidirectional antenna hooked up to a wireless bridge/repeater. Thus, the link from the houses to the gateway is maintained via a wireless bridge. The houses themselves are connected on a hardwired Ethernet network.</p>

<h3 id="lessons-from-the-field">Lessons from the field</h3>

<h4 id="lesson-plan-for-environmental-factors">Lesson: plan for environmental factors.</h4>

<p>We observed that the wireless link from the homes to the offices would be intermittently reliable at best, often going down for no reason. We discovered later on that our link would fail on particularly humid days, because the signal quality over the wireless bridge would degrade significantly and decrease the range of the network.</p>

<h4 id="lesson-keep-power-voltages-in-mind">Lesson: keep power voltages in mind.</h4>

<p>I fried a power supply when I left it switched to a 115V (US) input, and plugged it into the 220V power plugs there. Sizzle. This led to a lot of apologizing and reassurances from the staff that this was a common thing for Americans to do.</p>

<h4 id="lesson-clean-computers-frequently">Lesson: Clean computers frequently.</h4>

<p>Dust is a common fact of life here. Thus, computer innards were frequently coated with dust, and more susceptible to overheating and/or a shorter lifecycle on moving parts (fans, etc).</p>

<h4 id="lesson-scan-for-viruses-too">Lesson: Scan for viruses, too</h4>

<p>I don’t know why, but viruses just seem to be more common here. I’ve been passed a few flash drives that have been infected. In the states, I’d be (un)lucky to find one a year.</p>

<h4 id="lesson-plan-for-low-bandwidth-and-outages">Lesson: Plan for low bandwidth and outages</h4>

<p>In the States, we depend on always-on Internet. Here, however, the Internet seems to go down for any of a multitude of reasons. If it <em>is</em> up, it’s being shared by fifteen computers all downloading at once over an already-restricted pipeline. Thus, Web pages can’t be expected to load reliably, Skype sessions will cut out, and chat services won’t be accessible.</p>

<p>I’ve come to depend on <a href="http://gmailblog.blogspot.com/2009/01/new-in-labs-offline-gmail.html">Offline Gmail</a> to compose email when the Internet’s down. Other productivity apps like <a href="http://rememberthemilk.com">Remember the Milk</a> and <a href="http://docs.google.com">Google Docs</a> offer offline modes for their applications.</p>

<p>I rely on Bonjour-enabled chat (iChat on a Mac, <a href="http://pidgin.im">Pidgin</a> + <a href="http://apple.com/support/downloads/bonjourforwindows.htm">Bonjour for Windows</a>) for the times when the Internet or DHCP server goes down and I need to chat with somebody in another office or house.</p>

<p>When making large-ish downloads, I’ve gone to using a download manager (flashback to the days of the 56K modem trying to download a 20 MB file)! I’ve been using <a href="http://freedownloadmanager.org">Free Download Manager</a>. It’s not much of a name, but it’s a full-featured open source program allowing you to schedule, pause, resume downloads.</p>

<p>Just FYI: my downloads range between 900 bytes/sec up to 28KB/sec.</p>

<h4 id="lesson-designing-web-pages-for-low-bandwidth-is-still-a-good-idea">Lesson: Designing Web pages for low bandwidth is still a good idea</h4>

<p>As a Web developer, I tend to make the erroneous assumption people have the same quality of high-speed connection as I do back home in the States. Now that I’m a continent away from most of the sites I visit, I’m beginning to realize that optimizing a site for bandwidth savings can be a lifesaver. Here, a round trip to and from the States can take up to 20 seconds. That adds up over the course of a page load. As a Web designer or developer, ask yourself if you can be doing anything for the “56K guy”: Are you using CSS sprites? A CDN? Compressing (gzip, mod_deflate) your output? Are you optimizing your image files for the Web?</p>

<h4 id="lesson-knock-out-as-many-failure-points-as-possible">Lesson: Knock out as many failure points as possible</h4>

<p>Because the wireless bridge seemed to be the weakest link in our network, we decided to bypass it. We ran a really long Ethernet line from the IT office to the houses. This meant ordering a 200-meter length of cable, some sleeving and doing a lot of trench-digging to embed the cable under the dirt access roads. Our work paid off as everybody in the houses now enjoys a reliable network link to the main server (including me!).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First look at SproutCore and Cappuccino]]></title>
    <link href="http://www.g9labs.com/2008/10/02/first-look-at-sproutcore-and-cappuccino/"/>
    <updated>2008-10-02T03:39:40-07:00</updated>
    <id>http://www.g9labs.com/2008/10/02/first-look-at-sproutcore-and-cappuccino</id>
    <content type="html"><![CDATA[<p>One trend on the Web these days is to move away from traditional full-stack frameworks (like <a href="http://rubyonrails.org">Rails</a>) toward client-side, full-stack Javascript frameworks (among them <a href="http://dojotoolkit.org/">Dojo</a>, <a href="http://code.google.com/webtoolkit/">GWT</a>, <a href="http://sproutcore.com">SproutCore</a>, and <a href="http://cappuccino.org">Cappuccino</a>). There’s been a lot of buzz about <a href="http://www.sproutcore.com">SproutCore</a> and <a href="http://www.cappuccino.org">Cappuccino</a>, because of their design elegance, shiny Mac-ness and promises of really rich client experiences. I’ve been checking them out and here’s some of my observations so far:</p>

<ul>
  <li>
    <p>They’re both really young: SproutCore and Cappuccino have emerged only in the last three months. I haven’t heard of any deployed Cappuccino apps asides from the storied <a href="http://280slides.com/">280 Slides app</a>. Same with SproutCore, looks like asides from <a href="http://www.me.com">MobileMe</a>, they’re only beginning to see user-created apps come out (see: <a href="http://blog.otherinbox.com/">OtherInbox</a>).</p>
  </li>
  <li>
    <p>The two frameworks are beautiful. Because they both model on Cocoa, they both take on the same icon set, window chrome, pane behaviors, and so on. Nice work, lifting the good UI work from the Mac and placing it on the Web.</p>
  </li>
  <li>
    <p>Objective-J sounds cool. I just can’t see non-Cocoa programmers just picking it up, though. Even though I picked up Cocoa over the summer and I think it’s pretty awesome, there was no way I would have the energy to pick up Objective-J on my own (unless Cappuccino proves itself to be THAT big of a draw).</p>
  </li>
  <li>
    <p>Okay, but to be fair, the idea of “Cocoa on the Web” is phenomenal. I wonder if we’ll see a surge of ported Cocoa-to-Web apps. Aligning Cappuccino with AppKit is a great idea, and it’s clearly the “Web framework for Cocoa apps moving to the Web” and you’re gonna want to use it for sure if you’re a proven Cocoa hacker. I wonder, however, if it can capture users who aren’t Cocoa programmers.</p>
  </li>
  <li>
    <p>I’m a big sucker for looks. Nothing gets me excited like SproutCore applications do in all their Aqua-like goodness. GWT in comparison looks pretty frumpy. I really like OS X-looking widgets. What can I say, I was brainwashed :)</p>
  </li>
  <li>
    <p>SproutCore and Cappuccino apps are simply not going to be able to out-perform GWT apps: they simply can’t beat the compiler optimizations of compiled and optimized JS in GWT. Then again… we’re going to have crazy fast JS engines in the next year or so. We’ll see if performance is an issue.</p>
  </li>
</ul>

<p>Even though these two frameworks are only beginning to gather momentum, I’m excited at the direction they’re moving the Web in. Anybody else want to weigh in?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GWT vs. SproutCore vs. Cappuccino]]></title>
    <link href="http://www.g9labs.com/2008/10/01/gwt-vs-sproutcore-vs-cappuccino/"/>
    <updated>2008-10-01T17:55:10-07:00</updated>
    <id>http://www.g9labs.com/2008/10/01/gwt-vs-sproutcore-vs-cappuccino</id>
    <content type="html"><![CDATA[<p>I’m looking to develop a Web application with a full-stack Javascript framework like <a href="http://code.google.com/webtoolkit/">GWT</a>, <a href="http://www.sproutcore.com">SproutCore</a> or <a href="http://www.cappuccino.org">Cappuccino</a>. I’m making the decision to go with a Javascript framework over a traditional full-stack framework (like Rails) because:</p>

<ul>
  <li>
    <p>I get richer, desktop-like functionality in the browser.</p>
  </li>
  <li>
    <p>I can offload much of the work from the server onto the client.</p>
  </li>
  <li>
    <p>There’s less Javascript hand-coding so I don’t reinvent the wheel.</p>
  </li>
  <li>
    <p>I can bring the desktop app programming paradigm straight to the client.</p>
  </li>
</ul>

<p>I’ve been taking a look at <a href="http://code.google.com/webtoolkit/">GWT</a> (Google Web Toolkit), <a href="http://www.sproutcore.com">SproutCore</a> and <a href="http://www.cappuccino.org">Cappuccino</a>, and here’s some of my observations so far:</p>

<ul>
  <li>
    <p>GWT is the most mature framework out of the three at 2 years. SproutCore and Cappuccino have emerged only in the last three months.</p>
  </li>
  <li>
    <p>SproutCore is really, really, beautiful. Just look at MobileMe. I’m sure Cappuccino looks much the same. It’s probably because both emulate Cocoa, and so take on the same icon set, window chrome, pane behaviors, and so on.</p>
  </li>
  <li>
    <p>Objective-J sounds cool. I picked up Cocoa over the summer, and to have it on a Web browser is going to be phenomenal.</p>
  </li>
  <li>
    <p>Cappuccino is so new that there aren’t that many apps out there (asides from the storied <a href="http://280slides.com/">280 Slides app</a>). I’m worried that it could be buggy and docs are too sparse.</p>
  </li>
  <li>
    <p>Something about Java in GWT makes me cringe. Maybe it’s just because I’m not used to that extra compilation step. Maybe it’s because I’ve been mucking in dynamic languages for too long of a time.</p>
  </li>
  <li>
    <p>I’m a big sucker for looks. GWT looks pretty frumpy. Honestly, it doesn’t get me excited like SproutCore applications do in all their Aqua-like goodness.</p>
  </li>
  <li>
    <p>The Ext widgets from <a href="http://extjs.com/products/gxt/">Ext-GWT</a> are only slightly better. I guess I shouldn’t complain… but gosh, I really like OS X-looking widgets. What can I say, I was brainwashed :)</p>
  </li>
  <li>
    <p>SproutCore and Cappuccino are slower: they simply can’t beat the compiler optimizations of compiled and optimized JS in GWT. Then again… we’re going to have crazy fast JS engines in the next year or so.</p>
  </li>
  <li>
    <p>I considered <a href="http://dojotoolkit.org/">Dojo</a>. Sort of. I like it because it’s more mature than SC, but it’s slower than GWT and doesn’t have as many widgets as Ext.</p>
  </li>
</ul>

<p>Honestly, even though my “ooh-shiny” sense wants to use SproutCore, my objective reasoning tells me to go for GWT for its stronger support, more maturity, better performance and a fuller set of widgets. Anybody else want to weigh in?</p>
]]></content>
  </entry>
  
</feed>
