<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: TDD | The Sweet Spot]]></title>
  <link href="http://www.g9labs.com/category/tdd/atom.xml" rel="self"/>
  <link href="http://www.g9labs.com/"/>
  <updated>2015-06-19T16:14:47-07:00</updated>
  <id>http://www.g9labs.com/</id>
  <author>
    <name><![CDATA[Andrew Hao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mocks aren't stubs: mockist & classic testing]]></title>
    <link href="http://www.g9labs.com/2014/06/21/mocks-arent-stubs/"/>
    <updated>2014-06-21T17:55:00-07:00</updated>
    <id>http://www.g9labs.com/2014/06/21/mocks-arent-stubs</id>
    <content type="html"><![CDATA[<p>With the famed &ldquo;TDD is dead&rdquo; debate around the Rails community largely
coming to an end, I found myself referencing Martin Fowler&rsquo;s article,
<a href="http://martinfowler.com/articles/mocksArentStubs.html">Mocks Aren&rsquo;t Stubs</a> a good deal, trying to make sense of it in terms of how I write tests and code.</p>

<p>In this post I&rsquo;m going to talk about mocking and stubbing and their
roots, paraphrase Fowler in an attempt to explain their differences, and
walk through a couple of code examples. In each case, I&rsquo;m going to
attempt to build this example out in Ruby and RSpec 3.</p>

<p>Let&rsquo;s assume this implementation in our code for a <code>BookUpdater</code> object in Ruby. Its job is to call through its collaborating <code>ApiClient</code>, which wraps some aspect of an API that we want to call.</p>

<p>```ruby</p>

<h1>Update a book&rsquo;s metadata in our systems.</h1>

<p>class BookUpdater
  attr_accessor :book, :api_client, :response</p>

<p>  def initialize(book, api_client)</p>

<pre><code>@book = book
@api_client = api_client
</code></pre>

<p>  end</p>

<p>  def updated?</p>

<pre><code>!!response.success?
</code></pre>

<p>  end</p>

<p>  def update!</p>

<pre><code>response = api_client.call_update_api(book)
</code></pre>

<p>  end
end
```</p>

<h2>What they are</h2>

<h3>Mocks</h3>

<p>Mocks are fake objects that verify that they have received messages. In
RSpec, we traditionally use the <code>mock</code> object utility to create these objects.</p>

<p>```ruby
api_client = mock(&lsquo;api client&rsquo;)
book = Book.new</p>

<p>expect(api_client).to receive(:call_update_api).with(book).and_return(true)</p>

<p>subject = BookUpdater.new(api_client, book)
subject.list!
```</p>

<p>What&rsquo;s happening here? RSpec creates a mock <code>api_client</code> object that will verify that, after the test case executes, it has received the <code>:call_update_api</code> message with the correct arguments.</p>

<p>The main point of this style of testing is <em>behavior verification</em> &mdash; that is, that your object is behaving correctly in relation with its collaborators.</p>

<h3>Double</h3>

<p>Let&rsquo;s take a look at a <code>double</code> &mdash; also known as a <code>stub</code>. A <code>double</code> is a fake object that is set up to respond to a certain message with a pre-canned response, each time. Let&rsquo;s take a look at how I would set up a test using doubles:</p>

<p>```ruby
api_client = double(&lsquo;api client&rsquo;)
response = double(&lsquo;response&rsquo;, :success? => true)
book = Book.new</p>

<p>allow(api_client).to receive(:call_update_api).with(book).and_return(response)
expect(subject.update!).to change(subject, :updated?).from(false).to(true)
```</p>

<p>Okay, so what&rsquo;s the big deal here? My test case still passes. Note that
I had to change my code to focus its expectation on the <code>subject</code>&rsquo;s
state instead of the <code>api_client</code>.</p>

<p>The focus of using doubles is for <em>state verification</em> &mdash; that is, that so long as everybody around me is behaving according to their contracts, the test merely has to verify that internal object state changes correctly.</p>

<h3>A third way &mdash; real objects</h3>

<p>I won&rsquo;t cover this very much in depth, but with sufficiently simple objects, one could actually instantiate real objects instead of doubles, and test an object against all its collaborators. This is, in my experience, the most common experience of working in Rails + ActiveRecord applications.</p>

<h2>Classic vs Mockist testing: different strokes for different folks</h2>

<p>As we saw above, the key difference between the mock and the stub (the <code>double</code>). The focus of the test in the mock case is on the messages being sent to the collaborators. The focus of the test when using the double is on the the <code>subject</code> under test (SUT).</p>

<p>Mocks and stubs/doubles are tools that we can use under the larger umbrellas of two TDD philosophical styles: <em>classic</em> vs <em>mockist</em> styles.</p>

<h3>Classic TDD</h3>

<ul>
<li>Classic TDDists like using <code>double</code>s or real objects to test collaborators.</li>
<li>From personal experience, testing classicly is oftentimes the path of least resistance. There isn&rsquo;t expectation setup and verification that mockist testing requires of you.</li>
<li>Classic TDD sometimes results in creating objects that reveal state &mdash; note how the <code>BookUpdater</code> needed to expose an <code>updated?</code> method.</li>
<li>Setting up the state of the world prior to your test may be complex, requiring setting up all the objects in your universe. This can be a huge pain (has anybody ever had this problem with overcomplicated Rails models with spidery associations? Raise your hands&hellip;). Classicists may argue that the root cause here is not paying attention to your model architecture, and having too many associations is an antipattern. Alternatively, classicists oftentimes generate test factories (e.g. Rails' FactoryGirl gem) to manage test setup.</li>
<li>Tests tend to be treatable more like black boxes, testable under isolation (due to verifications on object state) and are more resistant to refactoring.</li>
</ul>


<h3>Mockist TDD</h3>

<ul>
<li>Mockist TDD utilizes <code>mock</code>s to verify behavior between objects and collaborators.</li>
<li>It can be argued to develop &ldquo;purer&rdquo; objects, that are mainly concerned with objects passing messages to each other. Fowler refers to these objects as preferring role-interfaces.</li>
<li>These tests are easier to set up, as they don&rsquo;t require setting up the state of the world prior to test invocation.</li>
<li>Tests tend to be more coupled to implementation, and may be more difficult to refactor due to very specific requirements for message passing between collaborators.</li>
<li>Fowler brings up a point where being a mockist means that your objects prefer to <a href="https://pragprog.com/articles/tell-dont-ask">Tell Don&rsquo;t Ask</a>. A nice side effect of TDA is you generally can avoid Demeter violations.</li>
</ul>


<h2>In conclusion</h2>

<p>In coming from a classic TDD background, I&rsquo;ve oftentimes viewed mockist testing with some suspicion, particularly around how much work is involved to bring them about. Over the years, I&rsquo;ve warmed up to the usage of mockist testing, but have not been diligent enough at doing pure driving TDD with mocks. In reviewing Fowler&rsquo;s comments, I&rsquo;m intruiged at the possibilities of mockist TDD in affecting system design, particularly in their natural inclinations toward <a href="http://martinfowler.com/bliki/RoleInterface.html">role interfaces</a>. I look forward to trying pure mockist TDD in a future project.</p>

<h4>Further reading:</h4>

<ul>
<li><a href="http://dannorth.net/introducing-bdd/">Dan North: &ldquo;Introducing BDD&rdquo;</a></li>
<li><a href="http://jamesgolick.com/2010/3/10/on-mocks-and-mockist-testing.html">James Golick: &ldquo;On Mocks and Mockist Testing&rdquo;</a></li>
<li><a href="http://jmock.org/oopsla2004.pdf">OOPSLA 2004: &ldquo;Mock Roles, Not Objects&rdquo;</a></li>
<li><a href="http://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627">Amazon: &ldquo;Growing Object Oriented Software, Guided by Tests&rdquo;</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Mocha tests with ES6/AMD modules]]></title>
    <link href="http://www.g9labs.com/2014/06/06/running-mocha-tests-with-es6-amd-modules/"/>
    <updated>2014-06-06T15:11:00-07:00</updated>
    <id>http://www.g9labs.com/2014/06/06/running-mocha-tests-with-es6-amd-modules</id>
    <content type="html"><![CDATA[<p>In one of my personal projects (<a href="https://github.com/andrewhao/chordmeister">Chordmeister</a>), I&rsquo;ve been trying to
upgrade the code to be written in <a href="http://wiki.ecmascript.org/doku.php?id=harmony:modules#export_declarations">ES6 modules</a> and transpile down to AMD modules with Square&rsquo;s <a href="https://github.com/square/es6-module-transpiler">very excellent es6-module-transpiler project</a>.</p>

<p>Since I&rsquo;ve already <a href="https://github.com/andrewhao/hendrix">updated</a> an Ember app of mine to try ES6, I figured it was high time to do it on another project.</p>

<h2>Sorry Coffeescript, but I&rsquo;m moving on.</h2>

<p>First problem: Coffeescript seems indecisive with respect to ES6
support. In order to support <code>import</code> or <code>export</code> keywords, I had to
wrap the statements in backticks, making the code look like this:</p>

<p><code>``coffeescript
</code>import ClassifiedLine from &ldquo;chordmeister/classified_line&rdquo;`
class Parser
  # Implementation</p>

<p><code>export default Parser</code>
```</p>

<p>Except this wasn&rsquo;t being picked up by es6-module-transpiler, since
Coffeescript wraps the entire declaration in a closure: I was
finding myself having problems compiling from Coffeescript &ndash;> ES5 JS &ndash;> ES6 JS.</p>

<p>```javascript
define(&ldquo;chordmeister/parser&rdquo;,
  [],
  function() {</p>

<pre><code>"use strict";
(function() {
  // Oops, I wasn't transpiled!
  import ClassifiedLine from 'chordmeister/classified_line';
  var Parser;
  Parser = (function() {
    // Implementation
  }
  )();
  // Oops, I wasn't transpiled!
  export default Parser;
  })()
</code></pre>

<p>  });</p>

<p>```</p>

<p>So the first call: ditch Coffeescript. Write this in pure ES6.</p>

<p>```javascript
import ClassifiedLine from &lsquo;chordmeister/classified_line&rsquo;;
var Parser;</p>

<p>Parser = (function() {
  // implementation
})();</p>

<p>export default Parser;
```</p>

<p>Which transpiled nicely to:</p>

<p>```javascript
define(&ldquo;chordmeister/parser&rdquo;,
  [&ldquo;chordmeister/classified_line&rdquo;,&ldquo;exports&rdquo;],
  function(<strong>dependency1</strong>, <strong>exports</strong>) {</p>

<pre><code>"use strict";
var ClassifiedLine = __dependency1__["default"];
var Parser;
Parser = (function() {
  // Implementation
})();
__exports__["default"] = Parser;
});
</code></pre>

<p>```</p>

<h2>Next up: adding AMD support in Mocha</h2>

<p>Okay, so we need to set up a few things to get Mocha playing well with RequireJS, the AMD loader.</p>

<p>Our plan of attach will be to leverage the generated AMD modules and load our tests up with them. We have the benefit of being able to specifically inject dependencies into our test suite.</p>

<p>The tricky parts will be:</p>

<h3>Set up the Mocha index.html runner</h3>

<p>Install <code>mocha</code>, <code>require.js</code>, and <code>chai</code> via <code>bower</code>, then plug them into the harness:</p>

<p>``` html test/index.html
&lt;!doctype html>
<html>
<head></p>

<pre><code>&lt;meta charset="utf-8"&gt;
&lt;meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"&gt;
&lt;title&gt;Mocha Spec Runner&lt;/title&gt;
&lt;link rel="stylesheet" href="../bower_components/mocha/mocha.css"&gt;
</code></pre>

<p></head>
<body></p>

<pre><code>&lt;div id="mocha"&gt;&lt;/div&gt;
&lt;script src="../bower_components/mocha/mocha.js"&gt;&lt;/script&gt;
&lt;script src="../bower_components/chai/chai.js"&gt;&lt;/script&gt;
&lt;script data-main="test_helper" src="../bower_components/requirejs/require.js"&gt;&lt;/script&gt;
</code></pre>

<p></body>
</html></p>

<p>```</p>

<p>Note the references to <code>data-main="test_helper"</code>, which is require.js&rsquo;s way of determining its entry point after it loads.</p>

<h3>Set up a test runner.</h3>

<p>``` javascript test/test_runner.js
// Configure and set up the tests.
require.config({
  baseUrl: &ldquo;../build/&rdquo;
})</p>

<p>// Load up the files to run against
var specs = [
  &lsquo;chordmeister/chord_spec.js&rsquo;,
  &lsquo;chordmeister/song_spec.js&rsquo;,
  &lsquo;chordmeister/parser_spec.js&rsquo;,
  &lsquo;chordmeister/classified_line_spec.js&rsquo;,
];</p>

<p>// Start up the specs.
require(specs, function(require) {
  mocha.setup(&lsquo;bdd&rsquo;);
  expect = chai.expect;
  // Why? Some async loading condition? Is there a callback I should be hooking into?
  setTimeout(function() {</p>

<pre><code>mocha.run();
</code></pre>

<p>  }, 100);
});
```</p>

<p>You&rsquo;ll notice that I was having synchonicity issues between spec suite load and <code>mocha.run()</code>. Throwing everything back a few hundred ms seemed to have done the fix.</p>

<h2>AMD gotchas</h2>

<p>Pay attention to the <code>default</code> parameter that the module exports with. This is important to remember since native ES6 will allow you to directly import it with its native syntax:</p>

<p><code>javascript
import Parser from "chordmeister/parser"
</code></p>

<p>But if you&rsquo;re using RequireJS/AMD modules, you&rsquo;ll need to explicitly call out the <code>default</code> namespace from the required module, so like so:</p>

<p><code>javascript
require(["chordmeister/parser"], function(parser) {
  Parser = parser.default;
  new Parser() // and do stuff.
});
</code></p>

<p>Let me know if you have any questions!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speeding up Rspec/Cucumber feedback times without sacrificing coverage]]></title>
    <link href="http://www.g9labs.com/2012/04/27/speeding-up-rspeccucumber-feedback-times-without-sacrificing-coverage/"/>
    <updated>2012-04-27T10:27:17-07:00</updated>
    <id>http://www.g9labs.com/2012/04/27/speeding-up-rspeccucumber-feedback-times-without-sacrificing-coverage</id>
    <content type="html"><![CDATA[<iframe src="http://www.slideshare.net/slideshow/embed_code/4479466" width="512" height="421" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen>
</iframe>


<p><a href="http://www.slideshare.net/josephwilk/rocket-fuelled-cucumbers">Rocket Fuelled Cucumbers</a>
View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/josephwilk">Joseph Wilk</a></p>

<p>One thing the Blurb devs have been discussing is how we can speed up our test feedback cycles without sacrificing coverage. There&rsquo;s some good tips (mainly Rails+Rspec/Cucumber) in the presentation such as:</p>

<ul>
<li>Don&rsquo;t run all the tests when developing (tag your tests by function)</li>
<li>Parallelize, chunk tests over machines/cores using Testjour/<a href="https://github.com/sandro/specjour">Specjour</a>, <a href="https://github.com/ngauthier/hydra">Hydra</a></li>
<li>Don&rsquo;t run all the tests at once. Tests that never fail should nightly.</li>
<li>Instead of spinning up a browser for acceptance tests, can you use a js/DOM simulator (e.g. <a href="https://github.com/thatcher/env-js">envjs</a> via <a href="https://github.com/smparkes/capybara-envjs">capybara-envjs</a>, or <a href="https://github.com/jarib/celerity">celerity</a>)</li>
</ul>

]]></content>
  </entry>
  
</feed>
